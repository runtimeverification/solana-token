digraph {
  label="pinocchio_token_program";
  node [shape=rectangle];
  Xe9aeaaaf212ff5cc_0 [label="_ZN4core3fmt3num3imp51_$L\nT$impl$u20$core..fmt..Dis\nplay$u20$for$u20$u8$GT$3f\nmt17hb7528d9a39ef0430E", color=red];
  Xee56336712b487c9_0 [label="_ZN4core3fmt8builders9Deb\nugList6finish17h006b52cd8\n519e80dE", color=red];
  X13437086877d9cb7_0 [label="_ZN4core5slice5index24sli\nce_end_index_len_fail17h7\ne6f2137e7855a34E", color=red];
  X545456d8f563aad_0 [label="_ZN4core3fmt9Arguments9ne\nw_const17h27ff3307872bf89\n7E", color=red];
  X310df8f1c672aeb_0 [label="Intr: \ncttz_nonzero", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X1f8937e70182e85e_0 [label="_ZN4core4hint9black_box17\nhaee43377622d8965E", color=red];
  X781918ccf9219bf_0 [label="_ZN4core3fmt9Formatter10d\nebug_list17h83a5abeb16602\ne06E", color=red];
  Xcfb99dd5dbeb355e_0 [label="_ZN4core9panicking14panic\n_nounwind17h3a5ca15c20002\n51eE", color=red];
  Xac08878333d72e42_0 [label="_ZN4core9panicking5panic1\n7h941160ead03e2d54E", color=red];
  X5c48a4d6939009d7_0 [label="_ZN77_$LT$pinocchio..sysv\nars..rent..Rent$u20$as$u2\n0$pinocchio..sysvars..Sys\nvar$GT$3get17hf38567ad131\nf2adaE", color=red];
  X5487d67c18c92abd_0 [label="_ZN9pinocchio12account_in\nfo11AccountInfo8data_ptr1\n7hb6e9e0a8aa5bfc73E", color=red];
  X3d825c4445d1baca_0 [label="_ZN4core5slice5index22sli\nce_index_order_fail17h640\n68df90ca47128E", color=red];
  X5cf7402e6efa4d0b_0 [label="_ZN91_$LT$core..slice..it\ner..Iter$LT$T$GT$$u20$as$\nu20$core..iter..traits..i\nterator..Iterator$GT$4nex\nt17h8889bcd3b1e37678E", color=red];
  X5adbeff4b5cb293e_0 [label="_ZN153_$LT$core..result..\nResult$LT$T$C$F$GT$$u20$a\ns$u20$core..ops..try_trai\nt..FromResidual$LT$core..\nresult..Result$LT$core..c\nonvert..Infallible$C$E$GT\n$$GT$$GT$13from_residual1\n7h88ee5a672840db5aE", color=red];
  Xb4c60c8acc2aa4f0_0 [label="_ZN4core3fmt3num52_$LT$im\npl$u20$core..fmt..UpperHe\nx$u20$for$u20$u8$GT$3fmt1\n7hcc3293c85bcdb723E", color=red];
  Xb93f0288e0006b54_0 [label="_ZN4core3fmt9Formatter9wr\nite_str17h79222ac07baf2d9\n8E", color=red];
  Xdd778da4886cf626_0 [label="_ZN4core6result13unwrap_f\nailed17h698bf754bc36b600E", color=red];
  X1d0677a8f15bd47_0 [label="_ZN4core3fmt3num53_$LT$im\npl$u20$core..fmt..LowerHe\nx$u20$for$u20$u32$GT$3fmt\n17hb987357f13dc6cc8E", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X5b44578fd65a3909_0 [label="_ZN4core3fmt9Formatter3pa\nd17hc1359c14f299250aE", color=red];
  X67d151235d77b301_0 [label="_ZN4core3fmt3num3imp52_$L\nT$impl$u20$core..fmt..Dis\nplay$u20$for$u20$u32$GT$3\nfmt17hec74c53b91325b16E", color=red];
  Xfffaab11503b9894_0 [label="_ZN4core9panicking9panic_\nfmt17h3df1a4d3dd80ed56E", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X9b498145f7dc0efa_0 [label="_ZN4core6option13unwrap_f\nailed17hb0fa9493deab9974E", color=red];
  X1eb9e8a223d962a5_0 [label="_ZN4core9panicking19asser\nt_failed_inner17h1d286061\nca0adfe7E", color=red];
  X3e3db5977da52381_0 [label="_ZN50_$LT$T$u20$as$u20$co\nre..convert..Into$LT$U$GT\n$$GT$4into17hecca773eb6e4\n642eE", color=red];
  X6938f74b16e4abe6_0 [label="_ZN4core3fmt8builders9Deb\nugList5entry17h0c3f2561bc\n049767E", color=red];
  Xd45e0829bd9b8685_0 [label="_ZN4core5slice3raw18from_\nraw_parts_mut17hd39020404\n1394ebaE", color=red];
  X83c8e82412404978_0 [label="Intr: \nassert_inhabited", color=red];
  Xd6b56047a80c2f44_0 [label="_ZN92_$LT$spl_token_inter\nface..error..TokenError$u\n20$as$u20$core..convert..\nTryFrom$LT$u32$GT$$GT$8tr\ny_from17hb4b287096064e78e\nE", color=red];
  Xb7bf8399f7d46827_0 [label="_ZN4core5slice5index26sli\nce_start_index_len_fail17\nhc3d07dac3414cccaE", color=red];
  X43ad75e732d0e131_0 [label="Intr: \nraw_eq", color=red];
  X5ea6c111b835a80f_0 [label="Intr: \nctpop", color=red];
  Xc0df9b1997ac90da_0 [label="_ZN4core3fmt3num52_$LT$im\npl$u20$core..fmt..LowerHe\nx$u20$for$u20$u8$GT$3fmt1\n7h5c13501d312fda12E", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X7a4a77babfb83a53_0 [label="_ZN9pinocchio13program_er\nror99_$LT$impl$u20$core..\nconvert..From$LT$pinocchi\no..program_error..Program\nError$GT$$u20$for$u20$u64\n$GT$4from17h3cde40cb61358\n316E", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X85724fedaf4a5444_0 [label="_ZN4core3fmt9Formatter25d\nebug_tuple_field1_finish1\n7h9a57a6e5dd04f319E", color=red];
  X445ab3f2d45ff97a_0 [label="_ZN4core5slice3raw14from_\nraw_parts17h1e564b97e5995\n981E", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  Xab38848ab7f87cef_0 [label="Intr: \nexact_div", color=red];
  Xca95a9d6f7061805_0 [label="_ZN4core3fmt3num53_$LT$im\npl$u20$core..fmt..UpperHe\nx$u20$for$u20$u32$GT$3fmt\n17h7baa47f3e5cbe44cE", color=red];
  X2272e127fe823423_0 [label="_ZN79_$LT$core..result..R\nesult$LT$T$C$E$GT$$u20$as\n$u20$core..ops..try_trait\n..Try$GT$6branch17he25507\n9ee625a107E", color=red];
  subgraph cluster_0 {
    label="<spl_token_interface::sta\nte::mint::Mint \nas \nspl_token_interface::stat\ne::Initializable>::is_ini\ntialized";
    style="filled";
    color=lightgray;
    node_1 [label="LOCALS\l0 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l1 = &spl_token_interface::state::mint::Mint\l2 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    Xfda868f8ceb54b0b_0 -> Xfda868f8ceb54b0b_3 [label="0"];
    Xfda868f8ceb54b0b_0 -> Xfda868f8ceb54b0b_2 [label="1"];
    Xfda868f8ceb54b0b_0 -> Xfda868f8ceb54b0b_1 [label="other"];
    Xfda868f8ceb54b0b_0 [label="SwitchInt cp((*1).3)\l"];
    Xfda868f8ceb54b0b_1 -> Xfda868f8ceb54b0b_4;
    Xfda868f8ceb54b0b_1 [label="2 <- Adt{3} ()\l0 <- Adt{1} (mv(2))\lGoto\l"];
    Xfda868f8ceb54b0b_2 -> Xfda868f8ceb54b0b_4;
    Xfda868f8ceb54b0b_2 [label="0 <- Adt{0} (const bool)\lGoto\l"];
    Xfda868f8ceb54b0b_3 -> Xfda868f8ceb54b0b_4;
    Xfda868f8ceb54b0b_3 [label="0 <- Adt{0} (const bool)\lGoto\l"];
    Xfda868f8ceb54b0b_4 [label="Return\l"];
  }
  subgraph cluster_2 {
    label="<core::ops::Range<usize> \nas \ncore::slice::SliceIndex<[\npinocchio::account_info::\nAccountInfo]>>::get_unche\ncked";
    style="filled";
    color=lightgray;
    node_3 [label="LOCALS\l0 = *const [pinocchio::account_info::AccountInfo]\l1 = core::ops::Range<usize>\l2 = *const [pinocchio::account_info::AccountInfo]\l3 = bool\l4 = ()\l5 = usize\l6 = usize\l7 = usize\l8 = usize\l9 = usize\l10 = usize\l11 = *const pinocchio::account_info::AccountInfo\l12 = *const pinocchio::account_info::AccountInfo\l", style="filled", color=palegreen3];
    X35636d3a007cb3bc_0 -> X35636d3a007cb3bc_3 [label="0"];
    X35636d3a007cb3bc_0 -> X35636d3a007cb3bc_1 [label="other"];
    X35636d3a007cb3bc_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    X35636d3a007cb3bc_1 -> X35636d3a007cb3bc_2 [label="4"];
    X35636d3a007cb3bc_1 [label="Storage Live _5\l5 <- Use(cp(1.0))\lStorage Live _6\l6 <- Use(cp(1.1))\lStorage Live _7\l7 <- PtrMetadata(cp(2))\lCall\l"];
    X35636d3a007cb3bc_2 -> X35636d3a007cb3bc_3;
    X35636d3a007cb3bc_2 [label="Storage Dead _7\lStorage Dead _6\lStorage Dead _5\lGoto\l"];
    X35636d3a007cb3bc_3 [label="Storage Dead _3\lStorage Live _9\l9 <- Use(cp(1.1))\l10 <- Use(cp(1.0))\l8 <- SubUnchecked(mv(9), cp(10))\lStorage Dead _9\lStorage Live _11\lStorage Live _12\l12 <- Cast-PtrToPtr cp(2)\l11 <- Offset(cp(12), cp(10))\lStorage Dead _12\l0 <- *([pinocchio::account_info::AccountInfo]) (cp(11), cp(8))\lStorage Dead _11\lReturn\l"];
  }
  X35636d3a007cb3bc_1 -> X9ee05f346622e41_0 [label="mv(5),mv(6),mv(7)"];
  subgraph cluster_4 {
    label="<core::ops::Range<usize> \nas \ncore::slice::SliceIndex<[\nu8]>>::get_unchecked";
    style="filled";
    color=lightgray;
    node_5 [label="LOCALS\l0 = *const [u8]\l1 = core::ops::Range<usize>\l2 = *const [u8]\l3 = bool\l4 = ()\l5 = usize\l6 = usize\l7 = usize\l8 = usize\l9 = usize\l10 = usize\l11 = *const u8\l12 = *const u8\l", style="filled", color=palegreen3];
    Xa5745fda7f573cf5_0 -> Xa5745fda7f573cf5_3 [label="0"];
    Xa5745fda7f573cf5_0 -> Xa5745fda7f573cf5_1 [label="other"];
    Xa5745fda7f573cf5_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    Xa5745fda7f573cf5_1 -> Xa5745fda7f573cf5_2 [label="4"];
    Xa5745fda7f573cf5_1 [label="Storage Live _5\l5 <- Use(cp(1.0))\lStorage Live _6\l6 <- Use(cp(1.1))\lStorage Live _7\l7 <- PtrMetadata(cp(2))\lCall\l"];
    Xa5745fda7f573cf5_2 -> Xa5745fda7f573cf5_3;
    Xa5745fda7f573cf5_2 [label="Storage Dead _7\lStorage Dead _6\lStorage Dead _5\lGoto\l"];
    Xa5745fda7f573cf5_3 [label="Storage Dead _3\lStorage Live _9\l9 <- Use(cp(1.1))\l10 <- Use(cp(1.0))\l8 <- SubUnchecked(mv(9), cp(10))\lStorage Dead _9\lStorage Live _11\lStorage Live _12\l12 <- Cast-PtrToPtr cp(2)\l11 <- Offset(cp(12), cp(10))\lStorage Dead _12\l0 <- *([u8]) (cp(11), cp(8))\lStorage Dead _11\lReturn\l"];
  }
  Xa5745fda7f573cf5_1 -> X9ee05f346622e41_0 [label="mv(5),mv(6),mv(7)"];
  subgraph cluster_6 {
    label="<core::ops::Range<usize> \nas \ncore::slice::SliceIndex<[\nT]>>::get_unchecked::prec\nondition_check";
    style="filled";
    color=lightgray;
    node_7 [label="LOCALS\l0 = ()\l1 = usize\l2 = usize\l3 = usize\l4 = bool\l5 = bool\l6 = !\l", style="filled", color=palegreen3];
    X9ee05f346622e41_0 -> X9ee05f346622e41_3 [label="0"];
    X9ee05f346622e41_0 -> X9ee05f346622e41_1 [label="other"];
    X9ee05f346622e41_0 [label="Storage Live _4\l4 <- Ge(cp(2), cp(1))\lSwitchInt mv(4)\l"];
    X9ee05f346622e41_1 -> X9ee05f346622e41_3 [label="0"];
    X9ee05f346622e41_1 -> X9ee05f346622e41_2 [label="other"];
    X9ee05f346622e41_1 [label="Storage Live _5\l5 <- Le(cp(2), cp(3))\lSwitchInt mv(5)\l"];
    X9ee05f346622e41_2 [label="Storage Dead _5\lStorage Dead _4\lReturn\l"];
    X9ee05f346622e41_3 [label="Call\l"];
  }
  X9ee05f346622e41_3 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_8 {
    label="<core::ops::Range<usize> \nas \ncore::slice::SliceIndex<[\nu8]>>::index";
    style="filled";
    color=lightgray;
    node_9 [label="LOCALS\l0 = &[u8]\l1 = core::ops::Range<usize>\l2 = &[u8]\l3 = !\l4 = usize\l5 = core::option::Option<usize>\l6 = usize\l7 = usize\l8 = bool\l9 = usize\l10 = !\l11 = *const [u8]\l12 = *const [u8]\l13 = bool\l14 = usize\l15 = *const u8\l16 = *const u8\l", style="filled", color=palegreen3];
    Xb47481b07fb97f48_0 -> Xb47481b07fb97f48_4 [label="0"];
    Xb47481b07fb97f48_0 -> Xb47481b07fb97f48_3 [label="other"];
    Xb47481b07fb97f48_0 [label="Storage Live _5\l6 <- Use(cp(1.1))\l7 <- Use(cp(1.0))\lStorage Live _13\l13 <- Lt(cp(6), cp(7))\lSwitchInt mv(13)\l"];
    Xb47481b07fb97f48_1 [label="Call\l"];
    Xb47481b07fb97f48_2 [label="Storage Dead _8\lStorage Live _11\lStorage Live _12\l12 <- &raw (*2)\lStorage Live _15\lStorage Live _16\l16 <- Cast-PtrToPtr cp(12)\l15 <- Offset(cp(16), cp(7))\lStorage Dead _16\l11 <- *([u8]) (cp(15), cp(4))\lStorage Dead _15\lStorage Dead _12\l0 <- & (*11)\lStorage Dead _11\lReturn\l"];
    Xb47481b07fb97f48_3 [label="Storage Dead _13\lStorage Dead _5\lCall\l"];
    Xb47481b07fb97f48_4 -> Xb47481b07fb97f48_2 [label="0"];
    Xb47481b07fb97f48_4 -> Xb47481b07fb97f48_1 [label="other"];
    Xb47481b07fb97f48_4 [label="Storage Live _14\l14 <- SubUnchecked(cp(6), cp(7))\l5 <- Adt{1} (mv(14))\lStorage Dead _14\lStorage Dead _13\l4 <- Use(cp((5 as variant 1).0))\lStorage Dead _5\lStorage Live _8\l9 <- PtrMetadata(cp(2))\l8 <- Gt(cp(6), cp(9))\lSwitchInt mv(8)\l"];
  }
  Xb47481b07fb97f48_1 -> X13437086877d9cb7_0 [label="mv(6),mv(9)"];
  Xb47481b07fb97f48_3 -> X3d825c4445d1baca_0 [label="mv(7),mv(6)"];
  subgraph cluster_10 {
    label="<core::ops::RangeTo<usize\n> \nas \ncore::slice::SliceIndex<[\npinocchio::account_info::\nAccountInfo]>>::get_unche\ncked";
    style="filled";
    color=lightgray;
    node_11 [label="LOCALS\l0 = *const [pinocchio::account_info::AccountInfo]\l1 = core::ops::RangeTo<usize>\l2 = *const [pinocchio::account_info::AccountInfo]\l3 = core::ops::Range<usize>\l4 = usize\l", style="filled", color=palegreen3];
    X547eb5d0a2c4568_0 -> X547eb5d0a2c4568_1 [label="0"];
    X547eb5d0a2c4568_0 [label="Storage Live _3\lStorage Live _4\l4 <- Use(cp(1.0))\l3 <- Adt{0} (const ?_usize, mv(4))\lStorage Dead _4\lCall\l"];
    X547eb5d0a2c4568_1 [label="Storage Dead _3\lReturn\l"];
  }
  X547eb5d0a2c4568_0 -> X35636d3a007cb3bc_0 [label="mv(3),mv(2)"];
  subgraph cluster_12 {
    label="<core::ops::RangeFrom<usi\nze> \nas \ncore::slice::SliceIndex<[\npinocchio::account_info::\nAccountInfo]>>::index";
    style="filled";
    color=lightgray;
    node_13 [label="LOCALS\l0 = &[pinocchio::account_info::AccountInfo]\l1 = core::ops::RangeFrom<usize>\l2 = &[pinocchio::account_info::AccountInfo]\l3 = bool\l4 = usize\l5 = usize\l6 = !\l7 = *const [pinocchio::account_info::AccountInfo]\l8 = *const [pinocchio::account_info::AccountInfo]\l9 = bool\l10 = ()\l11 = usize\l12 = *const pinocchio::account_info::AccountInfo\l13 = *const pinocchio::account_info::AccountInfo\l", style="filled", color=palegreen3];
    Xb10705ddd1b146e2_0 -> Xb10705ddd1b146e2_2 [label="0"];
    Xb10705ddd1b146e2_0 -> Xb10705ddd1b146e2_1 [label="other"];
    Xb10705ddd1b146e2_0 [label="Storage Live _3\l4 <- Use(cp(1.0))\l5 <- PtrMetadata(cp(2))\l3 <- Gt(cp(4), cp(5))\lSwitchInt mv(3)\l"];
    Xb10705ddd1b146e2_1 [label="Call\l"];
    Xb10705ddd1b146e2_2 -> Xb10705ddd1b146e2_4 [label="0"];
    Xb10705ddd1b146e2_2 -> Xb10705ddd1b146e2_3 [label="other"];
    Xb10705ddd1b146e2_2 [label="Storage Dead _3\lStorage Live _7\lStorage Live _8\l8 <- &raw (*2)\lStorage Live _11\lStorage Live _9\l9 <- UbChecks :: bool\lSwitchInt mv(9)\l"];
    Xb10705ddd1b146e2_3 -> Xb10705ddd1b146e2_4 [label="10"];
    Xb10705ddd1b146e2_3 [label="Call\l"];
    Xb10705ddd1b146e2_4 [label="Storage Dead _9\l11 <- SubUnchecked(cp(5), cp(4))\lStorage Live _12\lStorage Live _13\l13 <- Cast-PtrToPtr cp(8)\l12 <- Offset(cp(13), cp(4))\lStorage Dead _13\l7 <- *([pinocchio::account_info::AccountInfo]) (cp(12), cp(11))\lStorage Dead _12\lStorage Dead _11\lStorage Dead _8\l0 <- & (*7)\lStorage Dead _7\lReturn\l"];
  }
  Xb10705ddd1b146e2_1 -> Xb7bf8399f7d46827_0 [label="mv(4),mv(5)"];
  Xb10705ddd1b146e2_3 -> X9ee05f346622e41_0 [label="cp(4),cp(5),cp(5)"];
  subgraph cluster_14 {
    label="<core::ops::RangeFrom<usi\nze> \nas \ncore::slice::SliceIndex<[\nu8]>>::index";
    style="filled";
    color=lightgray;
    node_15 [label="LOCALS\l0 = &[u8]\l1 = core::ops::RangeFrom<usize>\l2 = &[u8]\l3 = bool\l4 = usize\l5 = usize\l6 = !\l7 = *const [u8]\l8 = *const [u8]\l9 = bool\l10 = ()\l11 = usize\l12 = *const u8\l13 = *const u8\l", style="filled", color=palegreen3];
    Xdbbcf3965a56e3eb_0 -> Xdbbcf3965a56e3eb_2 [label="0"];
    Xdbbcf3965a56e3eb_0 -> Xdbbcf3965a56e3eb_1 [label="other"];
    Xdbbcf3965a56e3eb_0 [label="Storage Live _3\l4 <- Use(cp(1.0))\l5 <- PtrMetadata(cp(2))\l3 <- Gt(cp(4), cp(5))\lSwitchInt mv(3)\l"];
    Xdbbcf3965a56e3eb_1 [label="Call\l"];
    Xdbbcf3965a56e3eb_2 -> Xdbbcf3965a56e3eb_4 [label="0"];
    Xdbbcf3965a56e3eb_2 -> Xdbbcf3965a56e3eb_3 [label="other"];
    Xdbbcf3965a56e3eb_2 [label="Storage Dead _3\lStorage Live _7\lStorage Live _8\l8 <- &raw (*2)\lStorage Live _11\lStorage Live _9\l9 <- UbChecks :: bool\lSwitchInt mv(9)\l"];
    Xdbbcf3965a56e3eb_3 -> Xdbbcf3965a56e3eb_4 [label="10"];
    Xdbbcf3965a56e3eb_3 [label="Call\l"];
    Xdbbcf3965a56e3eb_4 [label="Storage Dead _9\l11 <- SubUnchecked(cp(5), cp(4))\lStorage Live _12\lStorage Live _13\l13 <- Cast-PtrToPtr cp(8)\l12 <- Offset(cp(13), cp(4))\lStorage Dead _13\l7 <- *([u8]) (cp(12), cp(11))\lStorage Dead _12\lStorage Dead _11\lStorage Dead _8\l0 <- & (*7)\lStorage Dead _7\lReturn\l"];
  }
  Xdbbcf3965a56e3eb_1 -> Xb7bf8399f7d46827_0 [label="mv(4),mv(5)"];
  Xdbbcf3965a56e3eb_3 -> X9ee05f346622e41_0 [label="cp(4),cp(5),cp(5)"];
  subgraph cluster_16 {
    label="spl_token_interface::stat\ne::load_mut_unchecked::<s\npl_token_interface::state\n::mint::Mint>";
    style="filled";
    color=lightgray;
    node_17 [label="LOCALS\l0 = core::result::Result<&mut spl_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l1 = &mut [u8]\l2 = bool\l3 = usize\l4 = &[u8]\l5 = pinocchio::program_error::ProgramError\l6 = &mut spl_token_interface::state::mint::Mint\l7 = *mut spl_token_interface::state::mint::Mint\l8 = *mut u8\l", style="filled", color=palegreen3];
    X8030af829a1040e9_0 -> X8030af829a1040e9_2 [label="0"];
    X8030af829a1040e9_0 -> X8030af829a1040e9_1 [label="other"];
    X8030af829a1040e9_0 [label="4 <- & (*1)\l3 <- PtrMetadata(mv(4))\l2 <- Ne(mv(3), const ?_usize)\lSwitchInt mv(2)\l"];
    X8030af829a1040e9_1 -> X8030af829a1040e9_4;
    X8030af829a1040e9_1 [label="5 <- Adt{3} ()\l0 <- Adt{1} (mv(5))\lGoto\l"];
    X8030af829a1040e9_2 -> X8030af829a1040e9_3 [label="8"];
    X8030af829a1040e9_2 [label="Call\l"];
    X8030af829a1040e9_3 -> X8030af829a1040e9_4;
    X8030af829a1040e9_3 [label="7 <- Cast-PtrToPtr mv(8)\l6 <- &mut (*7)\l0 <- Adt{0} (cp(6))\lGoto\l"];
    X8030af829a1040e9_4 [label="Return\l"];
  }
  X8030af829a1040e9_2 -> X8641c13e22843093_0 [label="cp(1)"];
  subgraph cluster_18 {
    label="spl_token_interface::stat\ne::mint::Mint::mint_autho\nrity";
    style="filled";
    color=lightgray;
    node_19 [label="LOCALS\l0 = core::option::Option<&[u8; 32]>\l1 = &spl_token_interface::state::mint::Mint\l2 = u8\l3 = usize\l4 = usize\l5 = bool\l6 = &[u8; 32]\l", style="filled", color=palegreen3];
    Xed7a553ee817a9d7_0 -> Xed7a553ee817a9d7_1;
    Xed7a553ee817a9d7_0 [label="3 <- Use(const ?_usize)\l4 <- Use(const ?_usize)\l5 <- Lt(cp(3), cp(4))\lAssert mv(5) == true\l"];
    Xed7a553ee817a9d7_1 -> Xed7a553ee817a9d7_2 [label="1"];
    Xed7a553ee817a9d7_1 -> Xed7a553ee817a9d7_3 [label="other"];
    Xed7a553ee817a9d7_1 [label="2 <- Use(cp((*1).0.0[_3]))\lSwitchInt mv(2)\l"];
    Xed7a553ee817a9d7_2 -> Xed7a553ee817a9d7_4;
    Xed7a553ee817a9d7_2 [label="6 <- & (*1).0.1\l0 <- Adt{1} (cp(6))\lGoto\l"];
    Xed7a553ee817a9d7_3 -> Xed7a553ee817a9d7_4;
    Xed7a553ee817a9d7_3 [label="0 <- Adt{0} ()\lGoto\l"];
    Xed7a553ee817a9d7_4 [label="Return\l"];
  }
  subgraph cluster_20 {
    label="spl_token_interface::stat\ne::mint::Mint::set_initia\nlized";
    style="filled";
    color=lightgray;
    node_21 [label="LOCALS\l0 = ()\l1 = &mut spl_token_interface::state::mint::Mint\l", style="filled", color=palegreen3];
    X8830bb758d0fd5e0_0 [label="(*1).3 <- Use(const ?_u8)\lReturn\l"];
  }
  subgraph cluster_22 {
    label="spl_token_interface::stat\ne::mint::Mint::freeze_aut\nhority";
    style="filled";
    color=lightgray;
    node_23 [label="LOCALS\l0 = core::option::Option<&[u8; 32]>\l1 = &spl_token_interface::state::mint::Mint\l2 = u8\l3 = usize\l4 = usize\l5 = bool\l6 = &[u8; 32]\l", style="filled", color=palegreen3];
    X1b0653f20fb258cb_0 -> X1b0653f20fb258cb_1;
    X1b0653f20fb258cb_0 [label="3 <- Use(const ?_usize)\l4 <- Use(const ?_usize)\l5 <- Lt(cp(3), cp(4))\lAssert mv(5) == true\l"];
    X1b0653f20fb258cb_1 -> X1b0653f20fb258cb_2 [label="1"];
    X1b0653f20fb258cb_1 -> X1b0653f20fb258cb_3 [label="other"];
    X1b0653f20fb258cb_1 [label="2 <- Use(cp((*1).4.0[_3]))\lSwitchInt mv(2)\l"];
    X1b0653f20fb258cb_2 -> X1b0653f20fb258cb_4;
    X1b0653f20fb258cb_2 [label="6 <- & (*1).4.1\l0 <- Adt{1} (cp(6))\lGoto\l"];
    X1b0653f20fb258cb_3 -> X1b0653f20fb258cb_4;
    X1b0653f20fb258cb_3 [label="0 <- Adt{0} ()\lGoto\l"];
    X1b0653f20fb258cb_4 [label="Return\l"];
  }
  subgraph cluster_24 {
    label="spl_token_interface::stat\ne::mint::Mint::set_mint_a\nuthority";
    style="filled";
    color=lightgray;
    node_25 [label="LOCALS\l0 = ()\l1 = &mut spl_token_interface::state::mint::Mint\l2 = &[u8; 32]\l3 = usize\l4 = usize\l5 = bool\l6 = [u8; 32]\l", style="filled", color=palegreen3];
    X6c61caa643ed3e47_0 -> X6c61caa643ed3e47_1;
    X6c61caa643ed3e47_0 [label="3 <- Use(const ?_usize)\l4 <- Use(const ?_usize)\l5 <- Lt(cp(3), cp(4))\lAssert mv(5) == true\l"];
    X6c61caa643ed3e47_1 [label="(*1).0.0[_3] <- Use(const ?_u8)\l6 <- Use(cp((*2)))\l(*1).0.1 <- Use(mv(6))\lReturn\l"];
  }
  subgraph cluster_26 {
    label="spl_token_interface::stat\ne::mint::Mint::set_freeze\n_authority";
    style="filled";
    color=lightgray;
    node_27 [label="LOCALS\l0 = ()\l1 = &mut spl_token_interface::state::mint::Mint\l2 = &[u8; 32]\l3 = usize\l4 = usize\l5 = bool\l6 = [u8; 32]\l", style="filled", color=palegreen3];
    X1c355a9eb7d94e40_0 -> X1c355a9eb7d94e40_1;
    X1c355a9eb7d94e40_0 [label="3 <- Use(const ?_usize)\l4 <- Use(const ?_usize)\l5 <- Lt(cp(3), cp(4))\lAssert mv(5) == true\l"];
    X1c355a9eb7d94e40_1 [label="(*1).4.0[_3] <- Use(const ?_u8)\l6 <- Use(cp((*2)))\l(*1).4.1 <- Use(mv(6))\lReturn\l"];
  }
  subgraph cluster_28 {
    label="entrypoint::process_instr\nuction";
    style="filled";
    color=lightgray;
    node_29 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[u8; 32]\l2 = &[pinocchio::account_info::AccountInfo]\l3 = &[u8]\l4 = pinocchio::program_error::ProgramError\l5 = spl_token_interface::error::TokenError\l6 = &u8\l7 = &[u8]\l8 = usize\l9 = bool\l10 = core::result::Result<(), pinocchio::program_error::ProgramError>\l11 = u8\l12 = core::result::Result<(), pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    Xf71ee158856918bf_0 -> Xf71ee158856918bf_3 [label="0"];
    Xf71ee158856918bf_0 -> Xf71ee158856918bf_2 [label="other"];
    Xf71ee158856918bf_0 [label="8 <- Len((*3))\l9 <- Ge(mv(8), const ?_usize)\lSwitchInt mv(9)\l"];
    Xf71ee158856918bf_1 -> Xf71ee158856918bf_7;
    Xf71ee158856918bf_1 [label="0 <- Adt{1} (mv(4))\lGoto\l"];
    Xf71ee158856918bf_2 -> Xf71ee158856918bf_4 [label="255"];
    Xf71ee158856918bf_2 -> Xf71ee158856918bf_5 [label="other"];
    Xf71ee158856918bf_2 [label="6 <- & (*3)[0]\l7 <- & (*3)[1..-0]\l11 <- Use(cp((*6)))\lSwitchInt mv(11)\l"];
    Xf71ee158856918bf_3 -> Xf71ee158856918bf_1 [label="4"];
    Xf71ee158856918bf_3 [label="5 <- Adt{12} ()\lCall\l"];
    Xf71ee158856918bf_4 -> Xf71ee158856918bf_6 [label="10"];
    Xf71ee158856918bf_4 [label="Call\l"];
    Xf71ee158856918bf_5 -> Xf71ee158856918bf_6 [label="10"];
    Xf71ee158856918bf_5 [label="Call\l"];
    Xf71ee158856918bf_6 -> Xf71ee158856918bf_7 [label="0"];
    Xf71ee158856918bf_6 [label="12 <- Use(mv(10))\lCall\l"];
    Xf71ee158856918bf_7 [label="Return\l"];
  }
  Xf71ee158856918bf_3 -> X3e3db5977da52381_0 [label="mv(5)"];
  Xf71ee158856918bf_4 -> Xfd5a8332d4d69684_0 [label="cp(2),cp(7)"];
  Xf71ee158856918bf_5 -> Xdb069c516746123a_0 [label="cp(2),cp(3)"];
  Xf71ee158856918bf_6 -> X960a47fdaee9926a_0 [label="mv(12),const for<'a> fn(&'a pinocchio::program_error::ProgramError) {entrypoint::log_error}"];
  subgraph cluster_30 {
    label="entrypoint::inner_process\n_instruction";
    style="filled";
    color=lightgray;
    node_31 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[pinocchio::account_info::AccountInfo]\l2 = &[u8]\l3 = pinocchio::program_error::ProgramError\l4 = spl_token_interface::error::TokenError\l5 = &u8\l6 = &[u8]\l7 = usize\l8 = bool\l9 = usize\l10 = &usize\l11 = bool\l12 = usize\l13 = &[pinocchio::account_info::AccountInfo; 1]\l14 = core::option::Option<&[pinocchio::account_info::AccountInfo; 1]>\l15 = &[u8; 66]\l16 = core::option::Option<&[u8; 66]>\l17 = &usize\l18 = bool\l19 = usize\l20 = &[pinocchio::account_info::AccountInfo; 1]\l21 = core::option::Option<&[pinocchio::account_info::AccountInfo; 1]>\l22 = &[u8; 34]\l23 = core::option::Option<&[u8; 34]>\l24 = !\l25 = core::fmt::Arguments<'_>\l26 = &[&str; 1]\l27 = u8\l", style="filled", color=palegreen3];
    Xdb069c516746123a_0 -> Xdb069c516746123a_3 [label="0"];
    Xdb069c516746123a_0 -> Xdb069c516746123a_2 [label="other"];
    Xdb069c516746123a_0 [label="7 <- Len((*2))\l8 <- Ge(mv(7), const ?_usize)\lSwitchInt mv(8)\l"];
    Xdb069c516746123a_1 -> Xdb069c516746123a_19;
    Xdb069c516746123a_1 [label="0 <- Adt{1} (mv(3))\lGoto\l"];
    Xdb069c516746123a_2 -> Xdb069c516746123a_5 [label="20"];
    Xdb069c516746123a_2 -> Xdb069c516746123a_4 [label="other"];
    Xdb069c516746123a_2 [label="5 <- & (*2)[0]\l6 <- & (*2)[1..-0]\lSwitchInt cp((*5))\l"];
    Xdb069c516746123a_3 -> Xdb069c516746123a_1 [label="3"];
    Xdb069c516746123a_3 [label="4 <- Adt{12} ()\lCall\l"];
    Xdb069c516746123a_4 -> Xdb069c516746123a_19;
    Xdb069c516746123a_4 [label="27 <- Use(cp((*5)))\l0 <- Adt{0} (const ())\lGoto\l"];
    Xdb069c516746123a_5 -> Xdb069c516746123a_7 [label="0"];
    Xdb069c516746123a_5 -> Xdb069c516746123a_6 [label="other"];
    Xdb069c516746123a_5 [label="9 <- PtrMetadata(cp(6))\l10 <- & 9\l12 <- Use(cp((*10)))\l11 <- Le(const ?_usize, mv(12))\lSwitchInt mv(11)\l"];
    Xdb069c516746123a_6 -> Xdb069c516746123a_8 [label="14"];
    Xdb069c516746123a_6 [label="Call\l"];
    Xdb069c516746123a_7 -> Xdb069c516746123a_13 [label="0"];
    Xdb069c516746123a_7 -> Xdb069c516746123a_12 [label="other"];
    Xdb069c516746123a_7 [label="17 <- & 9\l19 <- Use(cp((*17)))\l18 <- Le(const ?_usize, mv(19))\lSwitchInt mv(18)\l"];
    Xdb069c516746123a_8 -> Xdb069c516746123a_9 [label="13"];
    Xdb069c516746123a_8 [label="Call\l"];
    Xdb069c516746123a_9 -> Xdb069c516746123a_10 [label="16"];
    Xdb069c516746123a_9 [label="Call\l"];
    Xdb069c516746123a_10 -> Xdb069c516746123a_11 [label="15"];
    Xdb069c516746123a_10 [label="Call\l"];
    Xdb069c516746123a_11 -> Xdb069c516746123a_19 [label="0"];
    Xdb069c516746123a_11 [label="Call\l"];
    Xdb069c516746123a_12 -> Xdb069c516746123a_14 [label="21"];
    Xdb069c516746123a_12 [label="Call\l"];
    Xdb069c516746123a_13 -> Xdb069c516746123a_18 [label="25"];
    Xdb069c516746123a_13 [label="26 <- Use(const &[&str; 1])\lCall\l"];
    Xdb069c516746123a_14 -> Xdb069c516746123a_15 [label="20"];
    Xdb069c516746123a_14 [label="Call\l"];
    Xdb069c516746123a_15 -> Xdb069c516746123a_16 [label="23"];
    Xdb069c516746123a_15 [label="Call\l"];
    Xdb069c516746123a_16 -> Xdb069c516746123a_17 [label="22"];
    Xdb069c516746123a_16 [label="Call\l"];
    Xdb069c516746123a_17 -> Xdb069c516746123a_19 [label="0"];
    Xdb069c516746123a_17 [label="Call\l"];
    Xdb069c516746123a_18 [label="Call\l"];
    Xdb069c516746123a_19 [label="Return\l"];
  }
  Xdb069c516746123a_3 -> X3e3db5977da52381_0 [label="mv(4)"];
  Xdb069c516746123a_6 -> X93456e0e13a65736_0 [label="cp(1)"];
  Xdb069c516746123a_8 -> X2e45c926b2a500bc_0 [label="mv(14)"];
  Xdb069c516746123a_9 -> Xee717654aecb5bd1_0 [label="cp(6)"];
  Xdb069c516746123a_10 -> X3a1efd46de86f33f_0 [label="mv(16)"];
  Xdb069c516746123a_11 -> X407fa8f072fd885e_0 [label="cp(13),cp(15)"];
  Xdb069c516746123a_12 -> X93456e0e13a65736_0 [label="cp(1)"];
  Xdb069c516746123a_13 -> X545456d8f563aad_0 [label="cp(26)"];
  Xdb069c516746123a_14 -> X2e45c926b2a500bc_0 [label="mv(21)"];
  Xdb069c516746123a_15 -> X9100a5b1ac90ee14_0 [label="cp(6)"];
  Xdb069c516746123a_16 -> X63ab87bd0fbb145a_0 [label="mv(23)"];
  Xdb069c516746123a_17 -> Xfe84cff2814c5b97_0 [label="cp(20),cp(22)"];
  Xdb069c516746123a_18 -> Xfffaab11503b9894_0 [label="mv(25)"];
  subgraph cluster_32 {
    label="entrypoint::test_process_\ninitialize_mint2_freeze";
    style="filled";
    color=lightgray;
    node_33 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[pinocchio::account_info::AccountInfo; 1]\l2 = &[u8; 66]\l3 = {closure@p-token/src/entrypoint.rs:928:20: 928:48}\l4 = pinocchio::sysvars::rent::Rent\l5 = core::result::Result<pinocchio::sysvars::rent::Rent, pinocchio::program_error::ProgramError>\l6 = u64\l7 = &pinocchio::sysvars::rent::Rent\l8 = usize\l9 = &pinocchio::account_info::AccountInfo\l10 = usize\l11 = usize\l12 = bool\l13 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l14 = &spl_token_interface::state::mint::Mint\l15 = spl_token_interface::state::mint::Mint\l16 = &{closure@p-token/src/entrypoint.rs:928:20: 928:48}\l17 = (&pinocchio::account_info::AccountInfo,)\l18 = &pinocchio::account_info::AccountInfo\l19 = usize\l20 = usize\l21 = bool\l22 = core::result::Result<(), pinocchio::program_error::ProgramError>\l23 = &[pinocchio::account_info::AccountInfo]\l24 = &[u8]\l25 = bool\l26 = usize\l27 = &[u8]\l28 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l29 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l30 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l31 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l32 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l33 = bool\l34 = core::panicking::AssertKind\l35 = !\l36 = core::option::Option<core::fmt::Arguments<'_>>\l37 = u8\l38 = usize\l39 = usize\l40 = bool\l41 = u8\l42 = usize\l43 = usize\l44 = bool\l45 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l46 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l47 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l48 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l49 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l50 = bool\l51 = core::panicking::AssertKind\l52 = !\l53 = core::option::Option<core::fmt::Arguments<'_>>\l54 = u8\l55 = usize\l56 = usize\l57 = bool\l58 = bool\l59 = usize\l60 = &[u8]\l61 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l62 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l63 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l64 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l65 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l66 = bool\l67 = core::panicking::AssertKind\l68 = !\l69 = core::option::Option<core::fmt::Arguments<'_>>\l70 = bool\l71 = usize\l72 = &[pinocchio::account_info::AccountInfo]\l73 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l74 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l75 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l76 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l77 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l78 = bool\l79 = core::panicking::AssertKind\l80 = !\l81 = core::option::Option<core::fmt::Arguments<'_>>\l82 = bool\l83 = usize\l84 = &pinocchio::account_info::AccountInfo\l85 = usize\l86 = usize\l87 = bool\l88 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l89 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l90 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l91 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l92 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l93 = bool\l94 = core::panicking::AssertKind\l95 = !\l96 = core::option::Option<core::fmt::Arguments<'_>>\l97 = bool\l98 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l99 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l100 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l101 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l102 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l103 = bool\l104 = core::panicking::AssertKind\l105 = !\l106 = core::option::Option<core::fmt::Arguments<'_>>\l107 = bool\l108 = u64\l109 = &pinocchio::account_info::AccountInfo\l110 = usize\l111 = usize\l112 = bool\l113 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l114 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l115 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l116 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l117 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l118 = bool\l119 = core::panicking::AssertKind\l120 = !\l121 = core::option::Option<core::fmt::Arguments<'_>>\l122 = bool\l123 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l124 = &spl_token_interface::state::mint::Mint\l125 = spl_token_interface::state::mint::Mint\l126 = &{closure@p-token/src/entrypoint.rs:928:20: 928:48}\l127 = (&pinocchio::account_info::AccountInfo,)\l128 = &pinocchio::account_info::AccountInfo\l129 = usize\l130 = usize\l131 = bool\l132 = !\l133 = (&&[u8; 32], &&[u8])\l134 = &&[u8; 32]\l135 = &[u8; 32]\l136 = core::option::Option<&[u8; 32]>\l137 = &spl_token_interface::state::mint::Mint\l138 = spl_token_interface::state::mint::Mint\l139 = &{closure@p-token/src/entrypoint.rs:928:20: 928:48}\l140 = (&pinocchio::account_info::AccountInfo,)\l141 = &pinocchio::account_info::AccountInfo\l142 = usize\l143 = usize\l144 = bool\l145 = &&[u8]\l146 = &[u8]\l147 = &[u8]\l148 = core::ops::Range<usize>\l149 = &&[u8; 32]\l150 = &&[u8]\l151 = bool\l152 = core::panicking::AssertKind\l153 = !\l154 = core::option::Option<core::fmt::Arguments<'_>>\l155 = (&u8, &u8)\l156 = &u8\l157 = spl_token_interface::state::mint::Mint\l158 = &{closure@p-token/src/entrypoint.rs:928:20: 928:48}\l159 = (&pinocchio::account_info::AccountInfo,)\l160 = &pinocchio::account_info::AccountInfo\l161 = usize\l162 = usize\l163 = bool\l164 = &u8\l165 = usize\l166 = usize\l167 = bool\l168 = &u8\l169 = &u8\l170 = bool\l171 = u8\l172 = u8\l173 = core::panicking::AssertKind\l174 = !\l175 = core::option::Option<core::fmt::Arguments<'_>>\l176 = u8\l177 = usize\l178 = usize\l179 = bool\l180 = (&&[u8; 32], &&[u8])\l181 = &&[u8; 32]\l182 = &[u8; 32]\l183 = core::option::Option<&[u8; 32]>\l184 = &spl_token_interface::state::mint::Mint\l185 = spl_token_interface::state::mint::Mint\l186 = &{closure@p-token/src/entrypoint.rs:928:20: 928:48}\l187 = (&pinocchio::account_info::AccountInfo,)\l188 = &pinocchio::account_info::AccountInfo\l189 = usize\l190 = usize\l191 = bool\l192 = &&[u8]\l193 = &[u8]\l194 = &[u8]\l195 = core::ops::Range<usize>\l196 = &&[u8; 32]\l197 = &&[u8]\l198 = bool\l199 = core::panicking::AssertKind\l200 = !\l201 = core::option::Option<core::fmt::Arguments<'_>>\l", style="filled", color=palegreen3];
    X407fa8f072fd885e_0 -> X407fa8f072fd885e_1 [label="5"];
    X407fa8f072fd885e_0 [label="Call\l"];
    X407fa8f072fd885e_1 -> X407fa8f072fd885e_2 [label="4"];
    X407fa8f072fd885e_1 [label="Call\l"];
    X407fa8f072fd885e_2 -> X407fa8f072fd885e_3;
    X407fa8f072fd885e_2 [label="7 <- & 4\l10 <- Use(const ?_usize)\l11 <- Use(const ?_usize)\l12 <- Lt(cp(10), cp(11))\lAssert mv(12) == true\l"];
    X407fa8f072fd885e_3 -> X407fa8f072fd885e_4 [label="8"];
    X407fa8f072fd885e_3 [label="9 <- & (*1)[_10]\lCall\l"];
    X407fa8f072fd885e_4 -> X407fa8f072fd885e_5 [label="6"];
    X407fa8f072fd885e_4 [label="Call\l"];
    X407fa8f072fd885e_5 -> X407fa8f072fd885e_6;
    X407fa8f072fd885e_5 [label="16 <- & 3\l19 <- Use(const ?_usize)\l20 <- Use(const ?_usize)\l21 <- Lt(cp(19), cp(20))\lAssert mv(21) == true\l"];
    X407fa8f072fd885e_6 -> X407fa8f072fd885e_7 [label="15"];
    X407fa8f072fd885e_6 [label="18 <- & (*1)[_19]\l17 <- Tuple (cp(18))\lCall\l"];
    X407fa8f072fd885e_7 -> X407fa8f072fd885e_8 [label="13"];
    X407fa8f072fd885e_7 [label="14 <- & 15\lCall\l"];
    X407fa8f072fd885e_8 -> X407fa8f072fd885e_9 [label="22"];
    X407fa8f072fd885e_8 [label="23 <- Cast-PointerCoercion(Unsize) cp(1)\l24 <- Cast-PointerCoercion(Unsize) cp(2)\lCall\l"];
    X407fa8f072fd885e_9 -> X407fa8f072fd885e_13 [label="0"];
    X407fa8f072fd885e_9 -> X407fa8f072fd885e_10 [label="other"];
    X407fa8f072fd885e_9 [label="27 <- Cast-PointerCoercion(Unsize) cp(2)\l26 <- PtrMetadata(mv(27))\l25 <- Lt(mv(26), const ?_usize)\lSwitchInt mv(25)\l"];
    X407fa8f072fd885e_10 -> X407fa8f072fd885e_11 [label="33"];
    X407fa8f072fd885e_10 [label="29 <- & 22\l30 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l28 <- Tuple (mv(29), mv(30))\l31 <- Use(cp(28.0))\l32 <- Use(cp(28.1))\lCall\l"];
    X407fa8f072fd885e_11 -> X407fa8f072fd885e_12 [label="0"];
    X407fa8f072fd885e_11 -> X407fa8f072fd885e_76 [label="other"];
    X407fa8f072fd885e_11 [label="SwitchInt mv(33)\l"];
    X407fa8f072fd885e_12 [label="34 <- Adt{0} ()\l36 <- Adt{0} ()\lCall\l"];
    X407fa8f072fd885e_13 -> X407fa8f072fd885e_14;
    X407fa8f072fd885e_13 [label="38 <- Use(const ?_usize)\l39 <- Use(const ?_usize)\l40 <- Lt(cp(38), cp(39))\lAssert mv(40) == true\l"];
    X407fa8f072fd885e_14 -> X407fa8f072fd885e_20 [label="0"];
    X407fa8f072fd885e_14 -> X407fa8f072fd885e_15 [label="other"];
    X407fa8f072fd885e_14 [label="37 <- Use(cp((*2)[_38]))\lSwitchInt mv(37)\l"];
    X407fa8f072fd885e_15 -> X407fa8f072fd885e_16;
    X407fa8f072fd885e_15 [label="42 <- Use(const ?_usize)\l43 <- Use(const ?_usize)\l44 <- Lt(cp(42), cp(43))\lAssert mv(44) == true\l"];
    X407fa8f072fd885e_16 -> X407fa8f072fd885e_20 [label="1"];
    X407fa8f072fd885e_16 -> X407fa8f072fd885e_17 [label="other"];
    X407fa8f072fd885e_16 [label="41 <- Use(cp((*2)[_42]))\lSwitchInt mv(41)\l"];
    X407fa8f072fd885e_17 -> X407fa8f072fd885e_18 [label="50"];
    X407fa8f072fd885e_17 [label="46 <- & 22\l47 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l45 <- Tuple (mv(46), mv(47))\l48 <- Use(cp(45.0))\l49 <- Use(cp(45.1))\lCall\l"];
    X407fa8f072fd885e_18 -> X407fa8f072fd885e_19 [label="0"];
    X407fa8f072fd885e_18 -> X407fa8f072fd885e_76 [label="other"];
    X407fa8f072fd885e_18 [label="SwitchInt mv(50)\l"];
    X407fa8f072fd885e_19 [label="51 <- Adt{0} ()\l53 <- Adt{0} ()\lCall\l"];
    X407fa8f072fd885e_20 -> X407fa8f072fd885e_21;
    X407fa8f072fd885e_20 [label="55 <- Use(const ?_usize)\l56 <- Use(const ?_usize)\l57 <- Lt(cp(55), cp(56))\lAssert mv(57) == true\l"];
    X407fa8f072fd885e_21 -> X407fa8f072fd885e_22 [label="1"];
    X407fa8f072fd885e_21 -> X407fa8f072fd885e_26 [label="other"];
    X407fa8f072fd885e_21 [label="54 <- Use(cp((*2)[_55]))\lSwitchInt mv(54)\l"];
    X407fa8f072fd885e_22 -> X407fa8f072fd885e_26 [label="0"];
    X407fa8f072fd885e_22 -> X407fa8f072fd885e_23 [label="other"];
    X407fa8f072fd885e_22 [label="60 <- Cast-PointerCoercion(Unsize) cp(2)\l59 <- PtrMetadata(mv(60))\l58 <- Lt(mv(59), const ?_usize)\lSwitchInt mv(58)\l"];
    X407fa8f072fd885e_23 -> X407fa8f072fd885e_24 [label="66"];
    X407fa8f072fd885e_23 [label="62 <- & 22\l63 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l61 <- Tuple (mv(62), mv(63))\l64 <- Use(cp(61.0))\l65 <- Use(cp(61.1))\lCall\l"];
    X407fa8f072fd885e_24 -> X407fa8f072fd885e_25 [label="0"];
    X407fa8f072fd885e_24 -> X407fa8f072fd885e_76 [label="other"];
    X407fa8f072fd885e_24 [label="SwitchInt mv(66)\l"];
    X407fa8f072fd885e_25 [label="67 <- Adt{0} ()\l69 <- Adt{0} ()\lCall\l"];
    X407fa8f072fd885e_26 -> X407fa8f072fd885e_30 [label="0"];
    X407fa8f072fd885e_26 -> X407fa8f072fd885e_27 [label="other"];
    X407fa8f072fd885e_26 [label="72 <- Cast-PointerCoercion(Unsize) cp(1)\l71 <- PtrMetadata(mv(72))\l70 <- Lt(mv(71), const ?_usize)\lSwitchInt mv(70)\l"];
    X407fa8f072fd885e_27 -> X407fa8f072fd885e_28 [label="78"];
    X407fa8f072fd885e_27 [label="74 <- & 22\l75 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l73 <- Tuple (mv(74), mv(75))\l76 <- Use(cp(73.0))\l77 <- Use(cp(73.1))\lCall\l"];
    X407fa8f072fd885e_28 -> X407fa8f072fd885e_29 [label="0"];
    X407fa8f072fd885e_28 -> X407fa8f072fd885e_76 [label="other"];
    X407fa8f072fd885e_28 [label="SwitchInt mv(78)\l"];
    X407fa8f072fd885e_29 [label="79 <- Adt{0} ()\l81 <- Adt{0} ()\lCall\l"];
    X407fa8f072fd885e_30 -> X407fa8f072fd885e_31;
    X407fa8f072fd885e_30 [label="85 <- Use(const ?_usize)\l86 <- Use(const ?_usize)\l87 <- Lt(cp(85), cp(86))\lAssert mv(87) == true\l"];
    X407fa8f072fd885e_31 -> X407fa8f072fd885e_32 [label="83"];
    X407fa8f072fd885e_31 [label="84 <- & (*1)[_85]\lCall\l"];
    X407fa8f072fd885e_32 -> X407fa8f072fd885e_36 [label="0"];
    X407fa8f072fd885e_32 -> X407fa8f072fd885e_33 [label="other"];
    X407fa8f072fd885e_32 [label="82 <- Ne(mv(83), const ?_usize)\lSwitchInt mv(82)\l"];
    X407fa8f072fd885e_33 -> X407fa8f072fd885e_34 [label="93"];
    X407fa8f072fd885e_33 [label="89 <- & 22\l90 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l88 <- Tuple (mv(89), mv(90))\l91 <- Use(cp(88.0))\l92 <- Use(cp(88.1))\lCall\l"];
    X407fa8f072fd885e_34 -> X407fa8f072fd885e_35 [label="0"];
    X407fa8f072fd885e_34 -> X407fa8f072fd885e_76 [label="other"];
    X407fa8f072fd885e_34 [label="SwitchInt mv(93)\l"];
    X407fa8f072fd885e_35 [label="94 <- Adt{0} ()\l96 <- Adt{0} ()\lCall\l"];
    X407fa8f072fd885e_36 -> X407fa8f072fd885e_37 [label="97"];
    X407fa8f072fd885e_36 [label="Call\l"];
    X407fa8f072fd885e_37 -> X407fa8f072fd885e_41 [label="0"];
    X407fa8f072fd885e_37 -> X407fa8f072fd885e_38 [label="other"];
    X407fa8f072fd885e_37 [label="SwitchInt mv(97)\l"];
    X407fa8f072fd885e_38 -> X407fa8f072fd885e_39 [label="103"];
    X407fa8f072fd885e_38 [label="99 <- & 22\l100 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l98 <- Tuple (mv(99), mv(100))\l101 <- Use(cp(98.0))\l102 <- Use(cp(98.1))\lCall\l"];
    X407fa8f072fd885e_39 -> X407fa8f072fd885e_40 [label="0"];
    X407fa8f072fd885e_39 -> X407fa8f072fd885e_76 [label="other"];
    X407fa8f072fd885e_39 [label="SwitchInt mv(103)\l"];
    X407fa8f072fd885e_40 [label="104 <- Adt{0} ()\l106 <- Adt{0} ()\lCall\l"];
    X407fa8f072fd885e_41 -> X407fa8f072fd885e_42;
    X407fa8f072fd885e_41 [label="110 <- Use(const ?_usize)\l111 <- Use(const ?_usize)\l112 <- Lt(cp(110), cp(111))\lAssert mv(112) == true\l"];
    X407fa8f072fd885e_42 -> X407fa8f072fd885e_43 [label="108"];
    X407fa8f072fd885e_42 [label="109 <- & (*1)[_110]\lCall\l"];
    X407fa8f072fd885e_43 -> X407fa8f072fd885e_47 [label="0"];
    X407fa8f072fd885e_43 -> X407fa8f072fd885e_44 [label="other"];
    X407fa8f072fd885e_43 [label="107 <- Lt(mv(108), cp(6))\lSwitchInt mv(107)\l"];
    X407fa8f072fd885e_44 -> X407fa8f072fd885e_45 [label="118"];
    X407fa8f072fd885e_44 [label="114 <- & 22\l115 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l113 <- Tuple (mv(114), mv(115))\l116 <- Use(cp(113.0))\l117 <- Use(cp(113.1))\lCall\l"];
    X407fa8f072fd885e_45 -> X407fa8f072fd885e_46 [label="0"];
    X407fa8f072fd885e_45 -> X407fa8f072fd885e_76 [label="other"];
    X407fa8f072fd885e_45 [label="SwitchInt mv(118)\l"];
    X407fa8f072fd885e_46 [label="119 <- Adt{0} ()\l121 <- Adt{0} ()\lCall\l"];
    X407fa8f072fd885e_47 -> X407fa8f072fd885e_48;
    X407fa8f072fd885e_47 [label="126 <- & 3\l129 <- Use(const ?_usize)\l130 <- Use(const ?_usize)\l131 <- Lt(cp(129), cp(130))\lAssert mv(131) == true\l"];
    X407fa8f072fd885e_48 -> X407fa8f072fd885e_49 [label="125"];
    X407fa8f072fd885e_48 [label="128 <- & (*1)[_129]\l127 <- Tuple (cp(128))\lCall\l"];
    X407fa8f072fd885e_49 -> X407fa8f072fd885e_50 [label="123"];
    X407fa8f072fd885e_49 [label="124 <- & 125\lCall\l"];
    X407fa8f072fd885e_50 -> X407fa8f072fd885e_51 [label="122"];
    X407fa8f072fd885e_50 [label="Call\l"];
    X407fa8f072fd885e_51 -> X407fa8f072fd885e_53 [label="0"];
    X407fa8f072fd885e_51 -> X407fa8f072fd885e_52 [label="other"];
    X407fa8f072fd885e_51 [label="SwitchInt mv(122)\l"];
    X407fa8f072fd885e_52 -> X407fa8f072fd885e_54;
    X407fa8f072fd885e_52 [label="139 <- & 3\l142 <- Use(const ?_usize)\l143 <- Use(const ?_usize)\l144 <- Lt(cp(142), cp(143))\lAssert mv(144) == true\l"];
    X407fa8f072fd885e_53 [label="Call\l"];
    X407fa8f072fd885e_54 -> X407fa8f072fd885e_55 [label="138"];
    X407fa8f072fd885e_54 [label="141 <- & (*1)[_142]\l140 <- Tuple (cp(141))\lCall\l"];
    X407fa8f072fd885e_55 -> X407fa8f072fd885e_56 [label="136"];
    X407fa8f072fd885e_55 [label="137 <- & 138\lCall\l"];
    X407fa8f072fd885e_56 -> X407fa8f072fd885e_57 [label="135"];
    X407fa8f072fd885e_56 [label="Call\l"];
    X407fa8f072fd885e_57 -> X407fa8f072fd885e_58 [label="147"];
    X407fa8f072fd885e_57 [label="134 <- & 135\l148 <- Adt{0} (const ?_usize, const ?_usize)\lCall\l"];
    X407fa8f072fd885e_58 -> X407fa8f072fd885e_59 [label="151"];
    X407fa8f072fd885e_58 [label="146 <- Use(cp(147))\l145 <- & 146\l133 <- Tuple (mv(134), mv(145))\l149 <- Use(cp(133.0))\l150 <- Use(cp(133.1))\lCall\l"];
    X407fa8f072fd885e_59 -> X407fa8f072fd885e_61 [label="0"];
    X407fa8f072fd885e_59 -> X407fa8f072fd885e_60 [label="other"];
    X407fa8f072fd885e_59 [label="SwitchInt mv(151)\l"];
    X407fa8f072fd885e_60 -> X407fa8f072fd885e_62;
    X407fa8f072fd885e_60 [label="158 <- & 3\l161 <- Use(const ?_usize)\l162 <- Use(const ?_usize)\l163 <- Lt(cp(161), cp(162))\lAssert mv(163) == true\l"];
    X407fa8f072fd885e_61 [label="152 <- Adt{0} ()\l154 <- Adt{0} ()\lCall\l"];
    X407fa8f072fd885e_62 -> X407fa8f072fd885e_63 [label="157"];
    X407fa8f072fd885e_62 [label="160 <- & (*1)[_161]\l159 <- Tuple (cp(160))\lCall\l"];
    X407fa8f072fd885e_63 -> X407fa8f072fd885e_64;
    X407fa8f072fd885e_63 [label="156 <- & 157.2\l165 <- Use(const ?_usize)\l166 <- Use(const ?_usize)\l167 <- Lt(cp(165), cp(166))\lAssert mv(167) == true\l"];
    X407fa8f072fd885e_64 -> X407fa8f072fd885e_66 [label="0"];
    X407fa8f072fd885e_64 -> X407fa8f072fd885e_65 [label="other"];
    X407fa8f072fd885e_64 [label="164 <- & (*2)[_165]\l155 <- Tuple (mv(156), mv(164))\l168 <- Use(cp(155.0))\l169 <- Use(cp(155.1))\l171 <- Use(cp((*168)))\l172 <- Use(cp((*169)))\l170 <- Eq(mv(171), mv(172))\lSwitchInt mv(170)\l"];
    X407fa8f072fd885e_65 -> X407fa8f072fd885e_67;
    X407fa8f072fd885e_65 [label="177 <- Use(const ?_usize)\l178 <- Use(const ?_usize)\l179 <- Lt(cp(177), cp(178))\lAssert mv(179) == true\l"];
    X407fa8f072fd885e_66 [label="173 <- Adt{0} ()\l175 <- Adt{0} ()\lCall\l"];
    X407fa8f072fd885e_67 -> X407fa8f072fd885e_68 [label="1"];
    X407fa8f072fd885e_67 -> X407fa8f072fd885e_76 [label="other"];
    X407fa8f072fd885e_67 [label="176 <- Use(cp((*2)[_177]))\lSwitchInt mv(176)\l"];
    X407fa8f072fd885e_68 -> X407fa8f072fd885e_69;
    X407fa8f072fd885e_68 [label="186 <- & 3\l189 <- Use(const ?_usize)\l190 <- Use(const ?_usize)\l191 <- Lt(cp(189), cp(190))\lAssert mv(191) == true\l"];
    X407fa8f072fd885e_69 -> X407fa8f072fd885e_70 [label="185"];
    X407fa8f072fd885e_69 [label="188 <- & (*1)[_189]\l187 <- Tuple (cp(188))\lCall\l"];
    X407fa8f072fd885e_70 -> X407fa8f072fd885e_71 [label="183"];
    X407fa8f072fd885e_70 [label="184 <- & 185\lCall\l"];
    X407fa8f072fd885e_71 -> X407fa8f072fd885e_72 [label="182"];
    X407fa8f072fd885e_71 [label="Call\l"];
    X407fa8f072fd885e_72 -> X407fa8f072fd885e_73 [label="194"];
    X407fa8f072fd885e_72 [label="181 <- & 182\l195 <- Adt{0} (const ?_usize, const ?_usize)\lCall\l"];
    X407fa8f072fd885e_73 -> X407fa8f072fd885e_74 [label="198"];
    X407fa8f072fd885e_73 [label="193 <- Use(cp(194))\l192 <- & 193\l180 <- Tuple (mv(181), mv(192))\l196 <- Use(cp(180.0))\l197 <- Use(cp(180.1))\lCall\l"];
    X407fa8f072fd885e_74 -> X407fa8f072fd885e_75 [label="0"];
    X407fa8f072fd885e_74 -> X407fa8f072fd885e_76 [label="other"];
    X407fa8f072fd885e_74 [label="SwitchInt mv(198)\l"];
    X407fa8f072fd885e_75 [label="199 <- Adt{0} ()\l201 <- Adt{0} ()\lCall\l"];
    X407fa8f072fd885e_76 [label="0 <- Use(mv(22))\lReturn\l"];
  }
  X407fa8f072fd885e_0 -> X5c48a4d6939009d7_0 [label=""];
  X407fa8f072fd885e_1 -> X3d82968b095936e7_0 [label="mv(5)"];
  X407fa8f072fd885e_3 -> X499a64bd2ee6dafa_0 [label="mv(9)"];
  X407fa8f072fd885e_4 -> X3036df73713f23cc_0 [label="mv(7),mv(8)"];
  X407fa8f072fd885e_6 -> X9cbf4eb77daad6b8_0 [label="mv(16),mv(17)"];
  X407fa8f072fd885e_7 -> Xfda868f8ceb54b0b_0 [label="mv(14)"];
  X407fa8f072fd885e_8 -> X7aa705fc8525068_0 [label="mv(23),mv(24)"];
  X407fa8f072fd885e_10 -> X9d133aa780502b33_0 [label="cp(31),cp(32)"];
  X407fa8f072fd885e_12 -> X1badff0345f2ca99_0 [label="mv(34),cp(31),cp(32),mv(36)"];
  X407fa8f072fd885e_17 -> X9d133aa780502b33_0 [label="cp(48),cp(49)"];
  X407fa8f072fd885e_19 -> X1badff0345f2ca99_0 [label="mv(51),cp(48),cp(49),mv(53)"];
  X407fa8f072fd885e_23 -> X9d133aa780502b33_0 [label="cp(64),cp(65)"];
  X407fa8f072fd885e_25 -> X1badff0345f2ca99_0 [label="mv(67),cp(64),cp(65),mv(69)"];
  X407fa8f072fd885e_27 -> X9d133aa780502b33_0 [label="cp(76),cp(77)"];
  X407fa8f072fd885e_29 -> X1badff0345f2ca99_0 [label="mv(79),cp(76),cp(77),mv(81)"];
  X407fa8f072fd885e_31 -> X499a64bd2ee6dafa_0 [label="mv(84)"];
  X407fa8f072fd885e_33 -> X9d133aa780502b33_0 [label="cp(91),cp(92)"];
  X407fa8f072fd885e_35 -> X1badff0345f2ca99_0 [label="mv(94),cp(91),cp(92),mv(96)"];
  X407fa8f072fd885e_36 -> X89be5f95c133d42a_0 [label="mv(13)"];
  X407fa8f072fd885e_38 -> X9d133aa780502b33_0 [label="cp(101),cp(102)"];
  X407fa8f072fd885e_40 -> X1badff0345f2ca99_0 [label="mv(104),cp(101),cp(102),mv(106)"];
  X407fa8f072fd885e_42 -> X91937cb3b305cbc5_0 [label="mv(109)"];
  X407fa8f072fd885e_44 -> X9d133aa780502b33_0 [label="cp(116),cp(117)"];
  X407fa8f072fd885e_46 -> X1badff0345f2ca99_0 [label="mv(119),cp(116),cp(117),mv(121)"];
  X407fa8f072fd885e_48 -> X9cbf4eb77daad6b8_0 [label="mv(126),mv(127)"];
  X407fa8f072fd885e_49 -> Xfda868f8ceb54b0b_0 [label="mv(124)"];
  X407fa8f072fd885e_50 -> X89be5f95c133d42a_0 [label="mv(123)"];
  X407fa8f072fd885e_53 -> Xac08878333d72e42_0 [label="const &str"];
  X407fa8f072fd885e_54 -> X9cbf4eb77daad6b8_0 [label="mv(139),mv(140)"];
  X407fa8f072fd885e_55 -> Xed7a553ee817a9d7_0 [label="mv(137)"];
  X407fa8f072fd885e_56 -> Xd12b536e58e40289_0 [label="mv(136)"];
  X407fa8f072fd885e_57 -> X18263d3eed120ea5_0 [label="cp(2),mv(148)"];
  X407fa8f072fd885e_58 -> Xd2dcda031aebbecf_0 [label="cp(149),cp(150)"];
  X407fa8f072fd885e_61 -> Xcfde3492e82f3a02_0 [label="mv(152),cp(149),cp(150),mv(154)"];
  X407fa8f072fd885e_62 -> X9cbf4eb77daad6b8_0 [label="mv(158),mv(159)"];
  X407fa8f072fd885e_66 -> Xc058ee6e6b6d85a8_0 [label="mv(173),cp(168),cp(169),mv(175)"];
  X407fa8f072fd885e_69 -> X9cbf4eb77daad6b8_0 [label="mv(186),mv(187)"];
  X407fa8f072fd885e_70 -> X1b0653f20fb258cb_0 [label="mv(184)"];
  X407fa8f072fd885e_71 -> Xd12b536e58e40289_0 [label="mv(183)"];
  X407fa8f072fd885e_72 -> X18263d3eed120ea5_0 [label="cp(2),mv(195)"];
  X407fa8f072fd885e_73 -> Xd2dcda031aebbecf_0 [label="cp(196),cp(197)"];
  X407fa8f072fd885e_75 -> Xcfde3492e82f3a02_0 [label="mv(199),cp(196),cp(197),mv(201)"];
  subgraph cluster_34 {
    label="entrypoint::test_process_\ninitialize_mint2_freeze::\n{closure#0}";
    style="filled";
    color=lightgray;
    node_35 [label="LOCALS\l0 = spl_token_interface::state::mint::Mint\l1 = &{closure@p-token/src/entrypoint.rs:928:20: 928:48}\l2 = &pinocchio::account_info::AccountInfo\l3 = *const spl_token_interface::state::mint::Mint\l4 = *const u8\l5 = &[u8]\l", style="filled", color=palegreen3];
    X9cbf4eb77daad6b8_0 -> X9cbf4eb77daad6b8_1 [label="5"];
    X9cbf4eb77daad6b8_0 [label="Call\l"];
    X9cbf4eb77daad6b8_1 -> X9cbf4eb77daad6b8_2 [label="4"];
    X9cbf4eb77daad6b8_1 [label="Call\l"];
    X9cbf4eb77daad6b8_2 -> X9cbf4eb77daad6b8_3 [label="0"];
    X9cbf4eb77daad6b8_2 [label="3 <- Cast-PtrToPtr mv(4)\lCall\l"];
    X9cbf4eb77daad6b8_3 [label="Return\l"];
  }
  X9cbf4eb77daad6b8_0 -> Xd87d8e0f8c4953f_0 [label="cp(2)"];
  X9cbf4eb77daad6b8_1 -> X5e85acfe8a19755e_0 [label="cp(5)"];
  X9cbf4eb77daad6b8_2 -> X80b73d35b2577076_0 [label="mv(3)"];
  subgraph cluster_36 {
    label="entrypoint::test_process_\ninitialize_mint2_no_freez\ne";
    style="filled";
    color=lightgray;
    node_37 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[pinocchio::account_info::AccountInfo; 1]\l2 = &[u8; 34]\l3 = {closure@p-token/src/entrypoint.rs:978:20: 978:48}\l4 = pinocchio::sysvars::rent::Rent\l5 = core::result::Result<pinocchio::sysvars::rent::Rent, pinocchio::program_error::ProgramError>\l6 = u64\l7 = &pinocchio::sysvars::rent::Rent\l8 = usize\l9 = &pinocchio::account_info::AccountInfo\l10 = usize\l11 = usize\l12 = bool\l13 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l14 = &spl_token_interface::state::mint::Mint\l15 = spl_token_interface::state::mint::Mint\l16 = &{closure@p-token/src/entrypoint.rs:978:20: 978:48}\l17 = (&pinocchio::account_info::AccountInfo,)\l18 = &pinocchio::account_info::AccountInfo\l19 = usize\l20 = usize\l21 = bool\l22 = core::result::Result<(), pinocchio::program_error::ProgramError>\l23 = &[pinocchio::account_info::AccountInfo]\l24 = &[u8]\l25 = bool\l26 = usize\l27 = &[u8]\l28 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l29 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l30 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l31 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l32 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l33 = bool\l34 = core::panicking::AssertKind\l35 = !\l36 = core::option::Option<core::fmt::Arguments<'_>>\l37 = u8\l38 = usize\l39 = usize\l40 = bool\l41 = u8\l42 = usize\l43 = usize\l44 = bool\l45 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l46 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l47 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l48 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l49 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l50 = bool\l51 = core::panicking::AssertKind\l52 = !\l53 = core::option::Option<core::fmt::Arguments<'_>>\l54 = u8\l55 = usize\l56 = usize\l57 = bool\l58 = bool\l59 = usize\l60 = &[u8]\l61 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l62 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l63 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l64 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l65 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l66 = bool\l67 = core::panicking::AssertKind\l68 = !\l69 = core::option::Option<core::fmt::Arguments<'_>>\l70 = bool\l71 = usize\l72 = &[pinocchio::account_info::AccountInfo]\l73 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l74 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l75 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l76 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l77 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l78 = bool\l79 = core::panicking::AssertKind\l80 = !\l81 = core::option::Option<core::fmt::Arguments<'_>>\l82 = bool\l83 = usize\l84 = &pinocchio::account_info::AccountInfo\l85 = usize\l86 = usize\l87 = bool\l88 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l89 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l90 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l91 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l92 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l93 = bool\l94 = core::panicking::AssertKind\l95 = !\l96 = core::option::Option<core::fmt::Arguments<'_>>\l97 = bool\l98 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l99 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l100 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l101 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l102 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l103 = bool\l104 = core::panicking::AssertKind\l105 = !\l106 = core::option::Option<core::fmt::Arguments<'_>>\l107 = bool\l108 = u64\l109 = &pinocchio::account_info::AccountInfo\l110 = usize\l111 = usize\l112 = bool\l113 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l114 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l115 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l116 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l117 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l118 = bool\l119 = core::panicking::AssertKind\l120 = !\l121 = core::option::Option<core::fmt::Arguments<'_>>\l122 = bool\l123 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l124 = &spl_token_interface::state::mint::Mint\l125 = spl_token_interface::state::mint::Mint\l126 = &{closure@p-token/src/entrypoint.rs:978:20: 978:48}\l127 = (&pinocchio::account_info::AccountInfo,)\l128 = &pinocchio::account_info::AccountInfo\l129 = usize\l130 = usize\l131 = bool\l132 = !\l133 = (&&[u8; 32], &&[u8])\l134 = &&[u8; 32]\l135 = &[u8; 32]\l136 = core::option::Option<&[u8; 32]>\l137 = &spl_token_interface::state::mint::Mint\l138 = spl_token_interface::state::mint::Mint\l139 = &{closure@p-token/src/entrypoint.rs:978:20: 978:48}\l140 = (&pinocchio::account_info::AccountInfo,)\l141 = &pinocchio::account_info::AccountInfo\l142 = usize\l143 = usize\l144 = bool\l145 = &&[u8]\l146 = &[u8]\l147 = &[u8]\l148 = core::ops::Range<usize>\l149 = &&[u8; 32]\l150 = &&[u8]\l151 = bool\l152 = core::panicking::AssertKind\l153 = !\l154 = core::option::Option<core::fmt::Arguments<'_>>\l155 = (&u8, &u8)\l156 = &u8\l157 = spl_token_interface::state::mint::Mint\l158 = &{closure@p-token/src/entrypoint.rs:978:20: 978:48}\l159 = (&pinocchio::account_info::AccountInfo,)\l160 = &pinocchio::account_info::AccountInfo\l161 = usize\l162 = usize\l163 = bool\l164 = &u8\l165 = usize\l166 = usize\l167 = bool\l168 = &u8\l169 = &u8\l170 = bool\l171 = u8\l172 = u8\l173 = core::panicking::AssertKind\l174 = !\l175 = core::option::Option<core::fmt::Arguments<'_>>\l176 = u8\l177 = usize\l178 = usize\l179 = bool\l180 = (&&[u8; 32], &&[u8])\l181 = &&[u8; 32]\l182 = &[u8; 32]\l183 = core::option::Option<&[u8; 32]>\l184 = &spl_token_interface::state::mint::Mint\l185 = spl_token_interface::state::mint::Mint\l186 = &{closure@p-token/src/entrypoint.rs:978:20: 978:48}\l187 = (&pinocchio::account_info::AccountInfo,)\l188 = &pinocchio::account_info::AccountInfo\l189 = usize\l190 = usize\l191 = bool\l192 = &&[u8]\l193 = &[u8]\l194 = &[u8]\l195 = core::ops::Range<usize>\l196 = &&[u8; 32]\l197 = &&[u8]\l198 = bool\l199 = core::panicking::AssertKind\l200 = !\l201 = core::option::Option<core::fmt::Arguments<'_>>\l", style="filled", color=palegreen3];
    Xfe84cff2814c5b97_0 -> Xfe84cff2814c5b97_1 [label="5"];
    Xfe84cff2814c5b97_0 [label="Call\l"];
    Xfe84cff2814c5b97_1 -> Xfe84cff2814c5b97_2 [label="4"];
    Xfe84cff2814c5b97_1 [label="Call\l"];
    Xfe84cff2814c5b97_2 -> Xfe84cff2814c5b97_3;
    Xfe84cff2814c5b97_2 [label="7 <- & 4\l10 <- Use(const ?_usize)\l11 <- Use(const ?_usize)\l12 <- Lt(cp(10), cp(11))\lAssert mv(12) == true\l"];
    Xfe84cff2814c5b97_3 -> Xfe84cff2814c5b97_4 [label="8"];
    Xfe84cff2814c5b97_3 [label="9 <- & (*1)[_10]\lCall\l"];
    Xfe84cff2814c5b97_4 -> Xfe84cff2814c5b97_5 [label="6"];
    Xfe84cff2814c5b97_4 [label="Call\l"];
    Xfe84cff2814c5b97_5 -> Xfe84cff2814c5b97_6;
    Xfe84cff2814c5b97_5 [label="16 <- & 3\l19 <- Use(const ?_usize)\l20 <- Use(const ?_usize)\l21 <- Lt(cp(19), cp(20))\lAssert mv(21) == true\l"];
    Xfe84cff2814c5b97_6 -> Xfe84cff2814c5b97_7 [label="15"];
    Xfe84cff2814c5b97_6 [label="18 <- & (*1)[_19]\l17 <- Tuple (cp(18))\lCall\l"];
    Xfe84cff2814c5b97_7 -> Xfe84cff2814c5b97_8 [label="13"];
    Xfe84cff2814c5b97_7 [label="14 <- & 15\lCall\l"];
    Xfe84cff2814c5b97_8 -> Xfe84cff2814c5b97_9 [label="22"];
    Xfe84cff2814c5b97_8 [label="23 <- Cast-PointerCoercion(Unsize) cp(1)\l24 <- Cast-PointerCoercion(Unsize) cp(2)\lCall\l"];
    Xfe84cff2814c5b97_9 -> Xfe84cff2814c5b97_13 [label="0"];
    Xfe84cff2814c5b97_9 -> Xfe84cff2814c5b97_10 [label="other"];
    Xfe84cff2814c5b97_9 [label="27 <- Cast-PointerCoercion(Unsize) cp(2)\l26 <- PtrMetadata(mv(27))\l25 <- Lt(mv(26), const ?_usize)\lSwitchInt mv(25)\l"];
    Xfe84cff2814c5b97_10 -> Xfe84cff2814c5b97_11 [label="33"];
    Xfe84cff2814c5b97_10 [label="29 <- & 22\l30 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l28 <- Tuple (mv(29), mv(30))\l31 <- Use(cp(28.0))\l32 <- Use(cp(28.1))\lCall\l"];
    Xfe84cff2814c5b97_11 -> Xfe84cff2814c5b97_12 [label="0"];
    Xfe84cff2814c5b97_11 -> Xfe84cff2814c5b97_76 [label="other"];
    Xfe84cff2814c5b97_11 [label="SwitchInt mv(33)\l"];
    Xfe84cff2814c5b97_12 [label="34 <- Adt{0} ()\l36 <- Adt{0} ()\lCall\l"];
    Xfe84cff2814c5b97_13 -> Xfe84cff2814c5b97_14;
    Xfe84cff2814c5b97_13 [label="38 <- Use(const ?_usize)\l39 <- Use(const ?_usize)\l40 <- Lt(cp(38), cp(39))\lAssert mv(40) == true\l"];
    Xfe84cff2814c5b97_14 -> Xfe84cff2814c5b97_20 [label="0"];
    Xfe84cff2814c5b97_14 -> Xfe84cff2814c5b97_15 [label="other"];
    Xfe84cff2814c5b97_14 [label="37 <- Use(cp((*2)[_38]))\lSwitchInt mv(37)\l"];
    Xfe84cff2814c5b97_15 -> Xfe84cff2814c5b97_16;
    Xfe84cff2814c5b97_15 [label="42 <- Use(const ?_usize)\l43 <- Use(const ?_usize)\l44 <- Lt(cp(42), cp(43))\lAssert mv(44) == true\l"];
    Xfe84cff2814c5b97_16 -> Xfe84cff2814c5b97_20 [label="1"];
    Xfe84cff2814c5b97_16 -> Xfe84cff2814c5b97_17 [label="other"];
    Xfe84cff2814c5b97_16 [label="41 <- Use(cp((*2)[_42]))\lSwitchInt mv(41)\l"];
    Xfe84cff2814c5b97_17 -> Xfe84cff2814c5b97_18 [label="50"];
    Xfe84cff2814c5b97_17 [label="46 <- & 22\l47 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l45 <- Tuple (mv(46), mv(47))\l48 <- Use(cp(45.0))\l49 <- Use(cp(45.1))\lCall\l"];
    Xfe84cff2814c5b97_18 -> Xfe84cff2814c5b97_19 [label="0"];
    Xfe84cff2814c5b97_18 -> Xfe84cff2814c5b97_76 [label="other"];
    Xfe84cff2814c5b97_18 [label="SwitchInt mv(50)\l"];
    Xfe84cff2814c5b97_19 [label="51 <- Adt{0} ()\l53 <- Adt{0} ()\lCall\l"];
    Xfe84cff2814c5b97_20 -> Xfe84cff2814c5b97_21;
    Xfe84cff2814c5b97_20 [label="55 <- Use(const ?_usize)\l56 <- Use(const ?_usize)\l57 <- Lt(cp(55), cp(56))\lAssert mv(57) == true\l"];
    Xfe84cff2814c5b97_21 -> Xfe84cff2814c5b97_22 [label="1"];
    Xfe84cff2814c5b97_21 -> Xfe84cff2814c5b97_26 [label="other"];
    Xfe84cff2814c5b97_21 [label="54 <- Use(cp((*2)[_55]))\lSwitchInt mv(54)\l"];
    Xfe84cff2814c5b97_22 -> Xfe84cff2814c5b97_26 [label="0"];
    Xfe84cff2814c5b97_22 -> Xfe84cff2814c5b97_23 [label="other"];
    Xfe84cff2814c5b97_22 [label="60 <- Cast-PointerCoercion(Unsize) cp(2)\l59 <- PtrMetadata(mv(60))\l58 <- Lt(mv(59), const ?_usize)\lSwitchInt mv(58)\l"];
    Xfe84cff2814c5b97_23 -> Xfe84cff2814c5b97_24 [label="66"];
    Xfe84cff2814c5b97_23 [label="62 <- & 22\l63 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l61 <- Tuple (mv(62), mv(63))\l64 <- Use(cp(61.0))\l65 <- Use(cp(61.1))\lCall\l"];
    Xfe84cff2814c5b97_24 -> Xfe84cff2814c5b97_25 [label="0"];
    Xfe84cff2814c5b97_24 -> Xfe84cff2814c5b97_76 [label="other"];
    Xfe84cff2814c5b97_24 [label="SwitchInt mv(66)\l"];
    Xfe84cff2814c5b97_25 [label="67 <- Adt{0} ()\l69 <- Adt{0} ()\lCall\l"];
    Xfe84cff2814c5b97_26 -> Xfe84cff2814c5b97_30 [label="0"];
    Xfe84cff2814c5b97_26 -> Xfe84cff2814c5b97_27 [label="other"];
    Xfe84cff2814c5b97_26 [label="72 <- Cast-PointerCoercion(Unsize) cp(1)\l71 <- PtrMetadata(mv(72))\l70 <- Lt(mv(71), const ?_usize)\lSwitchInt mv(70)\l"];
    Xfe84cff2814c5b97_27 -> Xfe84cff2814c5b97_28 [label="78"];
    Xfe84cff2814c5b97_27 [label="74 <- & 22\l75 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l73 <- Tuple (mv(74), mv(75))\l76 <- Use(cp(73.0))\l77 <- Use(cp(73.1))\lCall\l"];
    Xfe84cff2814c5b97_28 -> Xfe84cff2814c5b97_29 [label="0"];
    Xfe84cff2814c5b97_28 -> Xfe84cff2814c5b97_76 [label="other"];
    Xfe84cff2814c5b97_28 [label="SwitchInt mv(78)\l"];
    Xfe84cff2814c5b97_29 [label="79 <- Adt{0} ()\l81 <- Adt{0} ()\lCall\l"];
    Xfe84cff2814c5b97_30 -> Xfe84cff2814c5b97_31;
    Xfe84cff2814c5b97_30 [label="85 <- Use(const ?_usize)\l86 <- Use(const ?_usize)\l87 <- Lt(cp(85), cp(86))\lAssert mv(87) == true\l"];
    Xfe84cff2814c5b97_31 -> Xfe84cff2814c5b97_32 [label="83"];
    Xfe84cff2814c5b97_31 [label="84 <- & (*1)[_85]\lCall\l"];
    Xfe84cff2814c5b97_32 -> Xfe84cff2814c5b97_36 [label="0"];
    Xfe84cff2814c5b97_32 -> Xfe84cff2814c5b97_33 [label="other"];
    Xfe84cff2814c5b97_32 [label="82 <- Ne(mv(83), const ?_usize)\lSwitchInt mv(82)\l"];
    Xfe84cff2814c5b97_33 -> Xfe84cff2814c5b97_34 [label="93"];
    Xfe84cff2814c5b97_33 [label="89 <- & 22\l90 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l88 <- Tuple (mv(89), mv(90))\l91 <- Use(cp(88.0))\l92 <- Use(cp(88.1))\lCall\l"];
    Xfe84cff2814c5b97_34 -> Xfe84cff2814c5b97_35 [label="0"];
    Xfe84cff2814c5b97_34 -> Xfe84cff2814c5b97_76 [label="other"];
    Xfe84cff2814c5b97_34 [label="SwitchInt mv(93)\l"];
    Xfe84cff2814c5b97_35 [label="94 <- Adt{0} ()\l96 <- Adt{0} ()\lCall\l"];
    Xfe84cff2814c5b97_36 -> Xfe84cff2814c5b97_37 [label="97"];
    Xfe84cff2814c5b97_36 [label="Call\l"];
    Xfe84cff2814c5b97_37 -> Xfe84cff2814c5b97_41 [label="0"];
    Xfe84cff2814c5b97_37 -> Xfe84cff2814c5b97_38 [label="other"];
    Xfe84cff2814c5b97_37 [label="SwitchInt mv(97)\l"];
    Xfe84cff2814c5b97_38 -> Xfe84cff2814c5b97_39 [label="103"];
    Xfe84cff2814c5b97_38 [label="99 <- & 22\l100 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l98 <- Tuple (mv(99), mv(100))\l101 <- Use(cp(98.0))\l102 <- Use(cp(98.1))\lCall\l"];
    Xfe84cff2814c5b97_39 -> Xfe84cff2814c5b97_40 [label="0"];
    Xfe84cff2814c5b97_39 -> Xfe84cff2814c5b97_76 [label="other"];
    Xfe84cff2814c5b97_39 [label="SwitchInt mv(103)\l"];
    Xfe84cff2814c5b97_40 [label="104 <- Adt{0} ()\l106 <- Adt{0} ()\lCall\l"];
    Xfe84cff2814c5b97_41 -> Xfe84cff2814c5b97_42;
    Xfe84cff2814c5b97_41 [label="110 <- Use(const ?_usize)\l111 <- Use(const ?_usize)\l112 <- Lt(cp(110), cp(111))\lAssert mv(112) == true\l"];
    Xfe84cff2814c5b97_42 -> Xfe84cff2814c5b97_43 [label="108"];
    Xfe84cff2814c5b97_42 [label="109 <- & (*1)[_110]\lCall\l"];
    Xfe84cff2814c5b97_43 -> Xfe84cff2814c5b97_47 [label="0"];
    Xfe84cff2814c5b97_43 -> Xfe84cff2814c5b97_44 [label="other"];
    Xfe84cff2814c5b97_43 [label="107 <- Lt(mv(108), cp(6))\lSwitchInt mv(107)\l"];
    Xfe84cff2814c5b97_44 -> Xfe84cff2814c5b97_45 [label="118"];
    Xfe84cff2814c5b97_44 [label="114 <- & 22\l115 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l113 <- Tuple (mv(114), mv(115))\l116 <- Use(cp(113.0))\l117 <- Use(cp(113.1))\lCall\l"];
    Xfe84cff2814c5b97_45 -> Xfe84cff2814c5b97_46 [label="0"];
    Xfe84cff2814c5b97_45 -> Xfe84cff2814c5b97_76 [label="other"];
    Xfe84cff2814c5b97_45 [label="SwitchInt mv(118)\l"];
    Xfe84cff2814c5b97_46 [label="119 <- Adt{0} ()\l121 <- Adt{0} ()\lCall\l"];
    Xfe84cff2814c5b97_47 -> Xfe84cff2814c5b97_48;
    Xfe84cff2814c5b97_47 [label="126 <- & 3\l129 <- Use(const ?_usize)\l130 <- Use(const ?_usize)\l131 <- Lt(cp(129), cp(130))\lAssert mv(131) == true\l"];
    Xfe84cff2814c5b97_48 -> Xfe84cff2814c5b97_49 [label="125"];
    Xfe84cff2814c5b97_48 [label="128 <- & (*1)[_129]\l127 <- Tuple (cp(128))\lCall\l"];
    Xfe84cff2814c5b97_49 -> Xfe84cff2814c5b97_50 [label="123"];
    Xfe84cff2814c5b97_49 [label="124 <- & 125\lCall\l"];
    Xfe84cff2814c5b97_50 -> Xfe84cff2814c5b97_51 [label="122"];
    Xfe84cff2814c5b97_50 [label="Call\l"];
    Xfe84cff2814c5b97_51 -> Xfe84cff2814c5b97_53 [label="0"];
    Xfe84cff2814c5b97_51 -> Xfe84cff2814c5b97_52 [label="other"];
    Xfe84cff2814c5b97_51 [label="SwitchInt mv(122)\l"];
    Xfe84cff2814c5b97_52 -> Xfe84cff2814c5b97_54;
    Xfe84cff2814c5b97_52 [label="139 <- & 3\l142 <- Use(const ?_usize)\l143 <- Use(const ?_usize)\l144 <- Lt(cp(142), cp(143))\lAssert mv(144) == true\l"];
    Xfe84cff2814c5b97_53 [label="Call\l"];
    Xfe84cff2814c5b97_54 -> Xfe84cff2814c5b97_55 [label="138"];
    Xfe84cff2814c5b97_54 [label="141 <- & (*1)[_142]\l140 <- Tuple (cp(141))\lCall\l"];
    Xfe84cff2814c5b97_55 -> Xfe84cff2814c5b97_56 [label="136"];
    Xfe84cff2814c5b97_55 [label="137 <- & 138\lCall\l"];
    Xfe84cff2814c5b97_56 -> Xfe84cff2814c5b97_57 [label="135"];
    Xfe84cff2814c5b97_56 [label="Call\l"];
    Xfe84cff2814c5b97_57 -> Xfe84cff2814c5b97_58 [label="147"];
    Xfe84cff2814c5b97_57 [label="134 <- & 135\l148 <- Adt{0} (const ?_usize, const ?_usize)\lCall\l"];
    Xfe84cff2814c5b97_58 -> Xfe84cff2814c5b97_59 [label="151"];
    Xfe84cff2814c5b97_58 [label="146 <- Use(cp(147))\l145 <- & 146\l133 <- Tuple (mv(134), mv(145))\l149 <- Use(cp(133.0))\l150 <- Use(cp(133.1))\lCall\l"];
    Xfe84cff2814c5b97_59 -> Xfe84cff2814c5b97_61 [label="0"];
    Xfe84cff2814c5b97_59 -> Xfe84cff2814c5b97_60 [label="other"];
    Xfe84cff2814c5b97_59 [label="SwitchInt mv(151)\l"];
    Xfe84cff2814c5b97_60 -> Xfe84cff2814c5b97_62;
    Xfe84cff2814c5b97_60 [label="158 <- & 3\l161 <- Use(const ?_usize)\l162 <- Use(const ?_usize)\l163 <- Lt(cp(161), cp(162))\lAssert mv(163) == true\l"];
    Xfe84cff2814c5b97_61 [label="152 <- Adt{0} ()\l154 <- Adt{0} ()\lCall\l"];
    Xfe84cff2814c5b97_62 -> Xfe84cff2814c5b97_63 [label="157"];
    Xfe84cff2814c5b97_62 [label="160 <- & (*1)[_161]\l159 <- Tuple (cp(160))\lCall\l"];
    Xfe84cff2814c5b97_63 -> Xfe84cff2814c5b97_64;
    Xfe84cff2814c5b97_63 [label="156 <- & 157.2\l165 <- Use(const ?_usize)\l166 <- Use(const ?_usize)\l167 <- Lt(cp(165), cp(166))\lAssert mv(167) == true\l"];
    Xfe84cff2814c5b97_64 -> Xfe84cff2814c5b97_66 [label="0"];
    Xfe84cff2814c5b97_64 -> Xfe84cff2814c5b97_65 [label="other"];
    Xfe84cff2814c5b97_64 [label="164 <- & (*2)[_165]\l155 <- Tuple (mv(156), mv(164))\l168 <- Use(cp(155.0))\l169 <- Use(cp(155.1))\l171 <- Use(cp((*168)))\l172 <- Use(cp((*169)))\l170 <- Eq(mv(171), mv(172))\lSwitchInt mv(170)\l"];
    Xfe84cff2814c5b97_65 -> Xfe84cff2814c5b97_67;
    Xfe84cff2814c5b97_65 [label="177 <- Use(const ?_usize)\l178 <- Use(const ?_usize)\l179 <- Lt(cp(177), cp(178))\lAssert mv(179) == true\l"];
    Xfe84cff2814c5b97_66 [label="173 <- Adt{0} ()\l175 <- Adt{0} ()\lCall\l"];
    Xfe84cff2814c5b97_67 -> Xfe84cff2814c5b97_68 [label="1"];
    Xfe84cff2814c5b97_67 -> Xfe84cff2814c5b97_76 [label="other"];
    Xfe84cff2814c5b97_67 [label="176 <- Use(cp((*2)[_177]))\lSwitchInt mv(176)\l"];
    Xfe84cff2814c5b97_68 -> Xfe84cff2814c5b97_69;
    Xfe84cff2814c5b97_68 [label="186 <- & 3\l189 <- Use(const ?_usize)\l190 <- Use(const ?_usize)\l191 <- Lt(cp(189), cp(190))\lAssert mv(191) == true\l"];
    Xfe84cff2814c5b97_69 -> Xfe84cff2814c5b97_70 [label="185"];
    Xfe84cff2814c5b97_69 [label="188 <- & (*1)[_189]\l187 <- Tuple (cp(188))\lCall\l"];
    Xfe84cff2814c5b97_70 -> Xfe84cff2814c5b97_71 [label="183"];
    Xfe84cff2814c5b97_70 [label="184 <- & 185\lCall\l"];
    Xfe84cff2814c5b97_71 -> Xfe84cff2814c5b97_72 [label="182"];
    Xfe84cff2814c5b97_71 [label="Call\l"];
    Xfe84cff2814c5b97_72 -> Xfe84cff2814c5b97_73 [label="194"];
    Xfe84cff2814c5b97_72 [label="181 <- & 182\l195 <- Adt{0} (const ?_usize, const ?_usize)\lCall\l"];
    Xfe84cff2814c5b97_73 -> Xfe84cff2814c5b97_74 [label="198"];
    Xfe84cff2814c5b97_73 [label="193 <- Use(cp(194))\l192 <- & 193\l180 <- Tuple (mv(181), mv(192))\l196 <- Use(cp(180.0))\l197 <- Use(cp(180.1))\lCall\l"];
    Xfe84cff2814c5b97_74 -> Xfe84cff2814c5b97_75 [label="0"];
    Xfe84cff2814c5b97_74 -> Xfe84cff2814c5b97_76 [label="other"];
    Xfe84cff2814c5b97_74 [label="SwitchInt mv(198)\l"];
    Xfe84cff2814c5b97_75 [label="199 <- Adt{0} ()\l201 <- Adt{0} ()\lCall\l"];
    Xfe84cff2814c5b97_76 [label="0 <- Use(mv(22))\lReturn\l"];
  }
  Xfe84cff2814c5b97_0 -> X5c48a4d6939009d7_0 [label=""];
  Xfe84cff2814c5b97_1 -> X3d82968b095936e7_0 [label="mv(5)"];
  Xfe84cff2814c5b97_3 -> X499a64bd2ee6dafa_0 [label="mv(9)"];
  Xfe84cff2814c5b97_4 -> X3036df73713f23cc_0 [label="mv(7),mv(8)"];
  Xfe84cff2814c5b97_6 -> Xe19440c8efae6f6d_0 [label="mv(16),mv(17)"];
  Xfe84cff2814c5b97_7 -> Xfda868f8ceb54b0b_0 [label="mv(14)"];
  Xfe84cff2814c5b97_8 -> X7aa705fc8525068_0 [label="mv(23),mv(24)"];
  Xfe84cff2814c5b97_10 -> X9d133aa780502b33_0 [label="cp(31),cp(32)"];
  Xfe84cff2814c5b97_12 -> X1badff0345f2ca99_0 [label="mv(34),cp(31),cp(32),mv(36)"];
  Xfe84cff2814c5b97_17 -> X9d133aa780502b33_0 [label="cp(48),cp(49)"];
  Xfe84cff2814c5b97_19 -> X1badff0345f2ca99_0 [label="mv(51),cp(48),cp(49),mv(53)"];
  Xfe84cff2814c5b97_23 -> X9d133aa780502b33_0 [label="cp(64),cp(65)"];
  Xfe84cff2814c5b97_25 -> X1badff0345f2ca99_0 [label="mv(67),cp(64),cp(65),mv(69)"];
  Xfe84cff2814c5b97_27 -> X9d133aa780502b33_0 [label="cp(76),cp(77)"];
  Xfe84cff2814c5b97_29 -> X1badff0345f2ca99_0 [label="mv(79),cp(76),cp(77),mv(81)"];
  Xfe84cff2814c5b97_31 -> X499a64bd2ee6dafa_0 [label="mv(84)"];
  Xfe84cff2814c5b97_33 -> X9d133aa780502b33_0 [label="cp(91),cp(92)"];
  Xfe84cff2814c5b97_35 -> X1badff0345f2ca99_0 [label="mv(94),cp(91),cp(92),mv(96)"];
  Xfe84cff2814c5b97_36 -> X89be5f95c133d42a_0 [label="mv(13)"];
  Xfe84cff2814c5b97_38 -> X9d133aa780502b33_0 [label="cp(101),cp(102)"];
  Xfe84cff2814c5b97_40 -> X1badff0345f2ca99_0 [label="mv(104),cp(101),cp(102),mv(106)"];
  Xfe84cff2814c5b97_42 -> X91937cb3b305cbc5_0 [label="mv(109)"];
  Xfe84cff2814c5b97_44 -> X9d133aa780502b33_0 [label="cp(116),cp(117)"];
  Xfe84cff2814c5b97_46 -> X1badff0345f2ca99_0 [label="mv(119),cp(116),cp(117),mv(121)"];
  Xfe84cff2814c5b97_48 -> Xe19440c8efae6f6d_0 [label="mv(126),mv(127)"];
  Xfe84cff2814c5b97_49 -> Xfda868f8ceb54b0b_0 [label="mv(124)"];
  Xfe84cff2814c5b97_50 -> X89be5f95c133d42a_0 [label="mv(123)"];
  Xfe84cff2814c5b97_53 -> Xac08878333d72e42_0 [label="const &str"];
  Xfe84cff2814c5b97_54 -> Xe19440c8efae6f6d_0 [label="mv(139),mv(140)"];
  Xfe84cff2814c5b97_55 -> Xed7a553ee817a9d7_0 [label="mv(137)"];
  Xfe84cff2814c5b97_56 -> Xd12b536e58e40289_0 [label="mv(136)"];
  Xfe84cff2814c5b97_57 -> Xb134013e8890cb51_0 [label="cp(2),mv(148)"];
  Xfe84cff2814c5b97_58 -> Xd2dcda031aebbecf_0 [label="cp(149),cp(150)"];
  Xfe84cff2814c5b97_61 -> Xcfde3492e82f3a02_0 [label="mv(152),cp(149),cp(150),mv(154)"];
  Xfe84cff2814c5b97_62 -> Xe19440c8efae6f6d_0 [label="mv(158),mv(159)"];
  Xfe84cff2814c5b97_66 -> Xc058ee6e6b6d85a8_0 [label="mv(173),cp(168),cp(169),mv(175)"];
  Xfe84cff2814c5b97_69 -> Xe19440c8efae6f6d_0 [label="mv(186),mv(187)"];
  Xfe84cff2814c5b97_70 -> X1b0653f20fb258cb_0 [label="mv(184)"];
  Xfe84cff2814c5b97_71 -> Xd12b536e58e40289_0 [label="mv(183)"];
  Xfe84cff2814c5b97_72 -> Xb134013e8890cb51_0 [label="cp(2),mv(195)"];
  Xfe84cff2814c5b97_73 -> Xd2dcda031aebbecf_0 [label="cp(196),cp(197)"];
  Xfe84cff2814c5b97_75 -> Xcfde3492e82f3a02_0 [label="mv(199),cp(196),cp(197),mv(201)"];
  subgraph cluster_38 {
    label="entrypoint::test_process_\ninitialize_mint2_no_freez\ne::{closure#0}";
    style="filled";
    color=lightgray;
    node_39 [label="LOCALS\l0 = spl_token_interface::state::mint::Mint\l1 = &{closure@p-token/src/entrypoint.rs:978:20: 978:48}\l2 = &pinocchio::account_info::AccountInfo\l3 = *const spl_token_interface::state::mint::Mint\l4 = *const u8\l5 = &[u8]\l", style="filled", color=palegreen3];
    Xe19440c8efae6f6d_0 -> Xe19440c8efae6f6d_1 [label="5"];
    Xe19440c8efae6f6d_0 [label="Call\l"];
    Xe19440c8efae6f6d_1 -> Xe19440c8efae6f6d_2 [label="4"];
    Xe19440c8efae6f6d_1 [label="Call\l"];
    Xe19440c8efae6f6d_2 -> Xe19440c8efae6f6d_3 [label="0"];
    Xe19440c8efae6f6d_2 [label="3 <- Cast-PtrToPtr mv(4)\lCall\l"];
    Xe19440c8efae6f6d_3 [label="Return\l"];
  }
  Xe19440c8efae6f6d_0 -> Xd87d8e0f8c4953f_0 [label="cp(2)"];
  Xe19440c8efae6f6d_1 -> X5e85acfe8a19755e_0 [label="cp(5)"];
  Xe19440c8efae6f6d_2 -> X80b73d35b2577076_0 [label="mv(3)"];
  subgraph cluster_40 {
    label="entrypoint::log_error";
    style="filled";
    color=lightgray;
    node_41 [label="LOCALS\l0 = ()\l1 = &pinocchio::program_error::ProgramError\l2 = ()\l3 = &str\l", style="filled", color=palegreen3];
    X8c6785085c39bd7a_0 -> X8c6785085c39bd7a_1 [label="3"];
    X8c6785085c39bd7a_0 [label="Call\l"];
    X8c6785085c39bd7a_1 -> X8c6785085c39bd7a_2 [label="2"];
    X8c6785085c39bd7a_1 [label="Call\l"];
    X8c6785085c39bd7a_2 [label="Return\l"];
  }
  X8c6785085c39bd7a_0 -> X5de8bd844887fb1f_0 [label="cp(1)"];
  X8c6785085c39bd7a_1 -> X3a0ccd4589f66f55_0 [label="cp(3)"];
  subgraph cluster_42 {
    label="processor::initialize_min\nt2::process_initialize_mi\nnt2";
    style="filled";
    color=lightgray;
    node_43 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[pinocchio::account_info::AccountInfo]\l2 = &[u8]\l", style="filled", color=palegreen3];
    X7aa705fc8525068_0 -> X7aa705fc8525068_1 [label="0"];
    X7aa705fc8525068_0 [label="Call\l"];
    X7aa705fc8525068_1 [label="Return\l"];
  }
  X7aa705fc8525068_0 -> Xa55fe2123677dc1f_0 [label="cp(1),cp(2),const bool"];
  subgraph cluster_44 {
    label="processor::batch::process\n_batch";
    style="filled";
    color=lightgray;
    node_45 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[pinocchio::account_info::AccountInfo]\l2 = &[u8]\l3 = bool\l4 = usize\l5 = &[u8]\l6 = pinocchio::program_error::ProgramError\l7 = spl_token_interface::error::TokenError\l8 = usize\l9 = u8\l10 = &u8\l11 = &[u8]\l12 = usize\l13 = usize\l14 = u8\l15 = &u8\l16 = &[u8]\l17 = (usize, bool)\l18 = bool\l19 = usize\l20 = &[u8]\l21 = bool\l22 = pinocchio::program_error::ProgramError\l23 = spl_token_interface::error::TokenError\l24 = bool\l25 = usize\l26 = &[pinocchio::account_info::AccountInfo]\l27 = pinocchio::program_error::ProgramError\l28 = &[pinocchio::account_info::AccountInfo]\l29 = &[u8]\l30 = (&[pinocchio::account_info::AccountInfo], &[u8])\l31 = &[pinocchio::account_info::AccountInfo]\l32 = &[pinocchio::account_info::AccountInfo]\l33 = core::ops::RangeTo<usize>\l34 = &[u8]\l35 = &[u8]\l36 = core::ops::Range<usize>\l37 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>>\l38 = core::result::Result<(), pinocchio::program_error::ProgramError>\l39 = isize\l40 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l41 = bool\l42 = usize\l43 = &[u8]\l44 = &[pinocchio::account_info::AccountInfo]\l45 = &[pinocchio::account_info::AccountInfo]\l46 = core::ops::RangeFrom<usize>\l47 = &[u8]\l48 = &[u8]\l49 = core::ops::RangeFrom<usize>\l", style="filled", color=palegreen3];
    Xfd5a8332d4d69684_0 -> Xfd5a8332d4d69684_1;
    Xfd5a8332d4d69684_0 [label="Goto\l"];
    Xfd5a8332d4d69684_1 -> Xfd5a8332d4d69684_4 [label="0"];
    Xfd5a8332d4d69684_1 -> Xfd5a8332d4d69684_2 [label="other"];
    Xfd5a8332d4d69684_1 [label="5 <- Use(cp(2))\l4 <- PtrMetadata(mv(5))\l3 <- Lt(mv(4), const ?_usize)\lSwitchInt mv(3)\l"];
    Xfd5a8332d4d69684_2 -> Xfd5a8332d4d69684_3 [label="6"];
    Xfd5a8332d4d69684_2 [label="7 <- Adt{12} ()\lCall\l"];
    Xfd5a8332d4d69684_3 -> Xfd5a8332d4d69684_25;
    Xfd5a8332d4d69684_3 [label="0 <- Adt{1} (mv(6))\lGoto\l"];
    Xfd5a8332d4d69684_4 -> Xfd5a8332d4d69684_5 [label="10"];
    Xfd5a8332d4d69684_4 [label="11 <- Use(cp(2))\lCall\l"];
    Xfd5a8332d4d69684_5 -> Xfd5a8332d4d69684_6 [label="15"];
    Xfd5a8332d4d69684_5 [label="9 <- Use(cp((*10)))\l8 <- Cast-IntToInt mv(9)\l16 <- Use(cp(2))\lCall\l"];
    Xfd5a8332d4d69684_6 -> Xfd5a8332d4d69684_7;
    Xfd5a8332d4d69684_6 [label="14 <- Use(cp((*15)))\l13 <- Cast-IntToInt mv(14)\l17 <- chkd-Add(const ?_usize, cp(13))\lAssert mv(17.1) == false\l"];
    Xfd5a8332d4d69684_7 -> Xfd5a8332d4d69684_8 [label="0"];
    Xfd5a8332d4d69684_7 -> Xfd5a8332d4d69684_9 [label="other"];
    Xfd5a8332d4d69684_7 [label="12 <- Use(mv(17.0))\l20 <- Use(cp(2))\l19 <- PtrMetadata(mv(20))\l18 <- Lt(mv(19), cp(12))\lSwitchInt mv(18)\l"];
    Xfd5a8332d4d69684_8 -> Xfd5a8332d4d69684_11 [label="0"];
    Xfd5a8332d4d69684_8 -> Xfd5a8332d4d69684_9 [label="other"];
    Xfd5a8332d4d69684_8 [label="21 <- Eq(cp(12), const ?_usize)\lSwitchInt mv(21)\l"];
    Xfd5a8332d4d69684_9 -> Xfd5a8332d4d69684_10 [label="22"];
    Xfd5a8332d4d69684_9 [label="23 <- Adt{12} ()\lCall\l"];
    Xfd5a8332d4d69684_10 -> Xfd5a8332d4d69684_25;
    Xfd5a8332d4d69684_10 [label="0 <- Adt{1} (mv(22))\lGoto\l"];
    Xfd5a8332d4d69684_11 -> Xfd5a8332d4d69684_13 [label="0"];
    Xfd5a8332d4d69684_11 -> Xfd5a8332d4d69684_12 [label="other"];
    Xfd5a8332d4d69684_11 [label="26 <- Use(cp(1))\l25 <- PtrMetadata(mv(26))\l24 <- Lt(mv(25), cp(8))\lSwitchInt mv(24)\l"];
    Xfd5a8332d4d69684_12 -> Xfd5a8332d4d69684_25;
    Xfd5a8332d4d69684_12 [label="27 <- Adt{10} ()\l0 <- Adt{1} (mv(27))\lGoto\l"];
    Xfd5a8332d4d69684_13 -> Xfd5a8332d4d69684_14 [label="31"];
    Xfd5a8332d4d69684_13 [label="32 <- Use(cp(1))\l33 <- Adt{0} (cp(8))\lCall\l"];
    Xfd5a8332d4d69684_14 -> Xfd5a8332d4d69684_15 [label="34"];
    Xfd5a8332d4d69684_14 [label="35 <- Use(cp(2))\l36 <- Adt{0} (const ?_usize, cp(12))\lCall\l"];
    Xfd5a8332d4d69684_15 -> Xfd5a8332d4d69684_16 [label="38"];
    Xfd5a8332d4d69684_15 [label="30 <- Tuple (mv(31), mv(34))\l28 <- Use(cp(30.0))\l29 <- Use(cp(30.1))\lCall\l"];
    Xfd5a8332d4d69684_16 -> Xfd5a8332d4d69684_17 [label="37"];
    Xfd5a8332d4d69684_16 [label="Call\l"];
    Xfd5a8332d4d69684_17 -> Xfd5a8332d4d69684_19 [label="0"];
    Xfd5a8332d4d69684_17 -> Xfd5a8332d4d69684_20 [label="1"];
    Xfd5a8332d4d69684_17 -> Xfd5a8332d4d69684_18 [label="other"];
    Xfd5a8332d4d69684_17 [label="39 <- Discriminant(37)\lSwitchInt mv(39)\l"];
    Xfd5a8332d4d69684_18 [label="Unreachable\l"];
    Xfd5a8332d4d69684_19 -> Xfd5a8332d4d69684_22 [label="0"];
    Xfd5a8332d4d69684_19 -> Xfd5a8332d4d69684_21 [label="other"];
    Xfd5a8332d4d69684_19 [label="43 <- Use(cp(2))\l42 <- PtrMetadata(mv(43))\l41 <- Eq(cp(12), mv(42))\lSwitchInt mv(41)\l"];
    Xfd5a8332d4d69684_20 -> Xfd5a8332d4d69684_25 [label="0"];
    Xfd5a8332d4d69684_20 [label="40 <- Use(mv((37 as variant 1).0))\lCall\l"];
    Xfd5a8332d4d69684_21 -> Xfd5a8332d4d69684_25;
    Xfd5a8332d4d69684_21 [label="0 <- Adt{0} (const ())\lGoto\l"];
    Xfd5a8332d4d69684_22 -> Xfd5a8332d4d69684_23 [label="44"];
    Xfd5a8332d4d69684_22 [label="45 <- Use(cp(1))\l46 <- Adt{0} (cp(8))\lCall\l"];
    Xfd5a8332d4d69684_23 -> Xfd5a8332d4d69684_24 [label="47"];
    Xfd5a8332d4d69684_23 [label="1 <- Use(cp(44))\l48 <- Use(cp(2))\l49 <- Adt{0} (cp(12))\lCall\l"];
    Xfd5a8332d4d69684_24 -> Xfd5a8332d4d69684_1;
    Xfd5a8332d4d69684_24 [label="2 <- Use(cp(47))\lGoto\l"];
    Xfd5a8332d4d69684_25 [label="Return\l"];
  }
  Xfd5a8332d4d69684_2 -> X3e3db5977da52381_0 [label="mv(7)"];
  Xfd5a8332d4d69684_4 -> Xe2dd8d6d8ab56bef_0 [label="mv(11),const ?_usize"];
  Xfd5a8332d4d69684_5 -> Xe2dd8d6d8ab56bef_0 [label="mv(16),const ?_usize"];
  Xfd5a8332d4d69684_9 -> X3e3db5977da52381_0 [label="mv(23)"];
  Xfd5a8332d4d69684_13 -> X76d4fee106df2abc_0 [label="mv(32),mv(33)"];
  Xfd5a8332d4d69684_14 -> X63c3503b3e7fa274_0 [label="mv(35),mv(36)"];
  Xfd5a8332d4d69684_15 -> Xdb069c516746123a_0 [label="cp(28),cp(29)"];
  Xfd5a8332d4d69684_16 -> X2272e127fe823423_0 [label="mv(38)"];
  Xfd5a8332d4d69684_20 -> X5adbeff4b5cb293e_0 [label="mv(40)"];
  Xfd5a8332d4d69684_22 -> X7354e97359dec8c1_0 [label="mv(45),mv(46)"];
  Xfd5a8332d4d69684_23 -> Xac6bf6e65b32d0d0_0 [label="mv(48),mv(49)"];
  subgraph cluster_46 {
    label="processor::shared::initia\nlize_mint::process_initia\nlize_mint";
    style="filled";
    color=lightgray;
    node_47 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[pinocchio::account_info::AccountInfo]\l2 = &[u8]\l3 = bool\l4 = u8\l5 = &[u8; 32]\l6 = core::option::Option<&[u8; 32]>\l7 = (u8, &[u8; 32], core::option::Option<&[u8; 32]>)\l8 = bool\l9 = usize\l10 = u8\l11 = &u8\l12 = &[u8; 32]\l13 = *const [u8; 32]\l14 = *const u8\l15 = *const u8\l16 = core::option::Option<&[u8; 32]>\l17 = u8\l18 = &u8\l19 = u8\l20 = &u8\l21 = bool\l22 = usize\l23 = &[u8; 32]\l24 = *const [u8; 32]\l25 = *const u8\l26 = *const u8\l27 = pinocchio::program_error::ProgramError\l28 = spl_token_interface::error::TokenError\l29 = core::option::Option<&[u8; 32]>\l30 = pinocchio::program_error::ProgramError\l31 = spl_token_interface::error::TokenError\l32 = &pinocchio::account_info::AccountInfo\l33 = core::option::Option<&pinocchio::account_info::AccountInfo>\l34 = (&pinocchio::account_info::AccountInfo, core::option::Option<&pinocchio::account_info::AccountInfo>)\l35 = pinocchio::program_error::ProgramError\l36 = &pinocchio::account_info::AccountInfo\l37 = &pinocchio::account_info::AccountInfo\l38 = &[pinocchio::account_info::AccountInfo]\l39 = usize\l40 = bool\l41 = core::option::Option<&pinocchio::account_info::AccountInfo>\l42 = pinocchio::program_error::ProgramError\l43 = &pinocchio::account_info::AccountInfo\l44 = &[pinocchio::account_info::AccountInfo]\l45 = usize\l46 = bool\l47 = core::option::Option<&pinocchio::account_info::AccountInfo>\l48 = usize\l49 = bool\l50 = isize\l51 = &pinocchio::account_info::AccountInfo\l52 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, &pinocchio::sysvars::rent::Rent>\l53 = core::result::Result<&pinocchio::sysvars::rent::Rent, pinocchio::program_error::ProgramError>\l54 = isize\l55 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l56 = &pinocchio::sysvars::rent::Rent\l57 = u64\l58 = &pinocchio::sysvars::rent::Rent\l59 = pinocchio::sysvars::rent::Rent\l60 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, pinocchio::sysvars::rent::Rent>\l61 = core::result::Result<pinocchio::sysvars::rent::Rent, pinocchio::program_error::ProgramError>\l62 = isize\l63 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l64 = pinocchio::sysvars::rent::Rent\l65 = u64\l66 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, &mut spl_token_interface::state::mint::Mint>\l67 = core::result::Result<&mut spl_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l68 = &mut [u8]\l69 = isize\l70 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l71 = &mut spl_token_interface::state::mint::Mint\l72 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, bool>\l73 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l74 = &spl_token_interface::state::mint::Mint\l75 = isize\l76 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l77 = bool\l78 = pinocchio::program_error::ProgramError\l79 = spl_token_interface::error::TokenError\l80 = bool\l81 = pinocchio::program_error::ProgramError\l82 = spl_token_interface::error::TokenError\l83 = ()\l84 = ()\l85 = isize\l86 = &[u8; 32]\l87 = ()\l", style="filled", color=palegreen3];
    Xa55fe2123677dc1f_0 -> Xa55fe2123677dc1f_16 [label="0"];
    Xa55fe2123677dc1f_0 -> Xa55fe2123677dc1f_1 [label="other"];
    Xa55fe2123677dc1f_0 [label="9 <- PtrMetadata(cp(2))\l8 <- Ge(mv(9), const ?_usize)\lSwitchInt mv(8)\l"];
    Xa55fe2123677dc1f_1 -> Xa55fe2123677dc1f_2 [label="11"];
    Xa55fe2123677dc1f_1 [label="Call\l"];
    Xa55fe2123677dc1f_2 -> Xa55fe2123677dc1f_3 [label="15"];
    Xa55fe2123677dc1f_2 [label="10 <- Use(cp((*11)))\lCall\l"];
    Xa55fe2123677dc1f_3 -> Xa55fe2123677dc1f_4 [label="14"];
    Xa55fe2123677dc1f_3 [label="Call\l"];
    Xa55fe2123677dc1f_4 -> Xa55fe2123677dc1f_5 [label="18"];
    Xa55fe2123677dc1f_4 [label="13 <- Cast-PtrToPtr mv(14)\l12 <- & (*13)\lCall\l"];
    Xa55fe2123677dc1f_5 -> Xa55fe2123677dc1f_6 [label="0"];
    Xa55fe2123677dc1f_5 -> Xa55fe2123677dc1f_7 [label="other"];
    Xa55fe2123677dc1f_5 [label="17 <- Use(cp((*18)))\lSwitchInt mv(17)\l"];
    Xa55fe2123677dc1f_6 -> Xa55fe2123677dc1f_15;
    Xa55fe2123677dc1f_6 [label="16 <- Adt{0} ()\lGoto\l"];
    Xa55fe2123677dc1f_7 -> Xa55fe2123677dc1f_8 [label="20"];
    Xa55fe2123677dc1f_7 [label="Call\l"];
    Xa55fe2123677dc1f_8 -> Xa55fe2123677dc1f_9 [label="1"];
    Xa55fe2123677dc1f_8 -> Xa55fe2123677dc1f_13 [label="other"];
    Xa55fe2123677dc1f_8 [label="19 <- Use(cp((*20)))\lSwitchInt mv(19)\l"];
    Xa55fe2123677dc1f_9 -> Xa55fe2123677dc1f_13 [label="0"];
    Xa55fe2123677dc1f_9 -> Xa55fe2123677dc1f_10 [label="other"];
    Xa55fe2123677dc1f_9 [label="22 <- PtrMetadata(cp(2))\l21 <- Ge(mv(22), const ?_usize)\lSwitchInt mv(21)\l"];
    Xa55fe2123677dc1f_10 -> Xa55fe2123677dc1f_11 [label="26"];
    Xa55fe2123677dc1f_10 [label="Call\l"];
    Xa55fe2123677dc1f_11 -> Xa55fe2123677dc1f_12 [label="25"];
    Xa55fe2123677dc1f_11 [label="Call\l"];
    Xa55fe2123677dc1f_12 -> Xa55fe2123677dc1f_15;
    Xa55fe2123677dc1f_12 [label="24 <- Cast-PtrToPtr mv(25)\l23 <- & (*24)\l16 <- Adt{1} (mv(23))\lGoto\l"];
    Xa55fe2123677dc1f_13 -> Xa55fe2123677dc1f_14 [label="27"];
    Xa55fe2123677dc1f_13 [label="28 <- Adt{12} ()\lCall\l"];
    Xa55fe2123677dc1f_14 -> Xa55fe2123677dc1f_59;
    Xa55fe2123677dc1f_14 [label="0 <- Adt{1} (mv(27))\lGoto\l"];
    Xa55fe2123677dc1f_15 -> Xa55fe2123677dc1f_19 [label="0"];
    Xa55fe2123677dc1f_15 -> Xa55fe2123677dc1f_18 [label="other"];
    Xa55fe2123677dc1f_15 [label="29 <- Use(cp(16))\l7 <- Tuple (cp(10), cp(12), mv(29))\l4 <- Use(cp(7.0))\l5 <- Use(cp(7.1))\l6 <- Use(cp(7.2))\lSwitchInt cp(3)\l"];
    Xa55fe2123677dc1f_16 -> Xa55fe2123677dc1f_17 [label="30"];
    Xa55fe2123677dc1f_16 [label="31 <- Adt{12} ()\lCall\l"];
    Xa55fe2123677dc1f_17 -> Xa55fe2123677dc1f_59;
    Xa55fe2123677dc1f_17 [label="0 <- Adt{1} (mv(30))\lGoto\l"];
    Xa55fe2123677dc1f_18 -> Xa55fe2123677dc1f_21 [label="0"];
    Xa55fe2123677dc1f_18 -> Xa55fe2123677dc1f_20 [label="other"];
    Xa55fe2123677dc1f_18 [label="39 <- Len((*1))\l40 <- Ge(mv(39), const ?_usize)\lSwitchInt mv(40)\l"];
    Xa55fe2123677dc1f_19 -> Xa55fe2123677dc1f_22 [label="0"];
    Xa55fe2123677dc1f_19 -> Xa55fe2123677dc1f_23 [label="other"];
    Xa55fe2123677dc1f_19 [label="45 <- Len((*1))\l46 <- Ge(mv(45), const ?_usize)\lSwitchInt mv(46)\l"];
    Xa55fe2123677dc1f_20 -> Xa55fe2123677dc1f_24;
    Xa55fe2123677dc1f_20 [label="36 <- & (*1)[0]\l37 <- & (*1)[1]\l38 <- & (*1)[2..-0]\l41 <- Adt{1} (cp(37))\l34 <- Tuple (cp(36), mv(41))\lGoto\l"];
    Xa55fe2123677dc1f_21 -> Xa55fe2123677dc1f_59;
    Xa55fe2123677dc1f_21 [label="35 <- Adt{10} ()\l0 <- Adt{1} (mv(35))\lGoto\l"];
    Xa55fe2123677dc1f_22 -> Xa55fe2123677dc1f_59;
    Xa55fe2123677dc1f_22 [label="42 <- Adt{10} ()\l0 <- Adt{1} (mv(42))\lGoto\l"];
    Xa55fe2123677dc1f_23 -> Xa55fe2123677dc1f_24;
    Xa55fe2123677dc1f_23 [label="43 <- & (*1)[0]\l44 <- & (*1)[1..-0]\l47 <- Adt{0} ()\l34 <- Tuple (cp(43), mv(47))\lGoto\l"];
    Xa55fe2123677dc1f_24 -> Xa55fe2123677dc1f_25 [label="48"];
    Xa55fe2123677dc1f_24 [label="32 <- Use(cp(34.0))\l33 <- Use(cp(34.1))\lCall\l"];
    Xa55fe2123677dc1f_25 -> Xa55fe2123677dc1f_26 [label="1"];
    Xa55fe2123677dc1f_25 -> Xa55fe2123677dc1f_33 [label="0"];
    Xa55fe2123677dc1f_25 -> Xa55fe2123677dc1f_29 [label="other"];
    Xa55fe2123677dc1f_25 [label="50 <- Discriminant(33)\lSwitchInt mv(50)\l"];
    Xa55fe2123677dc1f_26 -> Xa55fe2123677dc1f_27 [label="53"];
    Xa55fe2123677dc1f_26 [label="51 <- Use(cp((33 as variant 1).0))\lCall\l"];
    Xa55fe2123677dc1f_27 -> Xa55fe2123677dc1f_28 [label="52"];
    Xa55fe2123677dc1f_27 [label="Call\l"];
    Xa55fe2123677dc1f_28 -> Xa55fe2123677dc1f_30 [label="0"];
    Xa55fe2123677dc1f_28 -> Xa55fe2123677dc1f_31 [label="1"];
    Xa55fe2123677dc1f_28 -> Xa55fe2123677dc1f_29 [label="other"];
    Xa55fe2123677dc1f_28 [label="54 <- Discriminant(52)\lSwitchInt mv(54)\l"];
    Xa55fe2123677dc1f_29 [label="Unreachable\l"];
    Xa55fe2123677dc1f_30 -> Xa55fe2123677dc1f_32 [label="57"];
    Xa55fe2123677dc1f_30 [label="56 <- Use(cp((52 as variant 0).0))\lCall\l"];
    Xa55fe2123677dc1f_31 -> Xa55fe2123677dc1f_59 [label="0"];
    Xa55fe2123677dc1f_31 [label="55 <- Use(mv((52 as variant 1).0))\lCall\l"];
    Xa55fe2123677dc1f_32 -> Xa55fe2123677dc1f_39 [label="49"];
    Xa55fe2123677dc1f_32 [label="Call\l"];
    Xa55fe2123677dc1f_33 -> Xa55fe2123677dc1f_34 [label="61"];
    Xa55fe2123677dc1f_33 [label="Call\l"];
    Xa55fe2123677dc1f_34 -> Xa55fe2123677dc1f_35 [label="60"];
    Xa55fe2123677dc1f_34 [label="Call\l"];
    Xa55fe2123677dc1f_35 -> Xa55fe2123677dc1f_36 [label="0"];
    Xa55fe2123677dc1f_35 -> Xa55fe2123677dc1f_37 [label="1"];
    Xa55fe2123677dc1f_35 -> Xa55fe2123677dc1f_29 [label="other"];
    Xa55fe2123677dc1f_35 [label="62 <- Discriminant(60)\lSwitchInt mv(62)\l"];
    Xa55fe2123677dc1f_36 -> Xa55fe2123677dc1f_38 [label="65"];
    Xa55fe2123677dc1f_36 [label="64 <- Use(mv((60 as variant 0).0))\l59 <- Use(mv(64))\l58 <- & 59\lCall\l"];
    Xa55fe2123677dc1f_37 -> Xa55fe2123677dc1f_59 [label="0"];
    Xa55fe2123677dc1f_37 [label="63 <- Use(mv((60 as variant 1).0))\lCall\l"];
    Xa55fe2123677dc1f_38 -> Xa55fe2123677dc1f_39 [label="49"];
    Xa55fe2123677dc1f_38 [label="Call\l"];
    Xa55fe2123677dc1f_39 -> Xa55fe2123677dc1f_40 [label="68"];
    Xa55fe2123677dc1f_39 [label="Call\l"];
    Xa55fe2123677dc1f_40 -> Xa55fe2123677dc1f_41 [label="67"];
    Xa55fe2123677dc1f_40 [label="Call\l"];
    Xa55fe2123677dc1f_41 -> Xa55fe2123677dc1f_42 [label="66"];
    Xa55fe2123677dc1f_41 [label="Call\l"];
    Xa55fe2123677dc1f_42 -> Xa55fe2123677dc1f_43 [label="0"];
    Xa55fe2123677dc1f_42 -> Xa55fe2123677dc1f_44 [label="1"];
    Xa55fe2123677dc1f_42 -> Xa55fe2123677dc1f_29 [label="other"];
    Xa55fe2123677dc1f_42 [label="69 <- Discriminant(66)\lSwitchInt mv(69)\l"];
    Xa55fe2123677dc1f_43 -> Xa55fe2123677dc1f_45 [label="73"];
    Xa55fe2123677dc1f_43 [label="71 <- Use(mv((66 as variant 0).0))\l74 <- & (*71)\lCall\l"];
    Xa55fe2123677dc1f_44 -> Xa55fe2123677dc1f_59 [label="0"];
    Xa55fe2123677dc1f_44 [label="70 <- Use(mv((66 as variant 1).0))\lCall\l"];
    Xa55fe2123677dc1f_45 -> Xa55fe2123677dc1f_46 [label="72"];
    Xa55fe2123677dc1f_45 [label="Call\l"];
    Xa55fe2123677dc1f_46 -> Xa55fe2123677dc1f_47 [label="0"];
    Xa55fe2123677dc1f_46 -> Xa55fe2123677dc1f_48 [label="1"];
    Xa55fe2123677dc1f_46 -> Xa55fe2123677dc1f_29 [label="other"];
    Xa55fe2123677dc1f_46 [label="75 <- Discriminant(72)\lSwitchInt mv(75)\l"];
    Xa55fe2123677dc1f_47 -> Xa55fe2123677dc1f_50 [label="0"];
    Xa55fe2123677dc1f_47 -> Xa55fe2123677dc1f_49 [label="other"];
    Xa55fe2123677dc1f_47 [label="77 <- Use(cp((72 as variant 0).0))\lSwitchInt cp(77)\l"];
    Xa55fe2123677dc1f_48 -> Xa55fe2123677dc1f_59 [label="0"];
    Xa55fe2123677dc1f_48 [label="76 <- Use(mv((72 as variant 1).0))\lCall\l"];
    Xa55fe2123677dc1f_49 -> Xa55fe2123677dc1f_51 [label="78"];
    Xa55fe2123677dc1f_49 [label="79 <- Adt{6} ()\lCall\l"];
    Xa55fe2123677dc1f_50 -> Xa55fe2123677dc1f_53 [label="0"];
    Xa55fe2123677dc1f_50 -> Xa55fe2123677dc1f_52 [label="other"];
    Xa55fe2123677dc1f_50 [label="80 <- Use(cp(49))\lSwitchInt mv(80)\l"];
    Xa55fe2123677dc1f_51 -> Xa55fe2123677dc1f_59;
    Xa55fe2123677dc1f_51 [label="0 <- Adt{1} (mv(78))\lGoto\l"];
    Xa55fe2123677dc1f_52 -> Xa55fe2123677dc1f_55 [label="83"];
    Xa55fe2123677dc1f_52 [label="Call\l"];
    Xa55fe2123677dc1f_53 -> Xa55fe2123677dc1f_54 [label="81"];
    Xa55fe2123677dc1f_53 [label="82 <- Adt{0} ()\lCall\l"];
    Xa55fe2123677dc1f_54 -> Xa55fe2123677dc1f_59;
    Xa55fe2123677dc1f_54 [label="0 <- Adt{1} (mv(81))\lGoto\l"];
    Xa55fe2123677dc1f_55 -> Xa55fe2123677dc1f_56 [label="84"];
    Xa55fe2123677dc1f_55 [label="Call\l"];
    Xa55fe2123677dc1f_56 -> Xa55fe2123677dc1f_57 [label="1"];
    Xa55fe2123677dc1f_56 -> Xa55fe2123677dc1f_58 [label="0"];
    Xa55fe2123677dc1f_56 -> Xa55fe2123677dc1f_29 [label="other"];
    Xa55fe2123677dc1f_56 [label="(*71).2 <- Use(cp(4))\l85 <- Discriminant(6)\lSwitchInt mv(85)\l"];
    Xa55fe2123677dc1f_57 -> Xa55fe2123677dc1f_58 [label="87"];
    Xa55fe2123677dc1f_57 [label="86 <- Use(cp((6 as variant 1).0))\lCall\l"];
    Xa55fe2123677dc1f_58 -> Xa55fe2123677dc1f_59;
    Xa55fe2123677dc1f_58 [label="0 <- Adt{0} (const ())\lGoto\l"];
    Xa55fe2123677dc1f_59 [label="Return\l"];
  }
  Xa55fe2123677dc1f_1 -> Xe2dd8d6d8ab56bef_0 [label="cp(2),const ?_usize"];
  Xa55fe2123677dc1f_2 -> X5e85acfe8a19755e_0 [label="cp(2)"];
  Xa55fe2123677dc1f_3 -> X6c086d5fab5d136b_0 [label="mv(15),const ?_usize"];
  Xa55fe2123677dc1f_4 -> Xe2dd8d6d8ab56bef_0 [label="cp(2),const ?_usize"];
  Xa55fe2123677dc1f_7 -> Xe2dd8d6d8ab56bef_0 [label="cp(2),const ?_usize"];
  Xa55fe2123677dc1f_10 -> X5e85acfe8a19755e_0 [label="cp(2)"];
  Xa55fe2123677dc1f_11 -> X6c086d5fab5d136b_0 [label="mv(26),const ?_usize"];
  Xa55fe2123677dc1f_13 -> X3e3db5977da52381_0 [label="mv(28)"];
  Xa55fe2123677dc1f_16 -> X3e3db5977da52381_0 [label="mv(31)"];
  Xa55fe2123677dc1f_24 -> X499a64bd2ee6dafa_0 [label="cp(32)"];
  Xa55fe2123677dc1f_26 -> Xfaf06a046c4d2f42_0 [label="cp(51)"];
  Xa55fe2123677dc1f_27 -> X2b904375dbbb0af7_0 [label="mv(53)"];
  Xa55fe2123677dc1f_30 -> X91937cb3b305cbc5_0 [label="cp(32)"];
  Xa55fe2123677dc1f_31 -> X5adbeff4b5cb293e_0 [label="mv(55)"];
  Xa55fe2123677dc1f_32 -> X6d20fd147c3a589e_0 [label="cp(56),mv(57),cp(48)"];
  Xa55fe2123677dc1f_33 -> X5c48a4d6939009d7_0 [label=""];
  Xa55fe2123677dc1f_34 -> Xf4d730ffcb43b968_0 [label="mv(61)"];
  Xa55fe2123677dc1f_36 -> X91937cb3b305cbc5_0 [label="cp(32)"];
  Xa55fe2123677dc1f_37 -> X5adbeff4b5cb293e_0 [label="mv(63)"];
  Xa55fe2123677dc1f_38 -> X6d20fd147c3a589e_0 [label="mv(58),mv(65),cp(48)"];
  Xa55fe2123677dc1f_39 -> X5492146546091aad_0 [label="cp(32)"];
  Xa55fe2123677dc1f_40 -> X8030af829a1040e9_0 [label="cp(68)"];
  Xa55fe2123677dc1f_41 -> Xfdd8ae4a78e336d8_0 [label="mv(67)"];
  Xa55fe2123677dc1f_43 -> Xfda868f8ceb54b0b_0 [label="mv(74)"];
  Xa55fe2123677dc1f_44 -> X5adbeff4b5cb293e_0 [label="mv(70)"];
  Xa55fe2123677dc1f_45 -> X94faba497d3a8d24_0 [label="mv(73)"];
  Xa55fe2123677dc1f_48 -> X5adbeff4b5cb293e_0 [label="mv(76)"];
  Xa55fe2123677dc1f_49 -> X3e3db5977da52381_0 [label="mv(79)"];
  Xa55fe2123677dc1f_52 -> X8830bb758d0fd5e0_0 [label="cp(71)"];
  Xa55fe2123677dc1f_53 -> X3e3db5977da52381_0 [label="mv(82)"];
  Xa55fe2123677dc1f_55 -> X6c61caa643ed3e47_0 [label="cp(71),cp(5)"];
  Xa55fe2123677dc1f_57 -> X1c355a9eb7d94e40_0 [label="cp(71),cp(86)"];
  subgraph cluster_48 {
    label="<&&[u8; \n32] \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_49 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&&[u8; 32]\l2 = &mut core::fmt::Formatter<'_>\l3 = &&[u8; 32]\l", style="filled", color=palegreen3];
    X6745340422ad6da5_0 -> X6745340422ad6da5_1 [label="0"];
    X6745340422ad6da5_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    X6745340422ad6da5_1 [label="Return\l"];
  }
  X6745340422ad6da5_0 -> Xfb7f17e81450588f_0 [label="mv(3),mv(2)"];
  subgraph cluster_50 {
    label="<&() \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_51 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&()\l2 = &mut core::fmt::Formatter<'_>\l3 = &()\l", style="filled", color=palegreen3];
    Xb020e88d82f0081_0 -> Xb020e88d82f0081_1 [label="0"];
    Xb020e88d82f0081_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    Xb020e88d82f0081_1 [label="Return\l"];
  }
  Xb020e88d82f0081_0 -> X9b9792a9c55c7503_0 [label="mv(3),mv(2)"];
  subgraph cluster_52 {
    label="<&core::result::Result<()\n, \npinocchio::program_error:\n:ProgramError> \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_53 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&core::result::Result<(), pinocchio::program_error::ProgramError>\l2 = &mut core::fmt::Formatter<'_>\l3 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    Xc109fb84c69e6807_0 -> Xc109fb84c69e6807_1 [label="0"];
    Xc109fb84c69e6807_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    Xc109fb84c69e6807_1 [label="Return\l"];
  }
  Xc109fb84c69e6807_0 -> X43f71b6e2d20bf4b_0 [label="mv(3),mv(2)"];
  subgraph cluster_54 {
    label="<&u8 \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_55 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&u8\l2 = &mut core::fmt::Formatter<'_>\l3 = &u8\l", style="filled", color=palegreen3];
    Xae64354fed2b8158_0 -> Xae64354fed2b8158_1 [label="0"];
    Xae64354fed2b8158_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    Xae64354fed2b8158_1 [label="Return\l"];
  }
  Xae64354fed2b8158_0 -> X1ec432a527e645de_0 [label="mv(3),mv(2)"];
  subgraph cluster_56 {
    label="<&u32 \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_57 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&u32\l2 = &mut core::fmt::Formatter<'_>\l3 = &u32\l", style="filled", color=palegreen3];
    Xd05e08a93c55e760_0 -> Xd05e08a93c55e760_1 [label="0"];
    Xd05e08a93c55e760_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    Xd05e08a93c55e760_1 [label="Return\l"];
  }
  Xd05e08a93c55e760_0 -> X86616ecd3718916b_0 [label="mv(3),mv(2)"];
  subgraph cluster_58 {
    label="<&&[u8] \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_59 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&&[u8]\l2 = &mut core::fmt::Formatter<'_>\l3 = &&[u8]\l", style="filled", color=palegreen3];
    X5d4e62eee72b0559_0 -> X5d4e62eee72b0559_1 [label="0"];
    X5d4e62eee72b0559_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    X5d4e62eee72b0559_1 [label="Return\l"];
  }
  X5d4e62eee72b0559_0 -> X55c945c23cd8ee38_0 [label="mv(3),mv(2)"];
  subgraph cluster_60 {
    label="<&pinocchio::program_erro\nr::ProgramError \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_61 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&pinocchio::program_error::ProgramError\l2 = &mut core::fmt::Formatter<'_>\l3 = &pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    Xb6b7c9dfdacecaf3_0 -> Xb6b7c9dfdacecaf3_1 [label="0"];
    Xb6b7c9dfdacecaf3_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    Xb6b7c9dfdacecaf3_1 [label="Return\l"];
  }
  Xb6b7c9dfdacecaf3_0 -> X4d96ea5120bb9c65_0 [label="mv(3),mv(2)"];
  subgraph cluster_62 {
    label="<&[u8] \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_63 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&[u8]\l2 = &mut core::fmt::Formatter<'_>\l3 = &[u8]\l", style="filled", color=palegreen3];
    X55c945c23cd8ee38_0 -> X55c945c23cd8ee38_1 [label="0"];
    X55c945c23cd8ee38_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    X55c945c23cd8ee38_1 [label="Return\l"];
  }
  X55c945c23cd8ee38_0 -> X3deedd080d0bf2c6_0 [label="mv(3),mv(2)"];
  subgraph cluster_64 {
    label="<&[u8; \n32] \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_65 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&[u8; 32]\l2 = &mut core::fmt::Formatter<'_>\l3 = &[u8; 32]\l", style="filled", color=palegreen3];
    Xfb7f17e81450588f_0 -> Xfb7f17e81450588f_1 [label="0"];
    Xfb7f17e81450588f_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    Xfb7f17e81450588f_1 [label="Return\l"];
  }
  Xfb7f17e81450588f_0 -> X20fa37143c5ec43f_0 [label="mv(3),mv(2)"];
  subgraph cluster_66 {
    label="<() \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_67 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &()\l2 = &mut core::fmt::Formatter<'_>\l", style="filled", color=palegreen3];
    X9b9792a9c55c7503_0 -> X9b9792a9c55c7503_1 [label="0"];
    X9b9792a9c55c7503_0 [label="Call\l"];
    X9b9792a9c55c7503_1 [label="Return\l"];
  }
  X9b9792a9c55c7503_0 -> X5b44578fd65a3909_0 [label="mv(2),const &str"];
  subgraph cluster_68 {
    label="<[u8] \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_69 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &[u8]\l2 = &mut core::fmt::Formatter<'_>\l3 = &mut core::fmt::DebugList<'_, '_>\l4 = &mut core::fmt::DebugList<'_, '_>\l5 = core::fmt::DebugList<'_, '_>\l6 = core::slice::Iter<'_, u8>\l7 = usize\l8 = core::ptr::NonNull<u8>\l9 = core::ptr::NonNull<[u8]>\l10 = *const u8\l11 = *mut u8\l12 = *mut u8\l13 = *const u8\l14 = *const [u8]\l15 = *const u8\l", style="filled", color=palegreen3];
    X3deedd080d0bf2c6_0 -> X3deedd080d0bf2c6_1 [label="5"];
    X3deedd080d0bf2c6_0 [label="Storage Live _4\lStorage Live _5\lCall\l"];
    X3deedd080d0bf2c6_1 -> X3deedd080d0bf2c6_5 [label="0"];
    X3deedd080d0bf2c6_1 -> X3deedd080d0bf2c6_4 [label="other"];
    X3deedd080d0bf2c6_1 [label="4 <- &mut 5\lStorage Live _6\lStorage Live _7\lStorage Live _8\lStorage Live _14\lStorage Live _15\l7 <- PtrMetadata(cp(1))\lStorage Live _9\l14 <- &raw (*1)\l9 <- Adt{0} (cp(14))\l15 <- Cast-PtrToPtr cp(14)\l8 <- Adt{0} (cp(15))\lStorage Dead _9\lStorage Live _10\lSwitchInt const bool\l"];
    X3deedd080d0bf2c6_2 -> X3deedd080d0bf2c6_3 [label="0"];
    X3deedd080d0bf2c6_2 [label="Storage Dead _6\lStorage Dead _4\lCall\l"];
    X3deedd080d0bf2c6_3 [label="Storage Dead _5\lReturn\l"];
    X3deedd080d0bf2c6_4 -> X3deedd080d0bf2c6_6;
    X3deedd080d0bf2c6_4 [label="10 <- Cast-Transmute cp(7)\lGoto\l"];
    X3deedd080d0bf2c6_5 -> X3deedd080d0bf2c6_6;
    X3deedd080d0bf2c6_5 [label="Storage Live _11\lStorage Live _12\l12 <- Cast-PtrToPtr cp(14)\l11 <- Offset(cp(12), cp(7))\lStorage Dead _12\l10 <- Cast-PtrToPtr mv(11)\lStorage Dead _11\lGoto\l"];
    X3deedd080d0bf2c6_6 -> X3deedd080d0bf2c6_2 [label="3"];
    X3deedd080d0bf2c6_6 [label="Storage Live _13\l13 <- Use(cp(10))\l6 <- Adt{0} (cp(8), mv(13), const core::marker::PhantomData<&u8>)\lStorage Dead _13\lStorage Dead _10\lStorage Dead _15\lStorage Dead _14\lStorage Dead _8\lStorage Dead _7\lCall\l"];
  }
  X3deedd080d0bf2c6_0 -> X781918ccf9219bf_0 [label="mv(2)"];
  X3deedd080d0bf2c6_2 -> Xee56336712b487c9_0 [label="mv(3)"];
  X3deedd080d0bf2c6_6 -> Xf7e194bc2e560bae_0 [label="mv(4),mv(6)"];
  subgraph cluster_70 {
    label="<usize \nas \ncore::iter::Step>::forwar\nd_unchecked";
    style="filled";
    color=lightgray;
    node_71 [label="LOCALS\l0 = usize\l1 = usize\l2 = usize\l3 = bool\l4 = ()\l", style="filled", color=palegreen3];
    Xf98c0f07694c6176_0 -> Xf98c0f07694c6176_2 [label="0"];
    Xf98c0f07694c6176_0 -> Xf98c0f07694c6176_1 [label="other"];
    Xf98c0f07694c6176_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    Xf98c0f07694c6176_1 -> Xf98c0f07694c6176_2 [label="4"];
    Xf98c0f07694c6176_1 [label="Call\l"];
    Xf98c0f07694c6176_2 [label="Storage Dead _3\l0 <- AddUnchecked(cp(1), cp(2))\lReturn\l"];
  }
  Xf98c0f07694c6176_1 -> X6d16759fb07448a4_0 [label="cp(1),cp(2)"];
  subgraph cluster_72 {
    label="<usize \nas \ncore::cmp::Ord>::min";
    style="filled";
    color=lightgray;
    node_73 [label="LOCALS\l0 = usize\l1 = usize\l2 = usize\l", style="filled", color=palegreen3];
    X23a18a7f1b1af606_0 -> X23a18a7f1b1af606_1 [label="0"];
    X23a18a7f1b1af606_0 [label="Call\l"];
    X23a18a7f1b1af606_1 [label="Return\l"];
  }
  X23a18a7f1b1af606_0 -> X417bb8c927ddb4b5_0 [label="mv(1),mv(2),const for<'a, 'b> fn(&'a usize, &'b usize) -> core::cmp::Ordering {<usize as core::cmp::Ord>::cmp}"];
  subgraph cluster_74 {
    label="core::cmp::min::<usize>";
    style="filled";
    color=lightgray;
    node_75 [label="LOCALS\l0 = usize\l1 = usize\l2 = usize\l", style="filled", color=palegreen3];
    Xd4c8399dbe49afd_0 -> Xd4c8399dbe49afd_1 [label="0"];
    Xd4c8399dbe49afd_0 [label="Call\l"];
    Xd4c8399dbe49afd_1 [label="Return\l"];
  }
  Xd4c8399dbe49afd_0 -> X23a18a7f1b1af606_0 [label="mv(1),mv(2)"];
  subgraph cluster_76 {
    label="core::cmp::impls::<impl \ncore::cmp::Ord \nfor \nusize>::cmp";
    style="filled";
    color=lightgray;
    node_77 [label="LOCALS\l0 = core::cmp::Ordering\l1 = &usize\l2 = &usize\l3 = usize\l4 = usize\l", style="filled", color=palegreen3];
    X32480caf21985110_0 [label="Storage Live _3\l3 <- Use(cp((*1)))\lStorage Live _4\l4 <- Use(cp((*2)))\l0 <- Cmp(mv(3), mv(4))\lStorage Dead _4\lStorage Dead _3\lReturn\l"];
  }
  subgraph cluster_78 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialEq \nfor \nu32>::eq";
    style="filled";
    color=lightgray;
    node_79 [label="LOCALS\l0 = bool\l1 = &u32\l2 = &u32\l3 = u32\l4 = u32\l", style="filled", color=palegreen3];
    Xd0d2a70fc3d265c5_0 [label="Storage Live _3\l3 <- Use(cp((*1)))\lStorage Live _4\l4 <- Use(cp((*2)))\l0 <- Eq(mv(3), mv(4))\lStorage Dead _4\lStorage Dead _3\lReturn\l"];
  }
  subgraph cluster_80 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialOrd \nfor \nusize>::lt";
    style="filled";
    color=lightgray;
    node_81 [label="LOCALS\l0 = bool\l1 = &usize\l2 = &usize\l3 = usize\l4 = usize\l", style="filled", color=palegreen3];
    Xb4d458fe7af2393d_0 [label="Storage Live _3\l3 <- Use(cp((*1)))\lStorage Live _4\l4 <- Use(cp((*2)))\l0 <- Lt(mv(3), mv(4))\lStorage Dead _4\lStorage Dead _3\lReturn\l"];
  }
  subgraph cluster_82 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialEq \nfor \n()>::eq";
    style="filled";
    color=lightgray;
    node_83 [label="LOCALS\l0 = bool\l1 = &()\l2 = &()\l", style="filled", color=palegreen3];
    Xd7393c030c57f210_0 [label="0 <- Use(const bool)\lReturn\l"];
  }
  subgraph cluster_84 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialEq \nfor \n&u32>::eq";
    style="filled";
    color=lightgray;
    node_85 [label="LOCALS\l0 = bool\l1 = &&u32\l2 = &&u32\l3 = &u32\l4 = &u32\l", style="filled", color=palegreen3];
    X1db5e3317e89911b_0 -> X1db5e3317e89911b_1 [label="0"];
    X1db5e3317e89911b_0 [label="3 <- Use(cp((*1)))\l4 <- Use(cp((*2)))\lCall\l"];
    X1db5e3317e89911b_1 [label="Return\l"];
  }
  X1db5e3317e89911b_0 -> Xd0d2a70fc3d265c5_0 [label="mv(3),mv(4)"];
  subgraph cluster_86 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialEq<&[u8\n]> \nfor \n&[u8; \n32]>::eq";
    style="filled";
    color=lightgray;
    node_87 [label="LOCALS\l0 = bool\l1 = &&[u8; 32]\l2 = &&[u8]\l3 = &[u8; 32]\l4 = &[u8]\l", style="filled", color=palegreen3];
    Xd2dcda031aebbecf_0 -> Xd2dcda031aebbecf_1 [label="0"];
    Xd2dcda031aebbecf_0 [label="3 <- Use(cp((*1)))\l4 <- Use(cp((*2)))\lCall\l"];
    Xd2dcda031aebbecf_1 [label="Return\l"];
  }
  Xd2dcda031aebbecf_0 -> Xa2380947328c262a_0 [label="mv(3),mv(4)"];
  subgraph cluster_88 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialEq \nfor \n&[u8; \n32]>::ne";
    style="filled";
    color=lightgray;
    node_89 [label="LOCALS\l0 = bool\l1 = &&[u8; 32]\l2 = &&[u8; 32]\l3 = &[u8; 32]\l4 = &[u8; 32]\l", style="filled", color=palegreen3];
    X5d6c1de00eb04104_0 -> X5d6c1de00eb04104_1 [label="0"];
    X5d6c1de00eb04104_0 [label="3 <- Use(cp((*1)))\l4 <- Use(cp((*2)))\lCall\l"];
    X5d6c1de00eb04104_1 [label="Return\l"];
  }
  X5d6c1de00eb04104_0 -> X6dec8e35a57ec51c_0 [label="mv(3),mv(4)"];
  subgraph cluster_90 {
    label="core::cmp::min_by::<usize\n, \nfor<'a, \n'b> \nfn(&'a \nusize, \n&'b \nusize) \n-> \ncore::cmp::Ordering \n{<usize \nas \ncore::cmp::Ord>::cmp}>";
    style="filled";
    color=lightgray;
    node_91 [label="LOCALS\l0 = usize\l1 = usize\l2 = usize\l3 = for<'a, 'b> fn(&'a usize, &'b usize) -> core::cmp::Ordering {<usize as core::cmp::Ord>::cmp}\l4 = core::cmp::Ordering\l5 = (&usize, &usize)\l6 = &usize\l7 = &usize\l8 = i8\l9 = bool\l10 = bool\l", style="filled", color=palegreen3];
    X417bb8c927ddb4b5_0 -> X417bb8c927ddb4b5_7 [label="Cleanup"];
    X417bb8c927ddb4b5_0 -> X417bb8c927ddb4b5_1 [label="4"];
    X417bb8c927ddb4b5_0 [label="10 <- Use(const bool)\l9 <- Use(const bool)\lStorage Live _4\lStorage Live _5\l6 <- & 1\l7 <- & 2\l5 <- Tuple (cp(6), cp(7))\lCall\l"];
    X417bb8c927ddb4b5_1 -> X417bb8c927ddb4b5_4 [label="255"];
    X417bb8c927ddb4b5_1 -> X417bb8c927ddb4b5_4 [label="0"];
    X417bb8c927ddb4b5_1 -> X417bb8c927ddb4b5_3 [label="1"];
    X417bb8c927ddb4b5_1 -> X417bb8c927ddb4b5_2 [label="other"];
    X417bb8c927ddb4b5_1 [label="Storage Dead _5\l8 <- Discriminant(4)\lSwitchInt mv(8)\l"];
    X417bb8c927ddb4b5_2 [label="Unreachable\l"];
    X417bb8c927ddb4b5_3 -> X417bb8c927ddb4b5_5;
    X417bb8c927ddb4b5_3 [label="0 <- Use(mv(2))\lStorage Dead _4\lGoto\l"];
    X417bb8c927ddb4b5_4 -> X417bb8c927ddb4b5_5 [label="0"];
    X417bb8c927ddb4b5_4 -> X417bb8c927ddb4b5_9 [label="other"];
    X417bb8c927ddb4b5_4 [label="10 <- Use(const bool)\l0 <- Use(mv(1))\lStorage Dead _4\lSwitchInt cp(9)\l"];
    X417bb8c927ddb4b5_5 -> X417bb8c927ddb4b5_6 [label="0"];
    X417bb8c927ddb4b5_5 -> X417bb8c927ddb4b5_10 [label="other"];
    X417bb8c927ddb4b5_5 [label="SwitchInt cp(10)\l"];
    X417bb8c927ddb4b5_6 [label="Return\l"];
    X417bb8c927ddb4b5_7 -> X417bb8c927ddb4b5_12;
    X417bb8c927ddb4b5_7 [label="Drop 2\l"];
    X417bb8c927ddb4b5_8 [label="Resume\l"];
    X417bb8c927ddb4b5_9 -> X417bb8c927ddb4b5_12 [label="Cleanup"];
    X417bb8c927ddb4b5_9 -> X417bb8c927ddb4b5_6;
    X417bb8c927ddb4b5_9 [label="Drop 2\l"];
    X417bb8c927ddb4b5_10 -> X417bb8c927ddb4b5_6;
    X417bb8c927ddb4b5_10 [label="Drop 1\l"];
    X417bb8c927ddb4b5_11 -> X417bb8c927ddb4b5_8;
    X417bb8c927ddb4b5_11 [label="Drop 1\l"];
    X417bb8c927ddb4b5_12 -> X417bb8c927ddb4b5_8 [label="0"];
    X417bb8c927ddb4b5_12 -> X417bb8c927ddb4b5_11 [label="other"];
    X417bb8c927ddb4b5_12 [label="SwitchInt cp(10)\l"];
  }
  X417bb8c927ddb4b5_0 -> Xa7d822d8acd5c8ee_0 [label="mv(3),mv(5)"];
  subgraph cluster_92 {
    label="core::f64::<impl \nf64>::to_le_bytes";
    style="filled";
    color=lightgray;
    node_93 [label="LOCALS\l0 = [u8; 8]\l1 = f64\l2 = u64\l", style="filled", color=palegreen3];
    Xb7233195f5e48779_0 [label="Storage Live _2\l2 <- Cast-Transmute cp(1)\l0 <- Cast-Transmute cp(2)\lStorage Dead _2\lReturn\l"];
  }
  subgraph cluster_94 {
    label="core::fmt::num::<impl \ncore::fmt::Debug \nfor \nu8>::fmt";
    style="filled";
    color=lightgray;
    node_95 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &u8\l2 = &mut core::fmt::Formatter<'_>\l3 = u32\l4 = u32\l5 = u32\l6 = u32\l", style="filled", color=palegreen3];
    X1ec432a527e645de_0 -> X1ec432a527e645de_2 [label="0"];
    X1ec432a527e645de_0 -> X1ec432a527e645de_1 [label="other"];
    X1ec432a527e645de_0 [label="Storage Live _3\lStorage Live _4\l4 <- Use(cp((*2).0))\l3 <- BitAnd(mv(4), const ?_u32)\lStorage Dead _4\lSwitchInt mv(3)\l"];
    X1ec432a527e645de_1 -> X1ec432a527e645de_6 [label="0"];
    X1ec432a527e645de_1 [label="Storage Dead _3\lCall\l"];
    X1ec432a527e645de_2 -> X1ec432a527e645de_4 [label="0"];
    X1ec432a527e645de_2 -> X1ec432a527e645de_3 [label="other"];
    X1ec432a527e645de_2 [label="Storage Dead _3\lStorage Live _5\lStorage Live _6\l6 <- Use(cp((*2).0))\l5 <- BitAnd(mv(6), const ?_u32)\lStorage Dead _6\lSwitchInt mv(5)\l"];
    X1ec432a527e645de_3 -> X1ec432a527e645de_5 [label="0"];
    X1ec432a527e645de_3 [label="Storage Dead _5\lCall\l"];
    X1ec432a527e645de_4 -> X1ec432a527e645de_5 [label="0"];
    X1ec432a527e645de_4 [label="Storage Dead _5\lCall\l"];
    X1ec432a527e645de_5 -> X1ec432a527e645de_6;
    X1ec432a527e645de_5 [label="Goto\l"];
    X1ec432a527e645de_6 [label="Return\l"];
  }
  X1ec432a527e645de_1 -> Xc0df9b1997ac90da_0 [label="mv(1),mv(2)"];
  X1ec432a527e645de_3 -> Xb4c60c8acc2aa4f0_0 [label="mv(1),mv(2)"];
  X1ec432a527e645de_4 -> Xe9aeaaaf212ff5cc_0 [label="mv(1),mv(2)"];
  subgraph cluster_96 {
    label="core::fmt::num::<impl \ncore::fmt::Debug \nfor \nu32>::fmt";
    style="filled";
    color=lightgray;
    node_97 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &u32\l2 = &mut core::fmt::Formatter<'_>\l3 = u32\l4 = u32\l5 = u32\l6 = u32\l", style="filled", color=palegreen3];
    X86616ecd3718916b_0 -> X86616ecd3718916b_2 [label="0"];
    X86616ecd3718916b_0 -> X86616ecd3718916b_1 [label="other"];
    X86616ecd3718916b_0 [label="Storage Live _3\lStorage Live _4\l4 <- Use(cp((*2).0))\l3 <- BitAnd(mv(4), const ?_u32)\lStorage Dead _4\lSwitchInt mv(3)\l"];
    X86616ecd3718916b_1 -> X86616ecd3718916b_6 [label="0"];
    X86616ecd3718916b_1 [label="Storage Dead _3\lCall\l"];
    X86616ecd3718916b_2 -> X86616ecd3718916b_4 [label="0"];
    X86616ecd3718916b_2 -> X86616ecd3718916b_3 [label="other"];
    X86616ecd3718916b_2 [label="Storage Dead _3\lStorage Live _5\lStorage Live _6\l6 <- Use(cp((*2).0))\l5 <- BitAnd(mv(6), const ?_u32)\lStorage Dead _6\lSwitchInt mv(5)\l"];
    X86616ecd3718916b_3 -> X86616ecd3718916b_5 [label="0"];
    X86616ecd3718916b_3 [label="Storage Dead _5\lCall\l"];
    X86616ecd3718916b_4 -> X86616ecd3718916b_5 [label="0"];
    X86616ecd3718916b_4 [label="Storage Dead _5\lCall\l"];
    X86616ecd3718916b_5 -> X86616ecd3718916b_6;
    X86616ecd3718916b_5 [label="Goto\l"];
    X86616ecd3718916b_6 [label="Return\l"];
  }
  X86616ecd3718916b_1 -> X1d0677a8f15bd47_0 [label="mv(1),mv(2)"];
  X86616ecd3718916b_3 -> Xca95a9d6f7061805_0 [label="mv(1),mv(2)"];
  X86616ecd3718916b_4 -> X67d151235d77b301_0 [label="mv(1),mv(2)"];
  subgraph cluster_98 {
    label="core::fmt::DebugList::<'_\n, \n'_>::entries::<&u8, \ncore::slice::Iter<'_, \nu8>>";
    style="filled";
    color=lightgray;
    node_99 [label="LOCALS\l0 = &mut core::fmt::DebugList<'_, '_>\l1 = &mut core::fmt::DebugList<'_, '_>\l2 = core::slice::Iter<'_, u8>\l3 = core::slice::Iter<'_, u8>\l4 = core::slice::Iter<'_, u8>\l5 = core::option::Option<&u8>\l6 = &mut core::slice::Iter<'_, u8>\l7 = isize\l8 = &u8\l9 = &mut core::fmt::DebugList<'_, '_>\l10 = &dyn core::fmt::Debug\l11 = &&u8\l", style="filled", color=palegreen3];
    Xf7e194bc2e560bae_0 -> Xf7e194bc2e560bae_1 [label="3"];
    Xf7e194bc2e560bae_0 [label="Storage Live _3\lCall\l"];
    Xf7e194bc2e560bae_1 -> Xf7e194bc2e560bae_2;
    Xf7e194bc2e560bae_1 [label="Storage Live _4\l4 <- Use(mv(3))\lGoto\l"];
    Xf7e194bc2e560bae_2 -> Xf7e194bc2e560bae_11 [label="Cleanup"];
    Xf7e194bc2e560bae_2 -> Xf7e194bc2e560bae_3 [label="5"];
    Xf7e194bc2e560bae_2 [label="Storage Live _5\l6 <- &mut 4\lCall\l"];
    Xf7e194bc2e560bae_3 -> Xf7e194bc2e560bae_6 [label="0"];
    Xf7e194bc2e560bae_3 -> Xf7e194bc2e560bae_5 [label="1"];
    Xf7e194bc2e560bae_3 -> Xf7e194bc2e560bae_4 [label="other"];
    Xf7e194bc2e560bae_3 [label="7 <- Discriminant(5)\lSwitchInt mv(7)\l"];
    Xf7e194bc2e560bae_4 [label="Unreachable\l"];
    Xf7e194bc2e560bae_5 -> Xf7e194bc2e560bae_10 [label="Cleanup"];
    Xf7e194bc2e560bae_5 -> Xf7e194bc2e560bae_7 [label="9"];
    Xf7e194bc2e560bae_5 [label="Storage Live _8\l8 <- Use(mv((5 as variant 1).0))\lStorage Live _9\lStorage Live _10\l11 <- & 8\l10 <- Cast-PointerCoercion(Unsize) cp(11)\lCall\l"];
    Xf7e194bc2e560bae_6 -> Xf7e194bc2e560bae_9;
    Xf7e194bc2e560bae_6 [label="Storage Dead _5\lDrop 4\l"];
    Xf7e194bc2e560bae_7 -> Xf7e194bc2e560bae_11 [label="Cleanup"];
    Xf7e194bc2e560bae_7 -> Xf7e194bc2e560bae_8;
    Xf7e194bc2e560bae_7 [label="Storage Dead _10\lStorage Dead _9\lDrop 8\l"];
    Xf7e194bc2e560bae_8 -> Xf7e194bc2e560bae_2;
    Xf7e194bc2e560bae_8 [label="Storage Dead _8\lStorage Dead _5\lGoto\l"];
    Xf7e194bc2e560bae_9 [label="Storage Dead _4\lStorage Dead _3\l0 <- Use(cp(1))\lReturn\l"];
    Xf7e194bc2e560bae_10 -> Xf7e194bc2e560bae_11;
    Xf7e194bc2e560bae_10 [label="Drop 8\l"];
    Xf7e194bc2e560bae_11 -> Xf7e194bc2e560bae_12;
    Xf7e194bc2e560bae_11 [label="Drop 4\l"];
    Xf7e194bc2e560bae_12 [label="Resume\l"];
  }
  Xf7e194bc2e560bae_0 -> X9125598ebc1c3df8_0 [label="mv(2)"];
  Xf7e194bc2e560bae_2 -> X5cf7402e6efa4d0b_0 [label="mv(6)"];
  Xf7e194bc2e560bae_5 -> X6938f74b16e4abe6_0 [label="cp(1),mv(10)"];
  subgraph cluster_100 {
    label="core::mem::MaybeUninit::<\npinocchio::account_info::\nAccountInfo>::assume_init\n_ref";
    style="filled";
    color=lightgray;
    node_101 [label="LOCALS\l0 = &pinocchio::account_info::AccountInfo\l1 = &core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l2 = ()\l3 = *const pinocchio::account_info::AccountInfo\l4 = *const core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l", style="filled", color=palegreen3];
    Xa243b99d87ed4046_0 -> Xa243b99d87ed4046_1 [label="2"];
    Xa243b99d87ed4046_0 [label="Call\l"];
    Xa243b99d87ed4046_1 [label="Storage Live _3\lStorage Live _4\l4 <- &raw (*1)\l3 <- Cast-PtrToPtr cp(4)\lStorage Dead _4\l0 <- & (*3)\lStorage Dead _3\lReturn\l"];
  }
  Xa243b99d87ed4046_0 -> X83c8e82412404978_0 [label=""];
  subgraph cluster_102 {
    label="core::mem::MaybeUninit::<\npinocchio::account_info::\nAccountInfo>::write";
    style="filled";
    color=lightgray;
    node_103 [label="LOCALS\l0 = &mut pinocchio::account_info::AccountInfo\l1 = &mut core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l2 = pinocchio::account_info::AccountInfo\l3 = core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l4 = core::mem::ManuallyDrop<pinocchio::account_info::AccountInfo>\l5 = ()\l6 = *mut pinocchio::account_info::AccountInfo\l7 = *mut core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l", style="filled", color=palegreen3];
    X3e61e2a565de7318_0 -> X3e61e2a565de7318_1 [label="5"];
    X3e61e2a565de7318_0 [label="Storage Live _3\lStorage Live _4\l4 <- Adt{0} (cp(2))\l3 <- Adt{0} (mv(4))\lStorage Dead _4\l(*1) <- Use(mv(3))\lStorage Dead _3\lCall\l"];
    X3e61e2a565de7318_1 [label="Storage Live _6\lStorage Live _7\l7 <- &raw mut (*1)\l6 <- Cast-PtrToPtr cp(7)\lStorage Dead _7\l0 <- &mut (*6)\lStorage Dead _6\lReturn\l"];
  }
  X3e61e2a565de7318_0 -> X83c8e82412404978_0 [label=""];
  subgraph cluster_104 {
    label="core::mem::size_of::<u64>";
    style="filled";
    color=lightgray;
    node_105 [label="LOCALS\l0 = usize\l", style="filled", color=palegreen3];
    Xc400e100fe1b1e46_0 [label="0 <- SizeOf :: u64\lReturn\l"];
  }
  subgraph cluster_106 {
    label="core::mem::size_of::<pino\ncchio::account_info::Acco\nunt>";
    style="filled";
    color=lightgray;
    node_107 [label="LOCALS\l0 = usize\l", style="filled", color=palegreen3];
    Xdcc6cca97078e0a0_0 [label="0 <- SizeOf :: pinocchio::account_info::Account\lReturn\l"];
  }
  subgraph cluster_108 {
    label="core::num::<impl \nu64>::from_le_bytes";
    style="filled";
    color=lightgray;
    node_109 [label="LOCALS\l0 = u64\l1 = [u8; 8]\l", style="filled", color=palegreen3];
    X4b040c9530995baf_0 [label="0 <- Cast-Transmute cp(1)\lReturn\l"];
  }
  subgraph cluster_110 {
    label="core::num::<impl \nusize>::unchecked_add::pr\necondition_check";
    style="filled";
    color=lightgray;
    node_111 [label="LOCALS\l0 = ()\l1 = usize\l2 = usize\l3 = !\l4 = u64\l5 = bool\l6 = (u64, bool)\l7 = u64\l8 = u64\l", style="filled", color=palegreen3];
    X6d16759fb07448a4_0 -> X6d16759fb07448a4_2 [label="0"];
    X6d16759fb07448a4_0 -> X6d16759fb07448a4_1 [label="other"];
    X6d16759fb07448a4_0 [label="Storage Live _4\lStorage Live _6\lStorage Live _7\l7 <- Cast-IntToInt cp(1)\lStorage Live _8\l8 <- Cast-IntToInt cp(2)\l6 <- chkd-Add(mv(7), mv(8))\lStorage Dead _8\lStorage Dead _7\l4 <- Use(cp(6.0))\l5 <- Use(cp(6.1))\lStorage Dead _6\lStorage Dead _4\lSwitchInt cp(5)\l"];
    X6d16759fb07448a4_1 [label="Call\l"];
    X6d16759fb07448a4_2 [label="Return\l"];
  }
  X6d16759fb07448a4_1 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_112 {
    label="<for<'a, \n'b> \nfn(&'a \nusize, \n&'b \nusize) \n-> \ncore::cmp::Ordering \n{<usize \nas \ncore::cmp::Ord>::cmp} \nas \ncore::ops::FnOnce<(&usize\n, \n&usize)>>::call_once";
    style="filled";
    color=lightgray;
    node_113 [label="LOCALS\l0 = core::cmp::Ordering\l1 = for<'a, 'b> fn(&'a usize, &'b usize) -> core::cmp::Ordering {<usize as core::cmp::Ord>::cmp}\l2 = (&usize, &usize)\l", style="filled", color=palegreen3];
    Xa7d822d8acd5c8ee_0 -> Xa7d822d8acd5c8ee_1 [label="0"];
    Xa7d822d8acd5c8ee_0 [label="Call\l"];
    Xa7d822d8acd5c8ee_1 [label="Return\l"];
  }
  Xa7d822d8acd5c8ee_0 -> Xa7d822d8acd5c8ee_0: 1 [label="mv(2.0),mv(2.1)"];
  subgraph cluster_114 {
    label="<for<'a> \nfn(&'a \npinocchio::program_error:\n:ProgramError) \n{entrypoint::log_error} \nas \ncore::ops::FnOnce<(&pinoc\nchio::program_error::Prog\nramError,)>>::call_once";
    style="filled";
    color=lightgray;
    node_115 [label="LOCALS\l0 = ()\l1 = for<'a> fn(&'a pinocchio::program_error::ProgramError) {entrypoint::log_error}\l2 = (&pinocchio::program_error::ProgramError,)\l", style="filled", color=palegreen3];
    Xf950bf27d0cf5c6c_0 -> Xf950bf27d0cf5c6c_1 [label="0"];
    Xf950bf27d0cf5c6c_0 [label="Call\l"];
    Xf950bf27d0cf5c6c_1 [label="Return\l"];
  }
  Xf950bf27d0cf5c6c_0 -> Xf950bf27d0cf5c6c_0: 1 [label="mv(2.0)"];
  subgraph cluster_116 {
    label="core::ptr::drop_in_place:\n:<&core::result::Result<(\n), \npinocchio::program_error:\n:ProgramError>>";
    style="filled";
    color=lightgray;
    node_117 [label="LOCALS\l0 = ()\l1 = *mut &core::result::Result<(), pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    X6d6f60a1525fc0a8_0 [label="Return\l"];
  }
  subgraph cluster_118 {
    label="core::ptr::align_offset::\n<u8>";
    style="filled";
    color=lightgray;
    node_119 [label="LOCALS\l0 = usize\l1 = *const u8\l2 = usize\l3 = usize\l4 = usize\l5 = usize\l6 = usize\l7 = usize\l8 = usize\l9 = usize\l10 = usize\l11 = usize\l12 = bool\l13 = usize\l14 = u32\l15 = u32\l16 = u32\l17 = bool\l18 = usize\l19 = u32\l20 = usize\l21 = usize\l22 = usize\l23 = u32\l24 = usize\l25 = usize\l26 = usize\l27 = u32\l28 = usize\l29 = usize\l30 = usize\l31 = u32\l32 = usize\l33 = usize\l", style="filled", color=palegreen3];
    X19dd34cf757319eb_0 -> X19dd34cf757319eb_1 [label="0"];
    X19dd34cf757319eb_0 -> X19dd34cf757319eb_5 [label="other"];
    X19dd34cf757319eb_0 [label="3 <- SizeOf :: u8\l4 <- Cast-Transmute cp(1)\l5 <- SubUnchecked(cp(2), const ?_usize)\lSwitchInt mv(3)\l"];
    X19dd34cf757319eb_1 -> X19dd34cf757319eb_2 [label="0"];
    X19dd34cf757319eb_1 -> X19dd34cf757319eb_3 [label="other"];
    X19dd34cf757319eb_1 [label="6 <- BitAnd(cp(4), cp(5))\lSwitchInt mv(6)\l"];
    X19dd34cf757319eb_2 -> X19dd34cf757319eb_4;
    X19dd34cf757319eb_2 [label="0 <- Use(const ?_usize)\lGoto\l"];
    X19dd34cf757319eb_3 -> X19dd34cf757319eb_4;
    X19dd34cf757319eb_3 [label="0 <- Use(const ?_usize)\lGoto\l"];
    X19dd34cf757319eb_4 -> X19dd34cf757319eb_19;
    X19dd34cf757319eb_4 [label="Goto\l"];
    X19dd34cf757319eb_5 -> X19dd34cf757319eb_6 [label="0"];
    X19dd34cf757319eb_5 -> X19dd34cf757319eb_10 [label="other"];
    X19dd34cf757319eb_5 [label="7 <- Rem(cp(2), cp(3))\lSwitchInt mv(7)\l"];
    X19dd34cf757319eb_6 -> X19dd34cf757319eb_7 [label="0"];
    X19dd34cf757319eb_6 -> X19dd34cf757319eb_8 [label="other"];
    X19dd34cf757319eb_6 [label="Storage Live _9\l9 <- Add(cp(4), cp(5))\lStorage Live _10\l10 <- Sub(const ?_usize, cp(2))\l8 <- BitAnd(mv(9), mv(10))\lStorage Dead _10\lStorage Dead _9\l11 <- Sub(cp(8), cp(4))\lStorage Live _12\l12 <- Lt(cp(11), cp(2))\lIntr: Assume mv(12)\lStorage Dead _12\l13 <- Rem(cp(4), cp(3))\lSwitchInt mv(13)\l"];
    X19dd34cf757319eb_7 -> X19dd34cf757319eb_9 [label="0"];
    X19dd34cf757319eb_7 [label="Call\l"];
    X19dd34cf757319eb_8 -> X19dd34cf757319eb_9;
    X19dd34cf757319eb_8 [label="0 <- Use(const ?_usize)\lGoto\l"];
    X19dd34cf757319eb_9 -> X19dd34cf757319eb_19;
    X19dd34cf757319eb_9 [label="Goto\l"];
    X19dd34cf757319eb_10 -> X19dd34cf757319eb_11 [label="15"];
    X19dd34cf757319eb_10 [label="Storage Live _14\lCall\l"];
    X19dd34cf757319eb_11 -> X19dd34cf757319eb_12 [label="16"];
    X19dd34cf757319eb_11 [label="Call\l"];
    X19dd34cf757319eb_12 -> X19dd34cf757319eb_14 [label="0"];
    X19dd34cf757319eb_12 -> X19dd34cf757319eb_13 [label="other"];
    X19dd34cf757319eb_12 [label="Storage Live _17\l17 <- Lt(cp(15), cp(16))\lSwitchInt mv(17)\l"];
    X19dd34cf757319eb_13 -> X19dd34cf757319eb_15;
    X19dd34cf757319eb_13 [label="14 <- Use(cp(15))\lGoto\l"];
    X19dd34cf757319eb_14 -> X19dd34cf757319eb_15;
    X19dd34cf757319eb_14 [label="14 <- Use(cp(16))\lGoto\l"];
    X19dd34cf757319eb_15 -> X19dd34cf757319eb_16 [label="0"];
    X19dd34cf757319eb_15 -> X19dd34cf757319eb_18 [label="other"];
    X19dd34cf757319eb_15 [label="Storage Dead _17\lStorage Live _19\l19 <- Use(cp(14))\l18 <- ShlUnchecked(const ?_usize, mv(19))\lStorage Dead _19\lStorage Live _20\lStorage Live _21\l21 <- SubUnchecked(cp(18), const ?_usize)\l20 <- BitAnd(cp(4), mv(21))\lStorage Dead _21\lSwitchInt mv(20)\l"];
    X19dd34cf757319eb_16 -> X19dd34cf757319eb_17 [label="33"];
    X19dd34cf757319eb_16 [label="Storage Dead _20\lStorage Live _23\l23 <- Use(cp(14))\l22 <- ShrUnchecked(cp(2), mv(23))\lStorage Dead _23\l24 <- SubUnchecked(cp(22), const ?_usize)\lStorage Live _26\l26 <- BitAnd(cp(3), cp(5))\lStorage Live _27\l27 <- Use(cp(14))\l25 <- ShrUnchecked(mv(26), mv(27))\lStorage Dead _27\lStorage Dead _26\lStorage Live _29\lStorage Live _30\l30 <- BitAnd(cp(4), cp(5))\lStorage Live _31\l31 <- Use(cp(14))\l29 <- ShrUnchecked(mv(30), mv(31))\lStorage Dead _31\lStorage Dead _30\l28 <- SubUnchecked(cp(22), mv(29))\lStorage Dead _29\lStorage Live _32\lStorage Live _33\lCall\l"];
    X19dd34cf757319eb_17 -> X19dd34cf757319eb_19;
    X19dd34cf757319eb_17 [label="32 <- Mul(cp(28), mv(33))\lStorage Dead _33\l0 <- BitAnd(mv(32), cp(24))\lStorage Dead _32\lStorage Dead _14\lGoto\l"];
    X19dd34cf757319eb_18 -> X19dd34cf757319eb_19;
    X19dd34cf757319eb_18 [label="Storage Dead _20\l0 <- Use(const ?_usize)\lStorage Dead _14\lGoto\l"];
    X19dd34cf757319eb_19 [label="Return\l"];
  }
  X19dd34cf757319eb_7 -> Xab38848ab7f87cef_0 [label="mv(11),mv(3)"];
  X19dd34cf757319eb_10 -> X310df8f1c672aeb_0 [label="cp(3)"];
  X19dd34cf757319eb_11 -> X310df8f1c672aeb_0 [label="cp(2)"];
  X19dd34cf757319eb_16 -> X90f500512b5cf374_0 [label="mv(25),mv(22)"];
  subgraph cluster_120 {
    label="core::ptr::align_offset::\nmod_inv";
    style="filled";
    color=lightgray;
    node_121 [label="LOCALS\l0 = usize\l1 = usize\l2 = usize\l3 = usize\l4 = usize\l5 = u8\l6 = [u8; 8]\l7 = usize\l8 = usize\l9 = bool\l10 = usize\l11 = bool\l12 = usize\l13 = usize\l14 = usize\l15 = usize\l16 = usize\l17 = usize\l18 = usize\l19 = bool\l20 = (usize, bool)\l21 = usize\l22 = usize\l23 = usize\l", style="filled", color=palegreen3];
    X90f500512b5cf374_0 -> X90f500512b5cf374_1;
    X90f500512b5cf374_0 [label="3 <- SubUnchecked(cp(2), const ?_usize)\lStorage Live _4\lStorage Live _5\lStorage Live _6\l6 <- Use(const [u8; 8])\lStorage Live _7\lStorage Live _8\l8 <- BitAnd(cp(1), const ?_usize)\l7 <- Shr(mv(8), const ?_i32)\lStorage Dead _8\l9 <- Lt(cp(7), const ?_usize)\lAssert mv(9) == true\l"];
    X90f500512b5cf374_1 -> X90f500512b5cf374_2;
    X90f500512b5cf374_1 [label="5 <- Use(cp(6[_7]))\l4 <- Cast-IntToInt mv(5)\lStorage Dead _5\lStorage Dead _7\lStorage Dead _6\lStorage Live _10\l10 <- Use(const ?_usize)\lGoto\l"];
    X90f500512b5cf374_2 -> X90f500512b5cf374_4 [label="0"];
    X90f500512b5cf374_2 -> X90f500512b5cf374_3 [label="other"];
    X90f500512b5cf374_2 [label="Storage Live _11\lStorage Live _12\l12 <- Use(cp(10))\l11 <- Ge(mv(12), cp(2))\lSwitchInt mv(11)\l"];
    X90f500512b5cf374_3 -> X90f500512b5cf374_6;
    X90f500512b5cf374_3 [label="Storage Dead _12\lStorage Dead _11\lGoto\l"];
    X90f500512b5cf374_4 -> X90f500512b5cf374_5 [label="0"];
    X90f500512b5cf374_4 -> X90f500512b5cf374_6 [label="other"];
    X90f500512b5cf374_4 [label="Storage Dead _12\lStorage Dead _11\lStorage Live _13\lStorage Live _14\l14 <- Use(cp(4))\lStorage Live _15\lStorage Live _16\lStorage Live _17\l17 <- Use(cp(4))\l16 <- Mul(cp(1), mv(17))\lStorage Dead _17\l15 <- Sub(const ?_usize, mv(16))\lStorage Dead _16\l13 <- Mul(mv(14), mv(15))\lStorage Dead _15\lStorage Dead _14\l4 <- Use(mv(13))\lStorage Dead _13\lStorage Live _20\lStorage Live _21\l21 <- Use(cp(10))\lStorage Live _22\l22 <- Use(cp(10))\l20 <- chkd-Mul(mv(21), mv(22))\lStorage Dead _22\lStorage Dead _21\l18 <- Use(cp(20.0))\l19 <- Use(cp(20.1))\lStorage Dead _20\lSwitchInt cp(19)\l"];
    X90f500512b5cf374_5 -> X90f500512b5cf374_2;
    X90f500512b5cf374_5 [label="10 <- Use(cp(18))\lGoto\l"];
    X90f500512b5cf374_6 [label="Storage Live _23\l23 <- Use(cp(4))\l0 <- BitAnd(mv(23), cp(3))\lStorage Dead _23\lStorage Dead _10\lStorage Dead _4\lReturn\l"];
  }
  subgraph cluster_122 {
    label="core::ptr::drop_in_place:\n:<&u8>";
    style="filled";
    color=lightgray;
    node_123 [label="LOCALS\l0 = ()\l1 = *mut &u8\l", style="filled", color=palegreen3];
    Xa69e6f0281b6af9a_0 [label="Return\l"];
  }
  subgraph cluster_124 {
    label="core::ptr::drop_in_place:\n:<&u32>";
    style="filled";
    color=lightgray;
    node_125 [label="LOCALS\l0 = ()\l1 = *mut &u32\l", style="filled", color=palegreen3];
    Xfe6c34d78e923dcb_0 [label="Return\l"];
  }
  subgraph cluster_126 {
    label="core::ptr::drop_in_place:\n:<&()>";
    style="filled";
    color=lightgray;
    node_127 [label="LOCALS\l0 = ()\l1 = *mut &()\l", style="filled", color=palegreen3];
    Xcb5af9be68892568_0 [label="Return\l"];
  }
  subgraph cluster_128 {
    label="core::ptr::drop_in_place:\n:<&&[u8]>";
    style="filled";
    color=lightgray;
    node_129 [label="LOCALS\l0 = ()\l1 = *mut &&[u8]\l", style="filled", color=palegreen3];
    Xd6c480abeafb8fee_0 [label="Return\l"];
  }
  subgraph cluster_130 {
    label="core::ptr::drop_in_place:\n:<&&[u8; \n32]>";
    style="filled";
    color=lightgray;
    node_131 [label="LOCALS\l0 = ()\l1 = *mut &&[u8; 32]\l", style="filled", color=palegreen3];
    X3b4e8d28213d0f2_0 [label="Return\l"];
  }
  subgraph cluster_132 {
    label="core::ptr::drop_in_place:\n:<pinocchio::program_erro\nr::ProgramError>";
    style="filled";
    color=lightgray;
    node_133 [label="LOCALS\l0 = ()\l1 = *mut pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X3d8bfa7e8fa4ed7a_0 [label="Return\l"];
  }
  subgraph cluster_134 {
    label="core::ptr::drop_in_place:\n:<&pinocchio::program_err\nor::ProgramError>";
    style="filled";
    color=lightgray;
    node_135 [label="LOCALS\l0 = ()\l1 = *mut &pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X93be498283be854c_0 [label="Return\l"];
  }
  subgraph cluster_136 {
    label="core::ptr::mut_ptr::<impl\n \n*mut \nu8>::add";
    style="filled";
    color=lightgray;
    node_137 [label="LOCALS\l0 = *mut u8\l1 = *mut u8\l2 = usize\l", style="filled", color=palegreen3];
    Xf7c0564bc7b3306b_0 [label="0 <- Offset(cp(1), cp(2))\lReturn\l"];
  }
  subgraph cluster_138 {
    label="core::ptr::const_ptr::<im\npl \n*const \nu8>::align_offset";
    style="filled";
    color=lightgray;
    node_139 [label="LOCALS\l0 = usize\l1 = *const u8\l2 = usize\l3 = !\l4 = core::fmt::Arguments<'_>\l5 = u32\l6 = &[&str]\l7 = &[core::fmt::rt::Argument<'_>]\l", style="filled", color=palegreen3];
    X1016b8be58aff39a_0 -> X1016b8be58aff39a_4 [label="5"];
    X1016b8be58aff39a_0 [label="Storage Live _5\lCall\l"];
    X1016b8be58aff39a_1 -> X1016b8be58aff39a_3 [label="0"];
    X1016b8be58aff39a_1 [label="Storage Dead _5\lCall\l"];
    X1016b8be58aff39a_2 [label="Storage Dead _5\lStorage Live _4\lStorage Live _6\l6 <- Cast-PointerCoercion(Unsize) const &[&str; 1]\lStorage Live _7\l7 <- Cast-PointerCoercion(Unsize) const &[core::fmt::rt::Argument<'_>; 0]\l4 <- Adt{0} (mv(6), const core::option::Option<&[core::fmt::rt::Placeholder]>, mv(7))\lStorage Dead _7\lStorage Dead _6\lCall\l"];
    X1016b8be58aff39a_3 [label="Return\l"];
    X1016b8be58aff39a_4 -> X1016b8be58aff39a_1 [label="1"];
    X1016b8be58aff39a_4 -> X1016b8be58aff39a_2 [label="other"];
    X1016b8be58aff39a_4 [label="SwitchInt mv(5)\l"];
  }
  X1016b8be58aff39a_0 -> X5ea6c111b835a80f_0 [label="cp(2)"];
  X1016b8be58aff39a_1 -> X19dd34cf757319eb_0 [label="mv(1),mv(2)"];
  X1016b8be58aff39a_2 -> Xfffaab11503b9894_0 [label="mv(4)"];
  subgraph cluster_140 {
    label="core::ptr::const_ptr::<im\npl \n*const \nu8>::add";
    style="filled";
    color=lightgray;
    node_141 [label="LOCALS\l0 = *const u8\l1 = *const u8\l2 = usize\l", style="filled", color=palegreen3];
    X6c086d5fab5d136b_0 [label="0 <- Offset(cp(1), cp(2))\lReturn\l"];
  }
  subgraph cluster_142 {
    label="core::ptr::const_ptr::<im\npl \n*const \nspl_token_interface::stat\ne::mint::Mint>::read";
    style="filled";
    color=lightgray;
    node_143 [label="LOCALS\l0 = spl_token_interface::state::mint::Mint\l1 = *const spl_token_interface::state::mint::Mint\l", style="filled", color=palegreen3];
    X80b73d35b2577076_0 [label="0 <- Use(cp((*1)))\lReturn\l"];
  }
  subgraph cluster_144 {
    label="core::iter::range::<impl \ncore::iter::Iterator \nfor \ncore::ops::Range<usize>>:\n:next";
    style="filled";
    color=lightgray;
    node_145 [label="LOCALS\l0 = core::option::Option<usize>\l1 = &mut core::ops::Range<usize>\l", style="filled", color=palegreen3];
    X1f9e69c6b415d93e_0 -> X1f9e69c6b415d93e_1 [label="0"];
    X1f9e69c6b415d93e_0 [label="Call\l"];
    X1f9e69c6b415d93e_1 [label="Return\l"];
  }
  X1f9e69c6b415d93e_0 -> X76d9451f9bf287e8_0 [label="mv(1)"];
  subgraph cluster_146 {
    label="core::array::<impl \ncore::fmt::Debug \nfor \n[u8; \n32]>::fmt";
    style="filled";
    color=lightgray;
    node_147 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &[u8; 32]\l2 = &mut core::fmt::Formatter<'_>\l3 = &&[u8]\l4 = &[u8]\l5 = &[u8]\l", style="filled", color=palegreen3];
    X20fa37143c5ec43f_0 -> X20fa37143c5ec43f_1 [label="0"];
    X20fa37143c5ec43f_0 [label="Storage Live _4\l5 <- Cast-PointerCoercion(Unsize) cp(1)\l4 <- Use(cp(5))\l3 <- & 4\lCall\l"];
    X20fa37143c5ec43f_1 [label="Storage Dead _4\lReturn\l"];
  }
  X20fa37143c5ec43f_0 -> X3deedd080d0bf2c6_0 [label="mv(5),mv(2)"];
  subgraph cluster_148 {
    label="core::array::<impl \ncore::ops::Index<core::op\ns::Range<usize>> \nfor \n[u8; \n34]>::index";
    style="filled";
    color=lightgray;
    node_149 [label="LOCALS\l0 = &[u8]\l1 = &[u8; 34]\l2 = core::ops::Range<usize>\l3 = &[u8]\l", style="filled", color=palegreen3];
    Xb134013e8890cb51_0 -> Xb134013e8890cb51_1 [label="0"];
    Xb134013e8890cb51_0 [label="3 <- Cast-PointerCoercion(Unsize) cp(1)\lCall\l"];
    Xb134013e8890cb51_1 [label="Return\l"];
  }
  Xb134013e8890cb51_0 -> X1127a765b31e4f7a_0 [label="mv(3),mv(2)"];
  subgraph cluster_150 {
    label="core::array::<impl \ncore::ops::Index<core::op\ns::Range<usize>> \nfor \n[u8; \n66]>::index";
    style="filled";
    color=lightgray;
    node_151 [label="LOCALS\l0 = &[u8]\l1 = &[u8; 66]\l2 = core::ops::Range<usize>\l3 = &[u8]\l", style="filled", color=palegreen3];
    X18263d3eed120ea5_0 -> X18263d3eed120ea5_1 [label="0"];
    X18263d3eed120ea5_0 [label="3 <- Cast-PointerCoercion(Unsize) cp(1)\lCall\l"];
    X18263d3eed120ea5_1 [label="Return\l"];
  }
  X18263d3eed120ea5_0 -> X1127a765b31e4f7a_0 [label="mv(3),mv(2)"];
  subgraph cluster_152 {
    label="core::array::equality::<i\nmpl \ncore::cmp::PartialEq \nfor \n[u8; \n32]>::ne";
    style="filled";
    color=lightgray;
    node_153 [label="LOCALS\l0 = bool\l1 = &[u8; 32]\l2 = &[u8; 32]\l", style="filled", color=palegreen3];
    X6dec8e35a57ec51c_0 -> X6dec8e35a57ec51c_1 [label="0"];
    X6dec8e35a57ec51c_0 [label="Call\l"];
    X6dec8e35a57ec51c_1 [label="Return\l"];
  }
  X6dec8e35a57ec51c_0 -> Xf0a84b1dfc729bb8_0 [label="mv(1),mv(2)"];
  subgraph cluster_154 {
    label="core::array::equality::<i\nmpl \ncore::cmp::PartialEq<[u8]\n> \nfor \n[u8; \n32]>::eq";
    style="filled";
    color=lightgray;
    node_155 [label="LOCALS\l0 = bool\l1 = &[u8; 32]\l2 = &[u8]\l3 = core::result::Result<&[u8; 32], core::array::TryFromSliceError>\l4 = &[u8; 32]\l5 = core::option::Option<&[u8; 32]>\l6 = bool\l7 = usize\l8 = *const [u8; 32]\l9 = &[u8; 32]\l10 = *const [u8]\l11 = &[u8; 32]\l", style="filled", color=palegreen3];
    Xa2380947328c262a_0 -> Xa2380947328c262a_3 [label="0"];
    Xa2380947328c262a_0 -> Xa2380947328c262a_2 [label="other"];
    Xa2380947328c262a_0 [label="Storage Live _3\lStorage Live _5\lStorage Live _9\lStorage Live _10\lStorage Live _6\lStorage Live _7\l7 <- PtrMetadata(cp(2))\l6 <- Eq(mv(7), const ?_usize)\lSwitchInt mv(6)\l"];
    Xa2380947328c262a_1 [label="Storage Dead _3\lReturn\l"];
    Xa2380947328c262a_2 -> Xa2380947328c262a_1 [label="0"];
    Xa2380947328c262a_2 [label="Storage Dead _7\lStorage Live _8\l10 <- &raw (*2)\l8 <- Cast-PtrToPtr cp(10)\l9 <- & (*8)\l5 <- Adt{1} (cp(9))\lStorage Dead _8\lStorage Dead _6\lStorage Dead _10\lStorage Dead _9\lStorage Live _11\l11 <- Use(mv((5 as variant 1).0))\l3 <- Adt{0} (cp(11))\lStorage Dead _11\lStorage Dead _5\l4 <- Use(cp((3 as variant 0).0))\lCall\l"];
    Xa2380947328c262a_3 -> Xa2380947328c262a_1;
    Xa2380947328c262a_3 [label="Storage Dead _7\l5 <- Use(const core::option::Option<&[u8; 32]>)\lStorage Dead _6\lStorage Dead _10\lStorage Dead _9\lStorage Live _11\l3 <- Use(const core::result::Result<&[u8; 32], core::array::TryFromSliceError>)\lStorage Dead _11\lStorage Dead _5\l0 <- Use(const bool)\lGoto\l"];
  }
  Xa2380947328c262a_2 -> Xb51f0a1884dba91f_0 [label="mv(1),mv(4)"];
  subgraph cluster_156 {
    label="core::slice::<impl \n[u8]>::as_mut_ptr";
    style="filled";
    color=lightgray;
    node_157 [label="LOCALS\l0 = *mut u8\l1 = &mut [u8]\l2 = *mut [u8]\l", style="filled", color=palegreen3];
    X8641c13e22843093_0 [label="Storage Live _2\l2 <- &raw mut (*1)\l0 <- Cast-PtrToPtr mv(2)\lStorage Dead _2\lReturn\l"];
  }
  subgraph cluster_158 {
    label="core::slice::<impl \n[u8]>::first_chunk::<34>";
    style="filled";
    color=lightgray;
    node_159 [label="LOCALS\l0 = core::option::Option<&[u8; 34]>\l1 = &[u8]\l2 = bool\l3 = usize\l4 = &[u8; 34]\l5 = *const [u8; 34]\l6 = *const u8\l7 = *const [u8]\l", style="filled", color=palegreen3];
    X9100a5b1ac90ee14_0 -> X9100a5b1ac90ee14_2 [label="0"];
    X9100a5b1ac90ee14_0 -> X9100a5b1ac90ee14_1 [label="other"];
    X9100a5b1ac90ee14_0 [label="Storage Live _2\lStorage Live _3\l3 <- PtrMetadata(cp(1))\l2 <- Lt(mv(3), const ?_usize)\lSwitchInt mv(2)\l"];
    X9100a5b1ac90ee14_1 -> X9100a5b1ac90ee14_3;
    X9100a5b1ac90ee14_1 [label="Storage Dead _3\l0 <- Use(const core::option::Option<&[u8; 34]>)\lGoto\l"];
    X9100a5b1ac90ee14_2 -> X9100a5b1ac90ee14_3;
    X9100a5b1ac90ee14_2 [label="Storage Dead _3\lStorage Live _5\lStorage Live _6\l7 <- &raw (*1)\l6 <- Cast-PtrToPtr cp(7)\l5 <- Cast-PtrToPtr cp(7)\lStorage Dead _6\l4 <- & (*5)\l0 <- Adt{1} (cp(4))\lStorage Dead _5\lGoto\l"];
    X9100a5b1ac90ee14_3 [label="Storage Dead _2\lReturn\l"];
  }
  subgraph cluster_160 {
    label="core::slice::<impl \n[u8]>::first_chunk::<66>";
    style="filled";
    color=lightgray;
    node_161 [label="LOCALS\l0 = core::option::Option<&[u8; 66]>\l1 = &[u8]\l2 = bool\l3 = usize\l4 = &[u8; 66]\l5 = *const [u8; 66]\l6 = *const u8\l7 = *const [u8]\l", style="filled", color=palegreen3];
    Xee717654aecb5bd1_0 -> Xee717654aecb5bd1_2 [label="0"];
    Xee717654aecb5bd1_0 -> Xee717654aecb5bd1_1 [label="other"];
    Xee717654aecb5bd1_0 [label="Storage Live _2\lStorage Live _3\l3 <- PtrMetadata(cp(1))\l2 <- Lt(mv(3), const ?_usize)\lSwitchInt mv(2)\l"];
    Xee717654aecb5bd1_1 -> Xee717654aecb5bd1_3;
    Xee717654aecb5bd1_1 [label="Storage Dead _3\l0 <- Use(const core::option::Option<&[u8; 66]>)\lGoto\l"];
    Xee717654aecb5bd1_2 -> Xee717654aecb5bd1_3;
    Xee717654aecb5bd1_2 [label="Storage Dead _3\lStorage Live _5\lStorage Live _6\l7 <- &raw (*1)\l6 <- Cast-PtrToPtr cp(7)\l5 <- Cast-PtrToPtr cp(7)\lStorage Dead _6\l4 <- & (*5)\l0 <- Adt{1} (cp(4))\lStorage Dead _5\lGoto\l"];
    Xee717654aecb5bd1_3 [label="Storage Dead _2\lReturn\l"];
  }
  subgraph cluster_162 {
    label="core::slice::<impl \n[pinocchio::account_info:\n:AccountInfo]>::first_chu\nnk::<1>";
    style="filled";
    color=lightgray;
    node_163 [label="LOCALS\l0 = core::option::Option<&[pinocchio::account_info::AccountInfo; 1]>\l1 = &[pinocchio::account_info::AccountInfo]\l2 = bool\l3 = usize\l4 = &[pinocchio::account_info::AccountInfo; 1]\l5 = *const [pinocchio::account_info::AccountInfo; 1]\l6 = *const pinocchio::account_info::AccountInfo\l7 = *const [pinocchio::account_info::AccountInfo]\l", style="filled", color=palegreen3];
    X93456e0e13a65736_0 -> X93456e0e13a65736_2 [label="0"];
    X93456e0e13a65736_0 -> X93456e0e13a65736_1 [label="other"];
    X93456e0e13a65736_0 [label="Storage Live _2\lStorage Live _3\l3 <- PtrMetadata(cp(1))\l2 <- Lt(mv(3), const ?_usize)\lSwitchInt mv(2)\l"];
    X93456e0e13a65736_1 -> X93456e0e13a65736_3;
    X93456e0e13a65736_1 [label="Storage Dead _3\l0 <- Use(const core::option::Option<&[pinocchio::account_info::AccountInfo; 1]>)\lGoto\l"];
    X93456e0e13a65736_2 -> X93456e0e13a65736_3;
    X93456e0e13a65736_2 [label="Storage Dead _3\lStorage Live _5\lStorage Live _6\l7 <- &raw (*1)\l6 <- Cast-PtrToPtr cp(7)\l5 <- Cast-PtrToPtr cp(7)\lStorage Dead _6\l4 <- & (*5)\l0 <- Adt{1} (cp(4))\lStorage Dead _5\lGoto\l"];
    X93456e0e13a65736_3 [label="Storage Dead _2\lReturn\l"];
  }
  subgraph cluster_164 {
    label="core::slice::<impl \n[u8]>::get_unchecked::<us\nize>";
    style="filled";
    color=lightgray;
    node_165 [label="LOCALS\l0 = &u8\l1 = &[u8]\l2 = usize\l3 = *const u8\l4 = *const [u8]\l", style="filled", color=palegreen3];
    Xe2dd8d6d8ab56bef_0 -> Xe2dd8d6d8ab56bef_1 [label="3"];
    Xe2dd8d6d8ab56bef_0 [label="Storage Live _3\lStorage Live _4\l4 <- &raw (*1)\lCall\l"];
    Xe2dd8d6d8ab56bef_1 [label="Storage Dead _4\l0 <- & (*3)\lStorage Dead _3\lReturn\l"];
  }
  Xe2dd8d6d8ab56bef_0 -> X7bd4403f8d22bbb7_0 [label="mv(2),mv(4)"];
  subgraph cluster_166 {
    label="core::slice::<impl \n[pinocchio::account_info:\n:AccountInfo]>::get_unche\ncked::<core::ops::RangeTo\n<usize>>";
    style="filled";
    color=lightgray;
    node_167 [label="LOCALS\l0 = &[pinocchio::account_info::AccountInfo]\l1 = &[pinocchio::account_info::AccountInfo]\l2 = core::ops::RangeTo<usize>\l3 = *const [pinocchio::account_info::AccountInfo]\l4 = *const [pinocchio::account_info::AccountInfo]\l", style="filled", color=palegreen3];
    X76d4fee106df2abc_0 -> X76d4fee106df2abc_1 [label="3"];
    X76d4fee106df2abc_0 [label="Storage Live _3\lStorage Live _4\l4 <- &raw (*1)\lCall\l"];
    X76d4fee106df2abc_1 [label="Storage Dead _4\l0 <- & (*3)\lStorage Dead _3\lReturn\l"];
  }
  X76d4fee106df2abc_0 -> X547eb5d0a2c4568_0 [label="mv(2),mv(4)"];
  subgraph cluster_168 {
    label="core::slice::<impl \n[u8]>::get_unchecked::<co\nre::ops::Range<usize>>";
    style="filled";
    color=lightgray;
    node_169 [label="LOCALS\l0 = &[u8]\l1 = &[u8]\l2 = core::ops::Range<usize>\l3 = *const [u8]\l4 = *const [u8]\l", style="filled", color=palegreen3];
    X63c3503b3e7fa274_0 -> X63c3503b3e7fa274_1 [label="3"];
    X63c3503b3e7fa274_0 [label="Storage Live _3\lStorage Live _4\l4 <- &raw (*1)\lCall\l"];
    X63c3503b3e7fa274_1 [label="Storage Dead _4\l0 <- & (*3)\lStorage Dead _3\lReturn\l"];
  }
  X63c3503b3e7fa274_0 -> Xa5745fda7f573cf5_0 [label="mv(2),mv(4)"];
  subgraph cluster_170 {
    label="core::slice::<impl \n[core::mem::MaybeUninit<p\ninocchio::account_info::A\nccountInfo>]>::get_unchec\nked::<usize>";
    style="filled";
    color=lightgray;
    node_171 [label="LOCALS\l0 = &core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l1 = &[core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l2 = usize\l3 = *const core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l4 = *const [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l", style="filled", color=palegreen3];
    X5fd8469768ca93e7_0 -> X5fd8469768ca93e7_1 [label="3"];
    X5fd8469768ca93e7_0 [label="Storage Live _3\lStorage Live _4\l4 <- &raw (*1)\lCall\l"];
    X5fd8469768ca93e7_1 [label="Storage Dead _4\l0 <- & (*3)\lStorage Dead _3\lReturn\l"];
  }
  X5fd8469768ca93e7_0 -> Xf7c0e3c61151eb20_0 [label="mv(2),mv(4)"];
  subgraph cluster_172 {
    label="core::slice::<impl \n[core::mem::MaybeUninit<p\ninocchio::account_info::A\nccountInfo>]>::as_ptr";
    style="filled";
    color=lightgray;
    node_173 [label="LOCALS\l0 = *const core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l1 = &[core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l2 = *const [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l", style="filled", color=palegreen3];
    Xd96a92a3093bb3ff_0 [label="Storage Live _2\l2 <- &raw (*1)\l0 <- Cast-PtrToPtr mv(2)\lStorage Dead _2\lReturn\l"];
  }
  subgraph cluster_174 {
    label="core::slice::<impl \n[u8]>::as_ptr";
    style="filled";
    color=lightgray;
    node_175 [label="LOCALS\l0 = *const u8\l1 = &[u8]\l2 = *const [u8]\l", style="filled", color=palegreen3];
    X5e85acfe8a19755e_0 [label="Storage Live _2\l2 <- &raw (*1)\l0 <- Cast-PtrToPtr mv(2)\lStorage Dead _2\lReturn\l"];
  }
  subgraph cluster_176 {
    label="core::slice::from_raw_par\nts::<'_, \npinocchio::account_info::\nAccountInfo>";
    style="filled";
    color=lightgray;
    node_177 [label="LOCALS\l0 = &[pinocchio::account_info::AccountInfo]\l1 = *const pinocchio::account_info::AccountInfo\l2 = usize\l3 = bool\l4 = ()\l5 = *mut ()\l6 = usize\l7 = usize\l8 = *const [pinocchio::account_info::AccountInfo]\l", style="filled", color=palegreen3];
    X990394bf3cfa52c4_0 -> X990394bf3cfa52c4_3 [label="0"];
    X990394bf3cfa52c4_0 -> X990394bf3cfa52c4_1 [label="other"];
    X990394bf3cfa52c4_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    X990394bf3cfa52c4_1 -> X990394bf3cfa52c4_2 [label="4"];
    X990394bf3cfa52c4_1 [label="Storage Live _5\l5 <- Cast-PtrToPtr cp(1)\lStorage Live _6\l6 <- SizeOf :: pinocchio::account_info::AccountInfo\lStorage Live _7\l7 <- AlignOf :: pinocchio::account_info::AccountInfo\lCall\l"];
    X990394bf3cfa52c4_2 -> X990394bf3cfa52c4_3;
    X990394bf3cfa52c4_2 [label="Storage Dead _7\lStorage Dead _6\lStorage Dead _5\lGoto\l"];
    X990394bf3cfa52c4_3 [label="Storage Dead _3\lStorage Live _8\l8 <- *([pinocchio::account_info::AccountInfo]) (cp(1), cp(2))\l0 <- & (*8)\lStorage Dead _8\lReturn\l"];
  }
  X990394bf3cfa52c4_1 -> X9e3bdfa64cf2efd4_0 [label="mv(5),mv(6),mv(7),cp(2)"];
  subgraph cluster_178 {
    label="core::slice::from_raw_par\nts::precondition_check";
    style="filled";
    color=lightgray;
    node_179 [label="LOCALS\l0 = ()\l1 = *mut ()\l2 = usize\l3 = usize\l4 = usize\l5 = bool\l6 = *const ()\l7 = bool\l8 = !\l9 = bool\l10 = !\l11 = core::fmt::Arguments<'_>\l12 = usize\l13 = usize\l14 = usize\l15 = u32\l16 = &[&str]\l17 = &[core::fmt::rt::Argument<'_>]\l18 = *const u8\l19 = usize\l20 = bool\l21 = usize\l", style="filled", color=palegreen3];
    X9e3bdfa64cf2efd4_0 -> X9e3bdfa64cf2efd4_10 [label="15"];
    X9e3bdfa64cf2efd4_0 [label="Storage Live _5\lStorage Live _6\l6 <- Cast-PtrToPtr cp(1)\lStorage Live _13\lStorage Live _15\lCall\l"];
    X9e3bdfa64cf2efd4_1 -> X9e3bdfa64cf2efd4_11 [label="0"];
    X9e3bdfa64cf2efd4_1 -> X9e3bdfa64cf2efd4_12 [label="other"];
    X9e3bdfa64cf2efd4_1 [label="Storage Dead _6\lStorage Live _7\lStorage Live _20\lStorage Live _19\l20 <- Eq(cp(2), const ?_usize)\lSwitchInt cp(2)\l"];
    X9e3bdfa64cf2efd4_2 [label="Storage Dead _7\lStorage Dead _5\lReturn\l"];
    X9e3bdfa64cf2efd4_3 -> X9e3bdfa64cf2efd4_5;
    X9e3bdfa64cf2efd4_3 [label="Goto\l"];
    X9e3bdfa64cf2efd4_4 -> X9e3bdfa64cf2efd4_5;
    X9e3bdfa64cf2efd4_4 [label="Storage Dead _6\lGoto\l"];
    X9e3bdfa64cf2efd4_5 [label="Call\l"];
    X9e3bdfa64cf2efd4_6 -> X9e3bdfa64cf2efd4_4 [label="0"];
    X9e3bdfa64cf2efd4_6 -> X9e3bdfa64cf2efd4_1 [label="other"];
    X9e3bdfa64cf2efd4_6 [label="Storage Dead _12\lStorage Live _9\lStorage Live _18\l18 <- Cast-PtrToPtr cp(1)\l9 <- Eq(cp(13), const ?_usize)\lStorage Dead _18\l5 <- Not(mv(9))\lStorage Dead _9\lStorage Dead _13\lSwitchInt mv(5)\l"];
    X9e3bdfa64cf2efd4_7 -> X9e3bdfa64cf2efd4_4;
    X9e3bdfa64cf2efd4_7 [label="Storage Dead _12\lStorage Dead _13\lGoto\l"];
    X9e3bdfa64cf2efd4_8 -> X9e3bdfa64cf2efd4_6 [label="0"];
    X9e3bdfa64cf2efd4_8 -> X9e3bdfa64cf2efd4_7 [label="other"];
    X9e3bdfa64cf2efd4_8 [label="Storage Dead _15\lStorage Live _12\l13 <- Cast-Transmute cp(1)\lStorage Live _14\l14 <- Sub(cp(3), const ?_usize)\l12 <- BitAnd(cp(13), mv(14))\lStorage Dead _14\lSwitchInt mv(12)\l"];
    X9e3bdfa64cf2efd4_9 [label="Storage Dead _15\lStorage Live _11\lStorage Live _16\l16 <- Cast-PointerCoercion(Unsize) const &[&str; 1]\lStorage Live _17\l17 <- Cast-PointerCoercion(Unsize) const &[core::fmt::rt::Argument<'_>; 0]\l11 <- Adt{0} (mv(16), const core::option::Option<&[core::fmt::rt::Placeholder]>, mv(17))\lStorage Dead _17\lStorage Dead _16\lCall\l"];
    X9e3bdfa64cf2efd4_10 -> X9e3bdfa64cf2efd4_8 [label="1"];
    X9e3bdfa64cf2efd4_10 -> X9e3bdfa64cf2efd4_9 [label="other"];
    X9e3bdfa64cf2efd4_10 [label="SwitchInt mv(15)\l"];
    X9e3bdfa64cf2efd4_11 -> X9e3bdfa64cf2efd4_14;
    X9e3bdfa64cf2efd4_11 [label="19 <- Use(const ?_usize)\lGoto\l"];
    X9e3bdfa64cf2efd4_12 -> X9e3bdfa64cf2efd4_13;
    X9e3bdfa64cf2efd4_12 [label="Assert cp(20) == false\l"];
    X9e3bdfa64cf2efd4_13 -> X9e3bdfa64cf2efd4_14;
    X9e3bdfa64cf2efd4_13 [label="19 <- Div(const ?_usize, cp(2))\lGoto\l"];
    X9e3bdfa64cf2efd4_14 -> X9e3bdfa64cf2efd4_3 [label="0"];
    X9e3bdfa64cf2efd4_14 -> X9e3bdfa64cf2efd4_2 [label="other"];
    X9e3bdfa64cf2efd4_14 [label="Storage Live _21\l21 <- Use(cp(19))\l7 <- Le(cp(4), mv(21))\lStorage Dead _21\lStorage Dead _19\lStorage Dead _20\lSwitchInt mv(7)\l"];
  }
  X9e3bdfa64cf2efd4_0 -> X5ea6c111b835a80f_0 [label="cp(3)"];
  X9e3bdfa64cf2efd4_5 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  X9e3bdfa64cf2efd4_9 -> Xfffaab11503b9894_0 [label="mv(11)"];
  subgraph cluster_180 {
    label="core::slice::index::<impl\n \ncore::ops::Index<core::op\ns::Range<usize>> \nfor \n[u8]>::index";
    style="filled";
    color=lightgray;
    node_181 [label="LOCALS\l0 = &[u8]\l1 = &[u8]\l2 = core::ops::Range<usize>\l", style="filled", color=palegreen3];
    X1127a765b31e4f7a_0 -> X1127a765b31e4f7a_1 [label="0"];
    X1127a765b31e4f7a_0 [label="Call\l"];
    X1127a765b31e4f7a_1 [label="Return\l"];
  }
  X1127a765b31e4f7a_0 -> Xb47481b07fb97f48_0 [label="mv(2),mv(1)"];
  subgraph cluster_182 {
    label="core::slice::index::<impl\n \ncore::ops::Index<core::op\ns::RangeFrom<usize>> \nfor \n[pinocchio::account_info:\n:AccountInfo]>::index";
    style="filled";
    color=lightgray;
    node_183 [label="LOCALS\l0 = &[pinocchio::account_info::AccountInfo]\l1 = &[pinocchio::account_info::AccountInfo]\l2 = core::ops::RangeFrom<usize>\l", style="filled", color=palegreen3];
    X7354e97359dec8c1_0 -> X7354e97359dec8c1_1 [label="0"];
    X7354e97359dec8c1_0 [label="Call\l"];
    X7354e97359dec8c1_1 [label="Return\l"];
  }
  X7354e97359dec8c1_0 -> Xb10705ddd1b146e2_0 [label="mv(2),mv(1)"];
  subgraph cluster_184 {
    label="core::slice::index::<impl\n \ncore::ops::Index<core::op\ns::RangeFrom<usize>> \nfor \n[u8]>::index";
    style="filled";
    color=lightgray;
    node_185 [label="LOCALS\l0 = &[u8]\l1 = &[u8]\l2 = core::ops::RangeFrom<usize>\l", style="filled", color=palegreen3];
    Xac6bf6e65b32d0d0_0 -> Xac6bf6e65b32d0d0_1 [label="0"];
    Xac6bf6e65b32d0d0_0 [label="Call\l"];
    Xac6bf6e65b32d0d0_1 [label="Return\l"];
  }
  Xac6bf6e65b32d0d0_0 -> Xdbbcf3965a56e3eb_0 [label="mv(2),mv(1)"];
  subgraph cluster_186 {
    label="core::option::Option::<&[\nu8; \n32]>::unwrap";
    style="filled";
    color=lightgray;
    node_187 [label="LOCALS\l0 = &[u8; 32]\l1 = core::option::Option<&[u8; 32]>\l2 = isize\l3 = !\l", style="filled", color=palegreen3];
    Xd12b536e58e40289_0 -> Xd12b536e58e40289_2 [label="0"];
    Xd12b536e58e40289_0 -> Xd12b536e58e40289_3 [label="1"];
    Xd12b536e58e40289_0 -> Xd12b536e58e40289_1 [label="other"];
    Xd12b536e58e40289_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    Xd12b536e58e40289_1 [label="Unreachable\l"];
    Xd12b536e58e40289_2 [label="Call\l"];
    Xd12b536e58e40289_3 [label="0 <- Use(mv((1 as variant 1).0))\lReturn\l"];
  }
  Xd12b536e58e40289_2 -> X9b498145f7dc0efa_0 [label=""];
  subgraph cluster_188 {
    label="core::option::Option::<&[\nu8; \n34]>::unwrap";
    style="filled";
    color=lightgray;
    node_189 [label="LOCALS\l0 = &[u8; 34]\l1 = core::option::Option<&[u8; 34]>\l2 = isize\l3 = !\l", style="filled", color=palegreen3];
    X63ab87bd0fbb145a_0 -> X63ab87bd0fbb145a_2 [label="0"];
    X63ab87bd0fbb145a_0 -> X63ab87bd0fbb145a_3 [label="1"];
    X63ab87bd0fbb145a_0 -> X63ab87bd0fbb145a_1 [label="other"];
    X63ab87bd0fbb145a_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X63ab87bd0fbb145a_1 [label="Unreachable\l"];
    X63ab87bd0fbb145a_2 [label="Call\l"];
    X63ab87bd0fbb145a_3 [label="0 <- Use(mv((1 as variant 1).0))\lReturn\l"];
  }
  X63ab87bd0fbb145a_2 -> X9b498145f7dc0efa_0 [label=""];
  subgraph cluster_190 {
    label="core::option::Option::<&[\npinocchio::account_info::\nAccountInfo; \n1]>::unwrap";
    style="filled";
    color=lightgray;
    node_191 [label="LOCALS\l0 = &[pinocchio::account_info::AccountInfo; 1]\l1 = core::option::Option<&[pinocchio::account_info::AccountInfo; 1]>\l2 = isize\l3 = !\l", style="filled", color=palegreen3];
    X2e45c926b2a500bc_0 -> X2e45c926b2a500bc_2 [label="0"];
    X2e45c926b2a500bc_0 -> X2e45c926b2a500bc_3 [label="1"];
    X2e45c926b2a500bc_0 -> X2e45c926b2a500bc_1 [label="other"];
    X2e45c926b2a500bc_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X2e45c926b2a500bc_1 [label="Unreachable\l"];
    X2e45c926b2a500bc_2 [label="Call\l"];
    X2e45c926b2a500bc_3 [label="0 <- Use(mv((1 as variant 1).0))\lReturn\l"];
  }
  X2e45c926b2a500bc_2 -> X9b498145f7dc0efa_0 [label=""];
  subgraph cluster_192 {
    label="core::option::Option::<&[\nu8; \n66]>::unwrap";
    style="filled";
    color=lightgray;
    node_193 [label="LOCALS\l0 = &[u8; 66]\l1 = core::option::Option<&[u8; 66]>\l2 = isize\l3 = !\l", style="filled", color=palegreen3];
    X3a1efd46de86f33f_0 -> X3a1efd46de86f33f_2 [label="0"];
    X3a1efd46de86f33f_0 -> X3a1efd46de86f33f_3 [label="1"];
    X3a1efd46de86f33f_0 -> X3a1efd46de86f33f_1 [label="other"];
    X3a1efd46de86f33f_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X3a1efd46de86f33f_1 [label="Unreachable\l"];
    X3a1efd46de86f33f_2 [label="Call\l"];
    X3a1efd46de86f33f_3 [label="0 <- Use(mv((1 as variant 1).0))\lReturn\l"];
  }
  X3a1efd46de86f33f_2 -> X9b498145f7dc0efa_0 [label=""];
  subgraph cluster_194 {
    label="core::result::Result::<()\n, \npinocchio::program_error:\n:ProgramError>::inspect_e\nrr::<for<'a> \nfn(&'a \npinocchio::program_error:\n:ProgramError) \n{entrypoint::log_error}>";
    style="filled";
    color=lightgray;
    node_195 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = core::result::Result<(), pinocchio::program_error::ProgramError>\l2 = for<'a> fn(&'a pinocchio::program_error::ProgramError) {entrypoint::log_error}\l3 = isize\l4 = &pinocchio::program_error::ProgramError\l5 = ()\l6 = for<'a> fn(&'a pinocchio::program_error::ProgramError) {entrypoint::log_error}\l7 = (&pinocchio::program_error::ProgramError,)\l8 = bool\l9 = bool\l", style="filled", color=palegreen3];
    X960a47fdaee9926a_0 -> X960a47fdaee9926a_1 [label="1"];
    X960a47fdaee9926a_0 -> X960a47fdaee9926a_3 [label="0"];
    X960a47fdaee9926a_0 -> X960a47fdaee9926a_9 [label="other"];
    X960a47fdaee9926a_0 [label="9 <- Use(const bool)\l8 <- Use(const bool)\l3 <- Discriminant(1)\lSwitchInt mv(3)\l"];
    X960a47fdaee9926a_1 -> X960a47fdaee9926a_8 [label="Cleanup"];
    X960a47fdaee9926a_1 -> X960a47fdaee9926a_2 [label="5"];
    X960a47fdaee9926a_1 [label="4 <- & (1 as variant 1).0\lStorage Live _6\l6 <- Use(mv(2))\lStorage Live _7\l7 <- Tuple (cp(4))\lCall\l"];
    X960a47fdaee9926a_2 -> X960a47fdaee9926a_4;
    X960a47fdaee9926a_2 [label="Storage Dead _7\lStorage Dead _6\l0 <- Use(mv(1))\lGoto\l"];
    X960a47fdaee9926a_3 -> X960a47fdaee9926a_4 [label="0"];
    X960a47fdaee9926a_3 -> X960a47fdaee9926a_6 [label="other"];
    X960a47fdaee9926a_3 [label="9 <- Use(const bool)\l0 <- Use(mv(1))\lSwitchInt cp(8)\l"];
    X960a47fdaee9926a_4 [label="Return\l"];
    X960a47fdaee9926a_5 [label="Resume\l"];
    X960a47fdaee9926a_6 -> X960a47fdaee9926a_8 [label="Cleanup"];
    X960a47fdaee9926a_6 -> X960a47fdaee9926a_4;
    X960a47fdaee9926a_6 [label="Drop 2\l"];
    X960a47fdaee9926a_7 -> X960a47fdaee9926a_5;
    X960a47fdaee9926a_7 [label="Drop 1\l"];
    X960a47fdaee9926a_8 -> X960a47fdaee9926a_5 [label="0"];
    X960a47fdaee9926a_8 -> X960a47fdaee9926a_7 [label="other"];
    X960a47fdaee9926a_8 [label="SwitchInt cp(9)\l"];
    X960a47fdaee9926a_9 [label="Unreachable\l"];
  }
  X960a47fdaee9926a_1 -> Xf950bf27d0cf5c6c_0 [label="mv(6),mv(7)"];
  subgraph cluster_196 {
    label="core::result::Result::<pi\nnocchio::sysvars::rent::R\nent, \npinocchio::program_error:\n:ProgramError>::unwrap";
    style="filled";
    color=lightgray;
    node_197 [label="LOCALS\l0 = pinocchio::sysvars::rent::Rent\l1 = core::result::Result<pinocchio::sysvars::rent::Rent, pinocchio::program_error::ProgramError>\l2 = isize\l3 = pinocchio::program_error::ProgramError\l4 = !\l5 = &dyn core::fmt::Debug\l6 = &pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X3d82968b095936e7_0 -> X3d82968b095936e7_3 [label="0"];
    X3d82968b095936e7_0 -> X3d82968b095936e7_2 [label="1"];
    X3d82968b095936e7_0 -> X3d82968b095936e7_1 [label="other"];
    X3d82968b095936e7_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X3d82968b095936e7_1 [label="Unreachable\l"];
    X3d82968b095936e7_2 -> X3d82968b095936e7_4 [label="Cleanup"];
    X3d82968b095936e7_2 [label="Storage Live _3\l3 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l6 <- & 3\l5 <- Cast-PointerCoercion(Unsize) cp(6)\lCall\l"];
    X3d82968b095936e7_3 [label="0 <- Use(mv((1 as variant 0).0))\lReturn\l"];
    X3d82968b095936e7_4 -> X3d82968b095936e7_5;
    X3d82968b095936e7_4 [label="Drop 3\l"];
    X3d82968b095936e7_5 [label="Resume\l"];
  }
  X3d82968b095936e7_2 -> Xdd778da4886cf626_0 [label="const &str,mv(5)"];
  subgraph cluster_198 {
    label="core::result::Result::<bo\nol, \npinocchio::program_error:\n:ProgramError>::unwrap";
    style="filled";
    color=lightgray;
    node_199 [label="LOCALS\l0 = bool\l1 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l2 = isize\l3 = pinocchio::program_error::ProgramError\l4 = !\l5 = &dyn core::fmt::Debug\l6 = &pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X89be5f95c133d42a_0 -> X89be5f95c133d42a_3 [label="0"];
    X89be5f95c133d42a_0 -> X89be5f95c133d42a_2 [label="1"];
    X89be5f95c133d42a_0 -> X89be5f95c133d42a_1 [label="other"];
    X89be5f95c133d42a_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X89be5f95c133d42a_1 [label="Unreachable\l"];
    X89be5f95c133d42a_2 -> X89be5f95c133d42a_4 [label="Cleanup"];
    X89be5f95c133d42a_2 [label="Storage Live _3\l3 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l6 <- & 3\l5 <- Cast-PointerCoercion(Unsize) cp(6)\lCall\l"];
    X89be5f95c133d42a_3 [label="0 <- Use(mv((1 as variant 0).0))\lReturn\l"];
    X89be5f95c133d42a_4 -> X89be5f95c133d42a_5;
    X89be5f95c133d42a_4 [label="Drop 3\l"];
    X89be5f95c133d42a_5 [label="Resume\l"];
  }
  X89be5f95c133d42a_2 -> Xdd778da4886cf626_0 [label="const &str,mv(5)"];
  subgraph cluster_200 {
    label="core::panicking::assert_f\nailed::<&[u8; \n32], \n&[u8]>";
    style="filled";
    color=lightgray;
    node_201 [label="LOCALS\l0 = !\l1 = core::panicking::AssertKind\l2 = &&[u8; 32]\l3 = &&[u8]\l4 = core::option::Option<core::fmt::Arguments<'_>>\l5 = &dyn core::fmt::Debug\l6 = &&&[u8; 32]\l7 = &dyn core::fmt::Debug\l8 = &&&[u8]\l", style="filled", color=palegreen3];
    Xcfde3492e82f3a02_0 [label="Storage Live _5\l6 <- & 2\l5 <- Cast-PointerCoercion(Unsize) cp(6)\lStorage Live _7\l8 <- & 3\l7 <- Cast-PointerCoercion(Unsize) cp(8)\lCall\l"];
  }
  Xcfde3492e82f3a02_0 -> X1eb9e8a223d962a5_0 [label="mv(1),mv(5),mv(7),mv(4)"];
  subgraph cluster_202 {
    label="core::panicking::assert_f\nailed::<core::result::Res\nult<(), \npinocchio::program_error:\n:ProgramError>, \ncore::result::Result<(), \npinocchio::program_error:\n:ProgramError>>";
    style="filled";
    color=lightgray;
    node_203 [label="LOCALS\l0 = !\l1 = core::panicking::AssertKind\l2 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l3 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l4 = core::option::Option<core::fmt::Arguments<'_>>\l5 = &dyn core::fmt::Debug\l6 = &&core::result::Result<(), pinocchio::program_error::ProgramError>\l7 = &dyn core::fmt::Debug\l8 = &&core::result::Result<(), pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    X1badff0345f2ca99_0 [label="Storage Live _5\l6 <- & 2\l5 <- Cast-PointerCoercion(Unsize) cp(6)\lStorage Live _7\l8 <- & 3\l7 <- Cast-PointerCoercion(Unsize) cp(8)\lCall\l"];
  }
  X1badff0345f2ca99_0 -> X1eb9e8a223d962a5_0 [label="mv(1),mv(5),mv(7),mv(4)"];
  subgraph cluster_204 {
    label="core::panicking::assert_f\nailed::<u8, \nu8>";
    style="filled";
    color=lightgray;
    node_205 [label="LOCALS\l0 = !\l1 = core::panicking::AssertKind\l2 = &u8\l3 = &u8\l4 = core::option::Option<core::fmt::Arguments<'_>>\l5 = &dyn core::fmt::Debug\l6 = &&u8\l7 = &dyn core::fmt::Debug\l8 = &&u8\l", style="filled", color=palegreen3];
    Xc058ee6e6b6d85a8_0 [label="Storage Live _5\l6 <- & 2\l5 <- Cast-PointerCoercion(Unsize) cp(6)\lStorage Live _7\l8 <- & 3\l7 <- Cast-PointerCoercion(Unsize) cp(8)\lCall\l"];
  }
  Xc058ee6e6b6d85a8_0 -> X1eb9e8a223d962a5_0 [label="mv(1),mv(5),mv(7),mv(4)"];
  subgraph cluster_206 {
    label="<pinocchio::program_error\n::ProgramError \nas \ncore::convert::Into<u64>>\n::into";
    style="filled";
    color=lightgray;
    node_207 [label="LOCALS\l0 = u64\l1 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X9b7d50e3fbab8ea3_0 -> X9b7d50e3fbab8ea3_1 [label="0"];
    X9b7d50e3fbab8ea3_0 [label="Call\l"];
    X9b7d50e3fbab8ea3_1 [label="Return\l"];
  }
  X9b7d50e3fbab8ea3_0 -> X7a4a77babfb83a53_0 [label="mv(1)"];
  subgraph cluster_208 {
    label="<core::slice::Iter<'_, \nu8> \nas \ncore::iter::IntoIterator>\n::into_iter";
    style="filled";
    color=lightgray;
    node_209 [label="LOCALS\l0 = core::slice::Iter<'_, u8>\l1 = core::slice::Iter<'_, u8>\l", style="filled", color=palegreen3];
    X9125598ebc1c3df8_0 [label="0 <- Use(mv(1))\lReturn\l"];
  }
  subgraph cluster_210 {
    label="<core::ops::Range<usize> \nas \ncore::iter::IntoIterator>\n::into_iter";
    style="filled";
    color=lightgray;
    node_211 [label="LOCALS\l0 = core::ops::Range<usize>\l1 = core::ops::Range<usize>\l", style="filled", color=palegreen3];
    Xe9e3ff72e55a5f27_0 [label="0 <- Use(mv(1))\lReturn\l"];
  }
  subgraph cluster_212 {
    label="<u8 \nas \ncore::array::equality::Sp\necArrayEq<u8, \n32>>::spec_eq";
    style="filled";
    color=lightgray;
    node_213 [label="LOCALS\l0 = bool\l1 = &[u8; 32]\l2 = &[u8; 32]\l3 = &[u8; 32]\l", style="filled", color=palegreen3];
    Xb51f0a1884dba91f_0 -> Xb51f0a1884dba91f_1 [label="0"];
    Xb51f0a1884dba91f_0 [label="Storage Live _3\l3 <- Cast-Transmute cp(2)\lCall\l"];
    Xb51f0a1884dba91f_1 [label="Storage Dead _3\lReturn\l"];
  }
  Xb51f0a1884dba91f_0 -> X43ad75e732d0e131_0 [label="mv(1),mv(3)"];
  subgraph cluster_214 {
    label="<u8 \nas \ncore::array::equality::Sp\necArrayEq<u8, \n32>>::spec_ne";
    style="filled";
    color=lightgray;
    node_215 [label="LOCALS\l0 = bool\l1 = &[u8; 32]\l2 = &[u8; 32]\l3 = bool\l4 = &[u8; 32]\l", style="filled", color=palegreen3];
    Xf0a84b1dfc729bb8_0 -> Xf0a84b1dfc729bb8_1 [label="3"];
    Xf0a84b1dfc729bb8_0 [label="Storage Live _3\lStorage Live _4\l4 <- Cast-Transmute cp(2)\lCall\l"];
    Xf0a84b1dfc729bb8_1 [label="Storage Dead _4\l0 <- Not(mv(3))\lStorage Dead _3\lReturn\l"];
  }
  Xf0a84b1dfc729bb8_0 -> X43ad75e732d0e131_0 [label="mv(1),mv(4)"];
  subgraph cluster_216 {
    label="<core::result::Result<(),\n \npinocchio::program_error:\n:ProgramError> \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_217 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l2 = &mut core::fmt::Formatter<'_>\l3 = isize\l4 = &()\l5 = &dyn core::fmt::Debug\l6 = &&()\l7 = &pinocchio::program_error::ProgramError\l8 = &dyn core::fmt::Debug\l9 = &&pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X43f71b6e2d20bf4b_0 -> X43f71b6e2d20bf4b_3 [label="0"];
    X43f71b6e2d20bf4b_0 -> X43f71b6e2d20bf4b_2 [label="1"];
    X43f71b6e2d20bf4b_0 -> X43f71b6e2d20bf4b_1 [label="other"];
    X43f71b6e2d20bf4b_0 [label="3 <- Discriminant((*1))\lSwitchInt mv(3)\l"];
    X43f71b6e2d20bf4b_1 [label="Unreachable\l"];
    X43f71b6e2d20bf4b_2 -> X43f71b6e2d20bf4b_5 [label="0"];
    X43f71b6e2d20bf4b_2 [label="Storage Live _7\l7 <- & ((*1) as variant 1).0\lStorage Live _8\l9 <- & 7\l8 <- Cast-PointerCoercion(Unsize) cp(9)\lCall\l"];
    X43f71b6e2d20bf4b_3 -> X43f71b6e2d20bf4b_4 [label="0"];
    X43f71b6e2d20bf4b_3 [label="Storage Live _4\l4 <- & ((*1) as variant 0).0\lStorage Live _5\l6 <- & 4\l5 <- Cast-PointerCoercion(Unsize) cp(6)\lCall\l"];
    X43f71b6e2d20bf4b_4 -> X43f71b6e2d20bf4b_6;
    X43f71b6e2d20bf4b_4 [label="Storage Dead _5\lStorage Dead _4\lGoto\l"];
    X43f71b6e2d20bf4b_5 -> X43f71b6e2d20bf4b_6;
    X43f71b6e2d20bf4b_5 [label="Storage Dead _8\lStorage Dead _7\lGoto\l"];
    X43f71b6e2d20bf4b_6 [label="Return\l"];
  }
  X43f71b6e2d20bf4b_2 -> X85724fedaf4a5444_0 [label="mv(2),const &str,mv(8)"];
  X43f71b6e2d20bf4b_3 -> X85724fedaf4a5444_0 [label="mv(2),const &str,mv(5)"];
  subgraph cluster_218 {
    label="<core::result::Result<(),\n \npinocchio::program_error:\n:ProgramError> \nas \ncore::cmp::PartialEq>::eq";
    style="filled";
    color=lightgray;
    node_219 [label="LOCALS\l0 = bool\l1 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l2 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l3 = isize\l4 = isize\l5 = bool\l6 = isize\l7 = isize\l8 = isize\l9 = &()\l10 = &()\l11 = &&()\l12 = &&()\l13 = &pinocchio::program_error::ProgramError\l14 = &pinocchio::program_error::ProgramError\l15 = &&pinocchio::program_error::ProgramError\l16 = &&pinocchio::program_error::ProgramError\l17 = bool\l18 = bool\l", style="filled", color=palegreen3];
    X9d133aa780502b33_0 -> X9d133aa780502b33_2 [label="0"];
    X9d133aa780502b33_0 -> X9d133aa780502b33_1 [label="other"];
    X9d133aa780502b33_0 [label="3 <- Discriminant((*1))\l4 <- Discriminant((*2))\lStorage Live _5\l5 <- Eq(cp(3), cp(4))\lSwitchInt mv(5)\l"];
    X9d133aa780502b33_1 -> X9d133aa780502b33_3 [label="0"];
    X9d133aa780502b33_1 -> X9d133aa780502b33_4 [label="1"];
    X9d133aa780502b33_1 -> X9d133aa780502b33_8 [label="other"];
    X9d133aa780502b33_1 [label="8 <- Discriminant((*1))\lSwitchInt mv(8)\l"];
    X9d133aa780502b33_2 -> X9d133aa780502b33_5;
    X9d133aa780502b33_2 [label="0 <- Use(const bool)\lGoto\l"];
    X9d133aa780502b33_3 -> X9d133aa780502b33_7 [label="0"];
    X9d133aa780502b33_3 [label="6 <- Discriminant((*2))\l18 <- Eq(cp(6), const ?_isize)\lIntr: Assume mv(18)\l9 <- & ((*1) as variant 0).0\l10 <- & ((*2) as variant 0).0\lStorage Live _11\l11 <- & 9\lStorage Live _12\l12 <- & 10\lCall\l"];
    X9d133aa780502b33_4 -> X9d133aa780502b33_6 [label="0"];
    X9d133aa780502b33_4 [label="7 <- Discriminant((*2))\l17 <- Eq(cp(7), const ?_isize)\lIntr: Assume mv(17)\l13 <- & ((*1) as variant 1).0\l14 <- & ((*2) as variant 1).0\lStorage Live _15\l15 <- & 13\lStorage Live _16\l16 <- & 14\lCall\l"];
    X9d133aa780502b33_5 [label="Storage Dead _5\lReturn\l"];
    X9d133aa780502b33_6 -> X9d133aa780502b33_5;
    X9d133aa780502b33_6 [label="Storage Dead _16\lStorage Dead _15\lGoto\l"];
    X9d133aa780502b33_7 -> X9d133aa780502b33_5;
    X9d133aa780502b33_7 [label="Storage Dead _12\lStorage Dead _11\lGoto\l"];
    X9d133aa780502b33_8 [label="Unreachable\l"];
  }
  X9d133aa780502b33_3 -> Xd7393c030c57f210_0 [label="cp(9),cp(10)"];
  X9d133aa780502b33_4 -> Xb4e4aaf53eb6efb_0 [label="cp(13),cp(14)"];
  subgraph cluster_220 {
    label="<pinocchio::account_info:\n:AccountInfo \nas \ncore::clone::Clone>::clon\ne";
    style="filled";
    color=lightgray;
    node_221 [label="LOCALS\l0 = pinocchio::account_info::AccountInfo\l1 = &pinocchio::account_info::AccountInfo\l2 = *mut pinocchio::account_info::Account\l3 = &*mut pinocchio::account_info::Account\l", style="filled", color=palegreen3];
    Xdf6433a5e6c64a8f_0 [label="3 <- & (*1).0\l2 <- Use(cp((*3)))\l0 <- Adt{0} (mv(2))\lReturn\l"];
  }
  subgraph cluster_222 {
    label="<pinocchio::program_error\n::ProgramError \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_223 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &pinocchio::program_error::ProgramError\l2 = &mut core::fmt::Formatter<'_>\l3 = isize\l4 = &u32\l5 = &str\l6 = &dyn core::fmt::Debug\l7 = &&u32\l8 = &str\l9 = &str\l10 = &str\l11 = &str\l12 = &str\l13 = &str\l14 = &str\l15 = &str\l16 = &str\l17 = &str\l18 = &str\l19 = &str\l20 = &str\l21 = &str\l22 = &str\l23 = &str\l24 = &str\l25 = &str\l26 = &str\l27 = &str\l28 = &str\l29 = &str\l30 = &str\l31 = &str\l32 = &str\l", style="filled", color=palegreen3];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_27 [label="0"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_26 [label="1"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_25 [label="2"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_24 [label="3"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_23 [label="4"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_22 [label="5"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_21 [label="6"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_20 [label="7"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_19 [label="8"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_18 [label="9"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_17 [label="10"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_16 [label="11"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_15 [label="12"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_14 [label="13"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_13 [label="14"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_12 [label="15"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_11 [label="16"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_10 [label="17"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_9 [label="18"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_8 [label="19"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_7 [label="20"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_6 [label="21"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_5 [label="22"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_4 [label="23"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_3 [label="24"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_2 [label="25"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_1 [label="other"];
    X4d96ea5120bb9c65_0 [label="3 <- Discriminant((*1))\lSwitchInt mv(3)\l"];
    X4d96ea5120bb9c65_1 [label="Unreachable\l"];
    X4d96ea5120bb9c65_2 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_2 [label="32 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_3 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_3 [label="31 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_4 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_4 [label="30 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_5 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_5 [label="29 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_6 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_6 [label="28 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_7 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_7 [label="27 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_8 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_8 [label="26 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_9 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_9 [label="25 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_10 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_10 [label="24 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_11 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_11 [label="23 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_12 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_12 [label="22 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_13 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_13 [label="21 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_14 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_14 [label="20 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_15 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_15 [label="19 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_16 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_16 [label="18 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_17 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_17 [label="17 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_18 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_18 [label="16 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_19 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_19 [label="15 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_20 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_20 [label="14 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_21 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_21 [label="13 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_22 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_22 [label="12 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_23 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_23 [label="11 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_24 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_24 [label="10 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_25 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_25 [label="9 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_26 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_26 [label="8 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_27 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_27 [label="4 <- & ((*1) as variant 0).0\l5 <- Use(const &str)\l7 <- & 4\l6 <- Cast-PointerCoercion(Unsize) cp(7)\lCall\l"];
    X4d96ea5120bb9c65_28 [label="Return\l"];
  }
  X4d96ea5120bb9c65_2 -> Xb93f0288e0006b54_0 [label="cp(2),mv(32)"];
  X4d96ea5120bb9c65_3 -> Xb93f0288e0006b54_0 [label="cp(2),mv(31)"];
  X4d96ea5120bb9c65_4 -> Xb93f0288e0006b54_0 [label="cp(2),mv(30)"];
  X4d96ea5120bb9c65_5 -> Xb93f0288e0006b54_0 [label="cp(2),mv(29)"];
  X4d96ea5120bb9c65_6 -> Xb93f0288e0006b54_0 [label="cp(2),mv(28)"];
  X4d96ea5120bb9c65_7 -> Xb93f0288e0006b54_0 [label="cp(2),mv(27)"];
  X4d96ea5120bb9c65_8 -> Xb93f0288e0006b54_0 [label="cp(2),mv(26)"];
  X4d96ea5120bb9c65_9 -> Xb93f0288e0006b54_0 [label="cp(2),mv(25)"];
  X4d96ea5120bb9c65_10 -> Xb93f0288e0006b54_0 [label="cp(2),mv(24)"];
  X4d96ea5120bb9c65_11 -> Xb93f0288e0006b54_0 [label="cp(2),mv(23)"];
  X4d96ea5120bb9c65_12 -> Xb93f0288e0006b54_0 [label="cp(2),mv(22)"];
  X4d96ea5120bb9c65_13 -> Xb93f0288e0006b54_0 [label="cp(2),mv(21)"];
  X4d96ea5120bb9c65_14 -> Xb93f0288e0006b54_0 [label="cp(2),mv(20)"];
  X4d96ea5120bb9c65_15 -> Xb93f0288e0006b54_0 [label="cp(2),mv(19)"];
  X4d96ea5120bb9c65_16 -> Xb93f0288e0006b54_0 [label="cp(2),mv(18)"];
  X4d96ea5120bb9c65_17 -> Xb93f0288e0006b54_0 [label="cp(2),mv(17)"];
  X4d96ea5120bb9c65_18 -> Xb93f0288e0006b54_0 [label="cp(2),mv(16)"];
  X4d96ea5120bb9c65_19 -> Xb93f0288e0006b54_0 [label="cp(2),mv(15)"];
  X4d96ea5120bb9c65_20 -> Xb93f0288e0006b54_0 [label="cp(2),mv(14)"];
  X4d96ea5120bb9c65_21 -> Xb93f0288e0006b54_0 [label="cp(2),mv(13)"];
  X4d96ea5120bb9c65_22 -> Xb93f0288e0006b54_0 [label="cp(2),mv(12)"];
  X4d96ea5120bb9c65_23 -> Xb93f0288e0006b54_0 [label="cp(2),mv(11)"];
  X4d96ea5120bb9c65_24 -> Xb93f0288e0006b54_0 [label="cp(2),mv(10)"];
  X4d96ea5120bb9c65_25 -> Xb93f0288e0006b54_0 [label="cp(2),mv(9)"];
  X4d96ea5120bb9c65_26 -> Xb93f0288e0006b54_0 [label="cp(2),mv(8)"];
  X4d96ea5120bb9c65_27 -> X85724fedaf4a5444_0 [label="cp(2),mv(5),mv(6)"];
  subgraph cluster_224 {
    label="<usize \nas \ncore::slice::SliceIndex<[\ncore::mem::MaybeUninit<pi\nnocchio::account_info::Ac\ncountInfo>]>>::get_unchec\nked";
    style="filled";
    color=lightgray;
    node_225 [label="LOCALS\l0 = *const core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l1 = usize\l2 = *const [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l3 = bool\l4 = ()\l5 = usize\l6 = bool\l7 = usize\l8 = *const core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l", style="filled", color=palegreen3];
    Xf7c0e3c61151eb20_0 -> Xf7c0e3c61151eb20_3 [label="0"];
    Xf7c0e3c61151eb20_0 -> Xf7c0e3c61151eb20_1 [label="other"];
    Xf7c0e3c61151eb20_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    Xf7c0e3c61151eb20_1 -> Xf7c0e3c61151eb20_2 [label="4"];
    Xf7c0e3c61151eb20_1 [label="Storage Live _5\l5 <- PtrMetadata(cp(2))\lCall\l"];
    Xf7c0e3c61151eb20_2 -> Xf7c0e3c61151eb20_3;
    Xf7c0e3c61151eb20_2 [label="Storage Dead _5\lGoto\l"];
    Xf7c0e3c61151eb20_3 [label="Storage Dead _3\lStorage Live _6\lStorage Live _7\l7 <- PtrMetadata(cp(2))\l6 <- Lt(cp(1), mv(7))\lStorage Dead _7\lIntr: Assume mv(6)\lStorage Dead _6\lStorage Live _8\l8 <- Cast-PtrToPtr cp(2)\l0 <- Offset(cp(8), cp(1))\lStorage Dead _8\lReturn\l"];
  }
  Xf7c0e3c61151eb20_1 -> Xfa2081497ee34a_0 [label="cp(1),mv(5)"];
  subgraph cluster_226 {
    label="<usize \nas \ncore::slice::SliceIndex<[\nu8]>>::get_unchecked";
    style="filled";
    color=lightgray;
    node_227 [label="LOCALS\l0 = *const u8\l1 = usize\l2 = *const [u8]\l3 = bool\l4 = ()\l5 = usize\l6 = bool\l7 = usize\l8 = *const u8\l", style="filled", color=palegreen3];
    X7bd4403f8d22bbb7_0 -> X7bd4403f8d22bbb7_3 [label="0"];
    X7bd4403f8d22bbb7_0 -> X7bd4403f8d22bbb7_1 [label="other"];
    X7bd4403f8d22bbb7_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    X7bd4403f8d22bbb7_1 -> X7bd4403f8d22bbb7_2 [label="4"];
    X7bd4403f8d22bbb7_1 [label="Storage Live _5\l5 <- PtrMetadata(cp(2))\lCall\l"];
    X7bd4403f8d22bbb7_2 -> X7bd4403f8d22bbb7_3;
    X7bd4403f8d22bbb7_2 [label="Storage Dead _5\lGoto\l"];
    X7bd4403f8d22bbb7_3 [label="Storage Dead _3\lStorage Live _6\lStorage Live _7\l7 <- PtrMetadata(cp(2))\l6 <- Lt(cp(1), mv(7))\lStorage Dead _7\lIntr: Assume mv(6)\lStorage Dead _6\lStorage Live _8\l8 <- Cast-PtrToPtr cp(2)\l0 <- Offset(cp(8), cp(1))\lStorage Dead _8\lReturn\l"];
  }
  X7bd4403f8d22bbb7_1 -> Xfa2081497ee34a_0 [label="cp(1),mv(5)"];
  subgraph cluster_228 {
    label="<usize \nas \ncore::slice::SliceIndex<[\nT]>>::get_unchecked::prec\nondition_check";
    style="filled";
    color=lightgray;
    node_229 [label="LOCALS\l0 = ()\l1 = usize\l2 = usize\l3 = bool\l4 = !\l", style="filled", color=palegreen3];
    Xfa2081497ee34a_0 -> Xfa2081497ee34a_2 [label="0"];
    Xfa2081497ee34a_0 -> Xfa2081497ee34a_1 [label="other"];
    Xfa2081497ee34a_0 [label="Storage Live _3\l3 <- Lt(cp(1), cp(2))\lSwitchInt mv(3)\l"];
    Xfa2081497ee34a_1 [label="Storage Dead _3\lReturn\l"];
    Xfa2081497ee34a_2 [label="Call\l"];
  }
  Xfa2081497ee34a_2 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_230 {
    label="<core::result::Result<boo\nl, \npinocchio::program_error:\n:ProgramError> \nas \ncore::ops::Try>::branch";
    style="filled";
    color=lightgray;
    node_231 [label="LOCALS\l0 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, bool>\l1 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l2 = isize\l3 = bool\l4 = pinocchio::program_error::ProgramError\l5 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    X94faba497d3a8d24_0 -> X94faba497d3a8d24_3 [label="0"];
    X94faba497d3a8d24_0 -> X94faba497d3a8d24_2 [label="1"];
    X94faba497d3a8d24_0 -> X94faba497d3a8d24_1 [label="other"];
    X94faba497d3a8d24_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X94faba497d3a8d24_1 [label="Unreachable\l"];
    X94faba497d3a8d24_2 -> X94faba497d3a8d24_4;
    X94faba497d3a8d24_2 [label="4 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l5 <- Adt{1} (cp(4))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    X94faba497d3a8d24_3 -> X94faba497d3a8d24_4;
    X94faba497d3a8d24_3 [label="3 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(3))\lGoto\l"];
    X94faba497d3a8d24_4 [label="Return\l"];
  }
  subgraph cluster_232 {
    label="<core::result::Result<pin\nocchio::sysvars::rent::Re\nnt, \npinocchio::program_error:\n:ProgramError> \nas \ncore::ops::Try>::branch";
    style="filled";
    color=lightgray;
    node_233 [label="LOCALS\l0 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, pinocchio::sysvars::rent::Rent>\l1 = core::result::Result<pinocchio::sysvars::rent::Rent, pinocchio::program_error::ProgramError>\l2 = isize\l3 = pinocchio::sysvars::rent::Rent\l4 = pinocchio::program_error::ProgramError\l5 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    Xf4d730ffcb43b968_0 -> Xf4d730ffcb43b968_3 [label="0"];
    Xf4d730ffcb43b968_0 -> Xf4d730ffcb43b968_2 [label="1"];
    Xf4d730ffcb43b968_0 -> Xf4d730ffcb43b968_1 [label="other"];
    Xf4d730ffcb43b968_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    Xf4d730ffcb43b968_1 [label="Unreachable\l"];
    Xf4d730ffcb43b968_2 -> Xf4d730ffcb43b968_4;
    Xf4d730ffcb43b968_2 [label="4 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l5 <- Adt{1} (cp(4))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    Xf4d730ffcb43b968_3 -> Xf4d730ffcb43b968_4;
    Xf4d730ffcb43b968_3 [label="3 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(3))\lGoto\l"];
    Xf4d730ffcb43b968_4 [label="Return\l"];
  }
  subgraph cluster_234 {
    label="<core::result::Result<&pi\nnocchio::sysvars::rent::R\nent, \npinocchio::program_error:\n:ProgramError> \nas \ncore::ops::Try>::branch";
    style="filled";
    color=lightgray;
    node_235 [label="LOCALS\l0 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, &pinocchio::sysvars::rent::Rent>\l1 = core::result::Result<&pinocchio::sysvars::rent::Rent, pinocchio::program_error::ProgramError>\l2 = isize\l3 = &pinocchio::sysvars::rent::Rent\l4 = pinocchio::program_error::ProgramError\l5 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    X2b904375dbbb0af7_0 -> X2b904375dbbb0af7_3 [label="0"];
    X2b904375dbbb0af7_0 -> X2b904375dbbb0af7_2 [label="1"];
    X2b904375dbbb0af7_0 -> X2b904375dbbb0af7_1 [label="other"];
    X2b904375dbbb0af7_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X2b904375dbbb0af7_1 [label="Unreachable\l"];
    X2b904375dbbb0af7_2 -> X2b904375dbbb0af7_4;
    X2b904375dbbb0af7_2 [label="4 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l5 <- Adt{1} (cp(4))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    X2b904375dbbb0af7_3 -> X2b904375dbbb0af7_4;
    X2b904375dbbb0af7_3 [label="3 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(3))\lGoto\l"];
    X2b904375dbbb0af7_4 [label="Return\l"];
  }
  subgraph cluster_236 {
    label="<core::result::Result<&mu\nt \nspl_token_interface::stat\ne::mint::Mint, \npinocchio::program_error:\n:ProgramError> \nas \ncore::ops::Try>::branch";
    style="filled";
    color=lightgray;
    node_237 [label="LOCALS\l0 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, &mut spl_token_interface::state::mint::Mint>\l1 = core::result::Result<&mut spl_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l2 = isize\l3 = &mut spl_token_interface::state::mint::Mint\l4 = pinocchio::program_error::ProgramError\l5 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    Xfdd8ae4a78e336d8_0 -> Xfdd8ae4a78e336d8_3 [label="0"];
    Xfdd8ae4a78e336d8_0 -> Xfdd8ae4a78e336d8_2 [label="1"];
    Xfdd8ae4a78e336d8_0 -> Xfdd8ae4a78e336d8_1 [label="other"];
    Xfdd8ae4a78e336d8_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    Xfdd8ae4a78e336d8_1 [label="Unreachable\l"];
    Xfdd8ae4a78e336d8_2 -> Xfdd8ae4a78e336d8_4;
    Xfdd8ae4a78e336d8_2 [label="4 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l5 <- Adt{1} (cp(4))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    Xfdd8ae4a78e336d8_3 -> Xfdd8ae4a78e336d8_4;
    Xfdd8ae4a78e336d8_3 [label="3 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(3))\lGoto\l"];
    Xfdd8ae4a78e336d8_4 [label="Return\l"];
  }
  subgraph cluster_238 {
    label="<pinocchio::program_error\n::ProgramError \nas \ncore::cmp::PartialEq>::eq";
    style="filled";
    color=lightgray;
    node_239 [label="LOCALS\l0 = bool\l1 = &pinocchio::program_error::ProgramError\l2 = &pinocchio::program_error::ProgramError\l3 = isize\l4 = isize\l5 = bool\l6 = (&pinocchio::program_error::ProgramError, &pinocchio::program_error::ProgramError)\l7 = isize\l8 = isize\l9 = &u32\l10 = &u32\l11 = &&u32\l12 = &&u32\l13 = &pinocchio::program_error::ProgramError\l14 = &pinocchio::program_error::ProgramError\l15 = &pinocchio::program_error::ProgramError\l16 = &pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    Xb4e4aaf53eb6efb_0 -> Xb4e4aaf53eb6efb_2 [label="0"];
    Xb4e4aaf53eb6efb_0 -> Xb4e4aaf53eb6efb_1 [label="other"];
    Xb4e4aaf53eb6efb_0 [label="3 <- Discriminant((*1))\l4 <- Discriminant((*2))\l5 <- Eq(cp(3), cp(4))\lSwitchInt mv(5)\l"];
    Xb4e4aaf53eb6efb_1 -> Xb4e4aaf53eb6efb_4 [label="0"];
    Xb4e4aaf53eb6efb_1 -> Xb4e4aaf53eb6efb_3 [label="other"];
    Xb4e4aaf53eb6efb_1 [label="6 <- Tuple (cp(1), cp(2))\l13 <- CopyForDeref(6.0)\l8 <- Discriminant((*13))\lSwitchInt mv(8)\l"];
    Xb4e4aaf53eb6efb_2 -> Xb4e4aaf53eb6efb_6;
    Xb4e4aaf53eb6efb_2 [label="0 <- Use(const bool)\lGoto\l"];
    Xb4e4aaf53eb6efb_3 -> Xb4e4aaf53eb6efb_6;
    Xb4e4aaf53eb6efb_3 [label="0 <- Use(const bool)\lGoto\l"];
    Xb4e4aaf53eb6efb_4 -> Xb4e4aaf53eb6efb_5 [label="0"];
    Xb4e4aaf53eb6efb_4 -> Xb4e4aaf53eb6efb_3 [label="other"];
    Xb4e4aaf53eb6efb_4 [label="14 <- CopyForDeref(6.1)\l7 <- Discriminant((*14))\lSwitchInt mv(7)\l"];
    Xb4e4aaf53eb6efb_5 -> Xb4e4aaf53eb6efb_6 [label="0"];
    Xb4e4aaf53eb6efb_5 [label="15 <- CopyForDeref(6.0)\l9 <- & ((*15) as variant 0).0\l16 <- CopyForDeref(6.1)\l10 <- & ((*16) as variant 0).0\l11 <- & 9\l12 <- & 10\lCall\l"];
    Xb4e4aaf53eb6efb_6 [label="Return\l"];
  }
  Xb4e4aaf53eb6efb_5 -> X1db5e3317e89911b_0 [label="mv(11),mv(12)"];
  subgraph cluster_240 {
    label="<core::ops::Range<usize> \nas \ncore::iter::range::RangeI\nteratorImpl>::spec_next";
    style="filled";
    color=lightgray;
    node_241 [label="LOCALS\l0 = core::option::Option<usize>\l1 = &mut core::ops::Range<usize>\l2 = bool\l3 = &usize\l4 = &usize\l5 = usize\l6 = usize\l", style="filled", color=palegreen3];
    X76d9451f9bf287e8_0 -> X76d9451f9bf287e8_1 [label="2"];
    X76d9451f9bf287e8_0 [label="Storage Live _2\lStorage Live _3\l3 <- & (*1).0\lStorage Live _4\l4 <- & (*1).1\lCall\l"];
    X76d9451f9bf287e8_1 -> X76d9451f9bf287e8_4 [label="0"];
    X76d9451f9bf287e8_1 -> X76d9451f9bf287e8_2 [label="other"];
    X76d9451f9bf287e8_1 [label="SwitchInt mv(2)\l"];
    X76d9451f9bf287e8_2 -> X76d9451f9bf287e8_3 [label="6"];
    X76d9451f9bf287e8_2 [label="Storage Dead _4\lStorage Dead _3\l5 <- Use(cp((*1).0))\lStorage Live _6\lCall\l"];
    X76d9451f9bf287e8_3 -> X76d9451f9bf287e8_5;
    X76d9451f9bf287e8_3 [label="(*1).0 <- Use(mv(6))\lStorage Dead _6\l0 <- Adt{1} (cp(5))\lGoto\l"];
    X76d9451f9bf287e8_4 -> X76d9451f9bf287e8_5;
    X76d9451f9bf287e8_4 [label="Storage Dead _4\lStorage Dead _3\l0 <- Adt{0} ()\lGoto\l"];
    X76d9451f9bf287e8_5 [label="Storage Dead _2\lReturn\l"];
  }
  X76d9451f9bf287e8_0 -> Xb4d458fe7af2393d_0 [label="mv(3),mv(4)"];
  X76d9451f9bf287e8_2 -> Xf98c0f07694c6176_0 [label="cp(5),const ?_usize"];
  subgraph cluster_242 {
    label="<pinocchio::program_error\n::ProgramError \nas \npinocchio::program_error:\n:ToStr>::to_str::<spl_tok\nen_interface::error::Toke\nnError>";
    style="filled";
    color=lightgray;
    node_243 [label="LOCALS\l0 = &str\l1 = &pinocchio::program_error::ProgramError\l2 = isize\l3 = &u32\l4 = core::result::Result<spl_token_interface::error::TokenError, pinocchio::program_error::ProgramError>\l5 = u32\l6 = isize\l7 = spl_token_interface::error::TokenError\l8 = &spl_token_interface::error::TokenError\l9 = bool\l10 = isize\l11 = isize\l", style="filled", color=palegreen3];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_27 [label="0"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_26 [label="1"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_25 [label="2"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_24 [label="3"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_23 [label="4"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_22 [label="5"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_21 [label="6"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_20 [label="7"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_19 [label="8"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_18 [label="9"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_17 [label="10"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_16 [label="11"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_15 [label="12"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_14 [label="13"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_13 [label="14"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_12 [label="15"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_11 [label="16"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_10 [label="17"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_9 [label="18"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_8 [label="19"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_7 [label="20"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_6 [label="21"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_5 [label="22"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_4 [label="23"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_3 [label="24"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_2 [label="25"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_1 [label="other"];
    X5de8bd844887fb1f_0 [label="9 <- Use(const bool)\l2 <- Discriminant((*1))\lSwitchInt mv(2)\l"];
    X5de8bd844887fb1f_1 [label="Unreachable\l"];
    X5de8bd844887fb1f_2 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_2 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_3 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_3 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_4 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_4 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_5 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_5 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_6 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_6 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_7 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_7 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_8 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_8 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_9 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_9 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_10 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_10 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_11 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_11 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_12 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_12 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_13 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_13 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_14 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_14 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_15 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_15 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_16 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_16 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_17 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_17 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_18 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_18 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_19 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_19 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_20 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_20 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_21 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_21 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_22 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_22 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_23 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_23 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_24 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_24 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_25 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_25 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_26 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_26 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_27 -> X5de8bd844887fb1f_28 [label="4"];
    X5de8bd844887fb1f_27 [label="3 <- & ((*1) as variant 0).0\l5 <- Use(cp((*3)))\l9 <- Use(const bool)\lCall\l"];
    X5de8bd844887fb1f_28 -> X5de8bd844887fb1f_29 [label="0"];
    X5de8bd844887fb1f_28 -> X5de8bd844887fb1f_31 [label="1"];
    X5de8bd844887fb1f_28 -> X5de8bd844887fb1f_1 [label="other"];
    X5de8bd844887fb1f_28 [label="6 <- Discriminant(4)\lSwitchInt mv(6)\l"];
    X5de8bd844887fb1f_29 -> X5de8bd844887fb1f_33 [label="Cleanup"];
    X5de8bd844887fb1f_29 -> X5de8bd844887fb1f_30 [label="0"];
    X5de8bd844887fb1f_29 [label="9 <- Use(const bool)\l7 <- Use(mv((4 as variant 0).0))\l8 <- & 7\lCall\l"];
    X5de8bd844887fb1f_30 -> X5de8bd844887fb1f_41 [label="Cleanup"];
    X5de8bd844887fb1f_30 -> X5de8bd844887fb1f_39;
    X5de8bd844887fb1f_30 [label="Drop 7\l"];
    X5de8bd844887fb1f_31 -> X5de8bd844887fb1f_39;
    X5de8bd844887fb1f_31 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_32 [label="Return\l"];
    X5de8bd844887fb1f_33 -> X5de8bd844887fb1f_41;
    X5de8bd844887fb1f_33 [label="Drop 7\l"];
    X5de8bd844887fb1f_34 [label="Resume\l"];
    X5de8bd844887fb1f_35 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_35 [label="9 <- Use(const bool)\lGoto\l"];
    X5de8bd844887fb1f_36 -> X5de8bd844887fb1f_35 [label="0"];
    X5de8bd844887fb1f_36 -> X5de8bd844887fb1f_37 [label="other"];
    X5de8bd844887fb1f_36 [label="SwitchInt cp(9)\l"];
    X5de8bd844887fb1f_37 -> X5de8bd844887fb1f_35;
    X5de8bd844887fb1f_37 [label="Drop (4 as variant 0).0\l"];
    X5de8bd844887fb1f_38 -> X5de8bd844887fb1f_35;
    X5de8bd844887fb1f_38 [label="Drop 4\l"];
    X5de8bd844887fb1f_39 -> X5de8bd844887fb1f_36 [label="0"];
    X5de8bd844887fb1f_39 -> X5de8bd844887fb1f_38 [label="1"];
    X5de8bd844887fb1f_39 -> X5de8bd844887fb1f_1 [label="other"];
    X5de8bd844887fb1f_39 [label="10 <- Discriminant(4)\lSwitchInt mv(10)\l"];
    X5de8bd844887fb1f_40 -> X5de8bd844887fb1f_34;
    X5de8bd844887fb1f_40 [label="Drop 4\l"];
    X5de8bd844887fb1f_41 -> X5de8bd844887fb1f_34 [label="0"];
    X5de8bd844887fb1f_41 -> X5de8bd844887fb1f_40 [label="other"];
    X5de8bd844887fb1f_41 [label="11 <- Discriminant(4)\lSwitchInt mv(11)\l"];
  }
  X5de8bd844887fb1f_27 -> Xd6b56047a80c2f44_0 [label="mv(5)"];
  X5de8bd844887fb1f_29 -> Xd6b5cc134d800e1_0 [label="mv(8)"];
  subgraph cluster_244 {
    label="<spl_token_interface::err\nor::TokenError \nas \npinocchio::program_error:\n:ToStr>::to_str::<spl_tok\nen_interface::error::Toke\nnError>";
    style="filled";
    color=lightgray;
    node_245 [label="LOCALS\l0 = &str\l1 = &spl_token_interface::error::TokenError\l2 = isize\l", style="filled", color=palegreen3];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_21 [label="0"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_20 [label="1"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_19 [label="2"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_18 [label="3"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_17 [label="4"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_16 [label="5"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_15 [label="6"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_14 [label="7"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_13 [label="8"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_12 [label="9"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_11 [label="10"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_10 [label="11"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_9 [label="12"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_8 [label="13"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_7 [label="14"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_6 [label="15"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_5 [label="16"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_4 [label="17"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_3 [label="18"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_2 [label="19"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_1 [label="other"];
    Xd6b5cc134d800e1_0 [label="2 <- Discriminant((*1))\lSwitchInt mv(2)\l"];
    Xd6b5cc134d800e1_1 [label="Unreachable\l"];
    Xd6b5cc134d800e1_2 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_2 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_3 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_3 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_4 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_4 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_5 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_5 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_6 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_6 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_7 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_7 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_8 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_8 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_9 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_9 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_10 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_10 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_11 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_11 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_12 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_12 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_13 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_13 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_14 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_14 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_15 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_15 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_16 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_16 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_17 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_17 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_18 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_18 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_19 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_19 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_20 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_20 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_21 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_21 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_22 [label="Return\l"];
  }
  subgraph cluster_246 {
    label="pinocchio::entrypoint::de\nserialize::<'_, \n128>";
    style="filled";
    color=lightgray;
    node_247 [label="LOCALS\l0 = (&[u8; 32], usize, &[u8])\l1 = *mut u8\l2 = &mut [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l3 = usize\l4 = usize\l5 = u64\l6 = *const u64\l7 = *mut u8\l8 = usize\l9 = usize\l10 = (usize, bool)\l11 = usize\l12 = bool\l13 = usize\l14 = core::ops::Range<usize>\l15 = core::ops::Range<usize>\l16 = core::ops::Range<usize>\l17 = core::option::Option<usize>\l18 = &mut core::ops::Range<usize>\l19 = isize\l20 = usize\l21 = *mut pinocchio::account_info::Account\l22 = *mut u8\l23 = usize\l24 = bool\l25 = u8\l26 = usize\l27 = (usize, bool)\l28 = usize\l29 = u64\l30 = (usize, bool)\l31 = (usize, bool)\l32 = usize\l33 = *const u8\l34 = usize\l35 = (usize, bool)\l36 = usize\l37 = (usize, bool)\l38 = &mut pinocchio::account_info::AccountInfo\l39 = &mut core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l40 = usize\l41 = bool\l42 = pinocchio::account_info::AccountInfo\l43 = usize\l44 = (usize, bool)\l45 = &mut pinocchio::account_info::AccountInfo\l46 = &mut core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l47 = usize\l48 = bool\l49 = pinocchio::account_info::AccountInfo\l50 = &pinocchio::account_info::AccountInfo\l51 = &core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l52 = &[core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l53 = usize\l54 = u8\l55 = core::ops::Range<usize>\l56 = core::ops::Range<usize>\l57 = core::ops::Range<usize>\l58 = core::option::Option<usize>\l59 = &mut core::ops::Range<usize>\l60 = isize\l61 = *mut pinocchio::account_info::Account\l62 = *mut u8\l63 = usize\l64 = bool\l65 = u8\l66 = usize\l67 = (usize, bool)\l68 = usize\l69 = u64\l70 = (usize, bool)\l71 = (usize, bool)\l72 = usize\l73 = *const u8\l74 = usize\l75 = (usize, bool)\l76 = usize\l77 = (usize, bool)\l78 = usize\l79 = (usize, bool)\l80 = usize\l81 = u64\l82 = *const u64\l83 = *mut u8\l84 = usize\l85 = usize\l86 = (usize, bool)\l87 = &[u8]\l88 = *const u8\l89 = *mut u8\l90 = usize\l91 = (usize, bool)\l92 = &[u8; 32]\l93 = *const [u8; 32]\l94 = *mut u8\l95 = usize\l96 = usize\l", style="filled", color=palegreen3];
    Xed53fe106f15d44b_0 -> Xed53fe106f15d44b_1 [label="7"];
    Xed53fe106f15d44b_0 [label="3 <- Use(const ?_usize)\l8 <- Use(cp(3))\lCall\l"];
    Xed53fe106f15d44b_1 -> Xed53fe106f15d44b_2 [label="9"];
    Xed53fe106f15d44b_1 [label="6 <- Cast-PtrToPtr mv(7)\l5 <- Use(cp((*6)))\l4 <- Cast-IntToInt mv(5)\lCall\l"];
    Xed53fe106f15d44b_2 -> Xed53fe106f15d44b_3;
    Xed53fe106f15d44b_2 [label="10 <- chkd-Add(cp(3), cp(9))\lAssert mv(10.1) == false\l"];
    Xed53fe106f15d44b_3 -> Xed53fe106f15d44b_48 [label="0"];
    Xed53fe106f15d44b_3 -> Xed53fe106f15d44b_4 [label="other"];
    Xed53fe106f15d44b_3 [label="3 <- Use(mv(10.0))\l12 <- Gt(cp(4), const ?_usize)\lSwitchInt mv(12)\l"];
    Xed53fe106f15d44b_4 -> Xed53fe106f15d44b_5 [label="13"];
    Xed53fe106f15d44b_4 [label="Call\l"];
    Xed53fe106f15d44b_5 -> Xed53fe106f15d44b_6 [label="14"];
    Xed53fe106f15d44b_5 [label="15 <- Adt{0} (const ?_usize, cp(13))\lCall\l"];
    Xed53fe106f15d44b_6 -> Xed53fe106f15d44b_7;
    Xed53fe106f15d44b_6 [label="16 <- Use(mv(14))\lGoto\l"];
    Xed53fe106f15d44b_7 -> Xed53fe106f15d44b_8 [label="17"];
    Xed53fe106f15d44b_7 [label="18 <- &mut 16\lCall\l"];
    Xed53fe106f15d44b_8 -> Xed53fe106f15d44b_11 [label="0"];
    Xed53fe106f15d44b_8 -> Xed53fe106f15d44b_10 [label="1"];
    Xed53fe106f15d44b_8 -> Xed53fe106f15d44b_9 [label="other"];
    Xed53fe106f15d44b_8 [label="19 <- Discriminant(17)\lSwitchInt mv(19)\l"];
    Xed53fe106f15d44b_9 [label="Unreachable\l"];
    Xed53fe106f15d44b_10 -> Xed53fe106f15d44b_12 [label="22"];
    Xed53fe106f15d44b_10 [label="20 <- Use(cp((17 as variant 1).0))\l23 <- Use(cp(3))\lCall\l"];
    Xed53fe106f15d44b_11 -> Xed53fe106f15d44b_30 [label="55"];
    Xed53fe106f15d44b_11 [label="56 <- Adt{0} (cp(13), cp(4))\lCall\l"];
    Xed53fe106f15d44b_12 -> Xed53fe106f15d44b_23 [label="0"];
    Xed53fe106f15d44b_12 -> Xed53fe106f15d44b_13 [label="other"];
    Xed53fe106f15d44b_12 [label="21 <- Cast-PtrToPtr mv(22)\l25 <- Use(cp((*21).0))\l24 <- Eq(mv(25), const ?_u8)\lSwitchInt mv(24)\l"];
    Xed53fe106f15d44b_13 -> Xed53fe106f15d44b_14 [label="26"];
    Xed53fe106f15d44b_13 [label="(*21).0 <- Use(const ?_u8)\lCall\l"];
    Xed53fe106f15d44b_14 -> Xed53fe106f15d44b_15;
    Xed53fe106f15d44b_14 [label="27 <- chkd-Add(cp(3), cp(26))\lAssert mv(27.1) == false\l"];
    Xed53fe106f15d44b_15 -> Xed53fe106f15d44b_16;
    Xed53fe106f15d44b_15 [label="3 <- Use(mv(27.0))\l29 <- Use(cp((*21).8))\l28 <- Cast-IntToInt mv(29)\l30 <- chkd-Add(cp(3), cp(28))\lAssert mv(30.1) == false\l"];
    Xed53fe106f15d44b_16 -> Xed53fe106f15d44b_17;
    Xed53fe106f15d44b_16 [label="3 <- Use(mv(30.0))\l31 <- chkd-Add(cp(3), const ?_usize)\lAssert mv(31.1) == false\l"];
    Xed53fe106f15d44b_17 -> Xed53fe106f15d44b_18 [label="32"];
    Xed53fe106f15d44b_17 [label="3 <- Use(mv(31.0))\l34 <- Use(cp(3))\l33 <- Cast-PointerWithExposedProvenance mv(34)\lCall\l"];
    Xed53fe106f15d44b_18 -> Xed53fe106f15d44b_19;
    Xed53fe106f15d44b_18 [label="35 <- chkd-Add(cp(3), cp(32))\lAssert mv(35.1) == false\l"];
    Xed53fe106f15d44b_19 -> Xed53fe106f15d44b_20 [label="36"];
    Xed53fe106f15d44b_19 [label="3 <- Use(mv(35.0))\lCall\l"];
    Xed53fe106f15d44b_20 -> Xed53fe106f15d44b_21;
    Xed53fe106f15d44b_20 [label="37 <- chkd-Add(cp(3), cp(36))\lAssert mv(37.1) == false\l"];
    Xed53fe106f15d44b_21 -> Xed53fe106f15d44b_22;
    Xed53fe106f15d44b_21 [label="3 <- Use(mv(37.0))\l40 <- Len((*2))\l41 <- Lt(cp(20), cp(40))\lAssert mv(41) == true\l"];
    Xed53fe106f15d44b_22 -> Xed53fe106f15d44b_7 [label="38"];
    Xed53fe106f15d44b_22 [label="39 <- &mut (*2)[_20]\l42 <- Adt{0} (cp(21))\lCall\l"];
    Xed53fe106f15d44b_23 -> Xed53fe106f15d44b_24 [label="43"];
    Xed53fe106f15d44b_23 [label="Call\l"];
    Xed53fe106f15d44b_24 -> Xed53fe106f15d44b_25;
    Xed53fe106f15d44b_24 [label="44 <- chkd-Add(cp(3), cp(43))\lAssert mv(44.1) == false\l"];
    Xed53fe106f15d44b_25 -> Xed53fe106f15d44b_26;
    Xed53fe106f15d44b_25 [label="3 <- Use(mv(44.0))\l47 <- Len((*2))\l48 <- Lt(cp(20), cp(47))\lAssert mv(48) == true\l"];
    Xed53fe106f15d44b_26 -> Xed53fe106f15d44b_27 [label="51"];
    Xed53fe106f15d44b_26 [label="46 <- &mut (*2)[_20]\l52 <- & (*2)\l54 <- Use(cp((*21).0))\l53 <- Cast-IntToInt mv(54)\lCall\l"];
    Xed53fe106f15d44b_27 -> Xed53fe106f15d44b_28 [label="50"];
    Xed53fe106f15d44b_27 [label="Call\l"];
    Xed53fe106f15d44b_28 -> Xed53fe106f15d44b_29 [label="49"];
    Xed53fe106f15d44b_28 [label="Call\l"];
    Xed53fe106f15d44b_29 -> Xed53fe106f15d44b_7 [label="45"];
    Xed53fe106f15d44b_29 [label="Call\l"];
    Xed53fe106f15d44b_30 -> Xed53fe106f15d44b_31;
    Xed53fe106f15d44b_30 [label="57 <- Use(mv(55))\lGoto\l"];
    Xed53fe106f15d44b_31 -> Xed53fe106f15d44b_32 [label="58"];
    Xed53fe106f15d44b_31 [label="59 <- &mut 57\lCall\l"];
    Xed53fe106f15d44b_32 -> Xed53fe106f15d44b_34 [label="0"];
    Xed53fe106f15d44b_32 -> Xed53fe106f15d44b_33 [label="1"];
    Xed53fe106f15d44b_32 -> Xed53fe106f15d44b_9 [label="other"];
    Xed53fe106f15d44b_32 [label="60 <- Discriminant(58)\lSwitchInt mv(60)\l"];
    Xed53fe106f15d44b_33 -> Xed53fe106f15d44b_35 [label="62"];
    Xed53fe106f15d44b_33 [label="63 <- Use(cp(3))\lCall\l"];
    Xed53fe106f15d44b_34 -> Xed53fe106f15d44b_49;
    Xed53fe106f15d44b_34 [label="11 <- Use(cp(13))\lGoto\l"];
    Xed53fe106f15d44b_35 -> Xed53fe106f15d44b_45 [label="0"];
    Xed53fe106f15d44b_35 -> Xed53fe106f15d44b_36 [label="other"];
    Xed53fe106f15d44b_35 [label="61 <- Cast-PtrToPtr mv(62)\l65 <- Use(cp((*61).0))\l64 <- Eq(mv(65), const ?_u8)\lSwitchInt mv(64)\l"];
    Xed53fe106f15d44b_36 -> Xed53fe106f15d44b_37 [label="66"];
    Xed53fe106f15d44b_36 [label="Call\l"];
    Xed53fe106f15d44b_37 -> Xed53fe106f15d44b_38;
    Xed53fe106f15d44b_37 [label="67 <- chkd-Add(cp(3), cp(66))\lAssert mv(67.1) == false\l"];
    Xed53fe106f15d44b_38 -> Xed53fe106f15d44b_39;
    Xed53fe106f15d44b_38 [label="3 <- Use(mv(67.0))\l69 <- Use(cp((*61).8))\l68 <- Cast-IntToInt mv(69)\l70 <- chkd-Add(cp(3), cp(68))\lAssert mv(70.1) == false\l"];
    Xed53fe106f15d44b_39 -> Xed53fe106f15d44b_40;
    Xed53fe106f15d44b_39 [label="3 <- Use(mv(70.0))\l71 <- chkd-Add(cp(3), const ?_usize)\lAssert mv(71.1) == false\l"];
    Xed53fe106f15d44b_40 -> Xed53fe106f15d44b_41 [label="72"];
    Xed53fe106f15d44b_40 [label="3 <- Use(mv(71.0))\l74 <- Use(cp(3))\l73 <- Cast-PointerWithExposedProvenance mv(74)\lCall\l"];
    Xed53fe106f15d44b_41 -> Xed53fe106f15d44b_42;
    Xed53fe106f15d44b_41 [label="75 <- chkd-Add(cp(3), cp(72))\lAssert mv(75.1) == false\l"];
    Xed53fe106f15d44b_42 -> Xed53fe106f15d44b_43 [label="76"];
    Xed53fe106f15d44b_42 [label="3 <- Use(mv(75.0))\lCall\l"];
    Xed53fe106f15d44b_43 -> Xed53fe106f15d44b_44;
    Xed53fe106f15d44b_43 [label="77 <- chkd-Add(cp(3), cp(76))\lAssert mv(77.1) == false\l"];
    Xed53fe106f15d44b_44 -> Xed53fe106f15d44b_31;
    Xed53fe106f15d44b_44 [label="3 <- Use(mv(77.0))\lGoto\l"];
    Xed53fe106f15d44b_45 -> Xed53fe106f15d44b_46 [label="78"];
    Xed53fe106f15d44b_45 [label="Call\l"];
    Xed53fe106f15d44b_46 -> Xed53fe106f15d44b_47;
    Xed53fe106f15d44b_46 [label="79 <- chkd-Add(cp(3), cp(78))\lAssert mv(79.1) == false\l"];
    Xed53fe106f15d44b_47 -> Xed53fe106f15d44b_31;
    Xed53fe106f15d44b_47 [label="3 <- Use(mv(79.0))\lGoto\l"];
    Xed53fe106f15d44b_48 -> Xed53fe106f15d44b_49;
    Xed53fe106f15d44b_48 [label="11 <- Use(const ?_usize)\lGoto\l"];
    Xed53fe106f15d44b_49 -> Xed53fe106f15d44b_50 [label="83"];
    Xed53fe106f15d44b_49 [label="84 <- Use(cp(3))\lCall\l"];
    Xed53fe106f15d44b_50 -> Xed53fe106f15d44b_51 [label="85"];
    Xed53fe106f15d44b_50 [label="82 <- Cast-PtrToPtr mv(83)\l81 <- Use(cp((*82)))\l80 <- Cast-IntToInt mv(81)\lCall\l"];
    Xed53fe106f15d44b_51 -> Xed53fe106f15d44b_52;
    Xed53fe106f15d44b_51 [label="86 <- chkd-Add(cp(3), cp(85))\lAssert mv(86.1) == false\l"];
    Xed53fe106f15d44b_52 -> Xed53fe106f15d44b_53 [label="89"];
    Xed53fe106f15d44b_52 [label="3 <- Use(mv(86.0))\l90 <- Use(cp(3))\lCall\l"];
    Xed53fe106f15d44b_53 -> Xed53fe106f15d44b_54 [label="87"];
    Xed53fe106f15d44b_53 [label="88 <- Cast-PtrToPtr mv(89)\lCall\l"];
    Xed53fe106f15d44b_54 -> Xed53fe106f15d44b_55;
    Xed53fe106f15d44b_54 [label="91 <- chkd-Add(cp(3), cp(80))\lAssert mv(91.1) == false\l"];
    Xed53fe106f15d44b_55 -> Xed53fe106f15d44b_56 [label="94"];
    Xed53fe106f15d44b_55 [label="3 <- Use(mv(91.0))\l95 <- Use(cp(3))\lCall\l"];
    Xed53fe106f15d44b_56 [label="93 <- Cast-PtrToPtr mv(94)\l92 <- & (*93)\l96 <- Use(cp(11))\l0 <- Tuple (cp(92), mv(96), cp(87))\lReturn\l"];
  }
  Xed53fe106f15d44b_0 -> Xf7c0564bc7b3306b_0 [label="cp(1),mv(8)"];
  Xed53fe106f15d44b_1 -> Xc400e100fe1b1e46_0 [label=""];
  Xed53fe106f15d44b_4 -> Xd4c8399dbe49afd_0 [label="cp(4),const ?_usize"];
  Xed53fe106f15d44b_5 -> Xe9e3ff72e55a5f27_0 [label="mv(15)"];
  Xed53fe106f15d44b_7 -> X1f9e69c6b415d93e_0 [label="cp(18)"];
  Xed53fe106f15d44b_10 -> Xf7c0564bc7b3306b_0 [label="cp(1),mv(23)"];
  Xed53fe106f15d44b_11 -> Xe9e3ff72e55a5f27_0 [label="mv(56)"];
  Xed53fe106f15d44b_13 -> Xdcc6cca97078e0a0_0 [label=""];
  Xed53fe106f15d44b_17 -> X1016b8be58aff39a_0 [label="mv(33),const ?_usize"];
  Xed53fe106f15d44b_19 -> Xc400e100fe1b1e46_0 [label=""];
  Xed53fe106f15d44b_22 -> X3e61e2a565de7318_0 [label="mv(39),mv(42)"];
  Xed53fe106f15d44b_23 -> Xc400e100fe1b1e46_0 [label=""];
  Xed53fe106f15d44b_26 -> X5fd8469768ca93e7_0 [label="mv(52),mv(53)"];
  Xed53fe106f15d44b_27 -> Xa243b99d87ed4046_0 [label="cp(51)"];
  Xed53fe106f15d44b_28 -> Xdf6433a5e6c64a8f_0 [label="cp(50)"];
  Xed53fe106f15d44b_29 -> X3e61e2a565de7318_0 [label="mv(46),mv(49)"];
  Xed53fe106f15d44b_31 -> X1f9e69c6b415d93e_0 [label="cp(59)"];
  Xed53fe106f15d44b_33 -> Xf7c0564bc7b3306b_0 [label="cp(1),mv(63)"];
  Xed53fe106f15d44b_36 -> Xdcc6cca97078e0a0_0 [label=""];
  Xed53fe106f15d44b_40 -> X1016b8be58aff39a_0 [label="mv(73),const ?_usize"];
  Xed53fe106f15d44b_42 -> Xc400e100fe1b1e46_0 [label=""];
  Xed53fe106f15d44b_45 -> Xc400e100fe1b1e46_0 [label=""];
  Xed53fe106f15d44b_49 -> Xf7c0564bc7b3306b_0 [label="cp(1),mv(84)"];
  Xed53fe106f15d44b_50 -> Xc400e100fe1b1e46_0 [label=""];
  Xed53fe106f15d44b_52 -> Xf7c0564bc7b3306b_0 [label="cp(1),mv(90)"];
  Xed53fe106f15d44b_53 -> X445ab3f2d45ff97a_0 [label="mv(88),cp(80)"];
  Xed53fe106f15d44b_55 -> Xf7c0564bc7b3306b_0 [label="cp(1),mv(95)"];
  subgraph cluster_248 {
    label="pinocchio::account_info::\nAccountInfo::borrow_data_\nunchecked";
    style="filled";
    color=lightgray;
    node_249 [label="LOCALS\l0 = &[u8]\l1 = &pinocchio::account_info::AccountInfo\l2 = *const u8\l3 = *mut u8\l4 = usize\l", style="filled", color=palegreen3];
    Xd87d8e0f8c4953f_0 -> Xd87d8e0f8c4953f_1 [label="3"];
    Xd87d8e0f8c4953f_0 [label="Call\l"];
    Xd87d8e0f8c4953f_1 -> Xd87d8e0f8c4953f_2 [label="4"];
    Xd87d8e0f8c4953f_1 [label="2 <- Cast-PtrToPtr mv(3)\lCall\l"];
    Xd87d8e0f8c4953f_2 -> Xd87d8e0f8c4953f_3 [label="0"];
    Xd87d8e0f8c4953f_2 [label="Call\l"];
    Xd87d8e0f8c4953f_3 [label="Return\l"];
  }
  Xd87d8e0f8c4953f_0 -> X5487d67c18c92abd_0 [label="cp(1)"];
  Xd87d8e0f8c4953f_1 -> X499a64bd2ee6dafa_0 [label="cp(1)"];
  Xd87d8e0f8c4953f_2 -> X445ab3f2d45ff97a_0 [label="mv(2),mv(4)"];
  subgraph cluster_250 {
    label="pinocchio::account_info::\nAccountInfo::borrow_mut_d\nata_unchecked";
    style="filled";
    color=lightgray;
    node_251 [label="LOCALS\l0 = &mut [u8]\l1 = &pinocchio::account_info::AccountInfo\l2 = *mut u8\l3 = usize\l", style="filled", color=palegreen3];
    X5492146546091aad_0 -> X5492146546091aad_1 [label="2"];
    X5492146546091aad_0 [label="Call\l"];
    X5492146546091aad_1 -> X5492146546091aad_2 [label="3"];
    X5492146546091aad_1 [label="Call\l"];
    X5492146546091aad_2 -> X5492146546091aad_3 [label="0"];
    X5492146546091aad_2 [label="Call\l"];
    X5492146546091aad_3 [label="Return\l"];
  }
  X5492146546091aad_0 -> X5487d67c18c92abd_0 [label="cp(1)"];
  X5492146546091aad_1 -> X499a64bd2ee6dafa_0 [label="cp(1)"];
  X5492146546091aad_2 -> Xd45e0829bd9b8685_0 [label="mv(2),mv(3)"];
  subgraph cluster_252 {
    label="pinocchio::account_info::\nAccountInfo::key";
    style="filled";
    color=lightgray;
    node_253 [label="LOCALS\l0 = &[u8; 32]\l1 = &pinocchio::account_info::AccountInfo\l2 = *mut pinocchio::account_info::Account\l", style="filled", color=palegreen3];
    X8817de218f598320_0 [label="2 <- CopyForDeref((*1).0)\l0 <- & (*2).5\lReturn\l"];
  }
  subgraph cluster_254 {
    label="pinocchio::account_info::\nAccountInfo::data_len";
    style="filled";
    color=lightgray;
    node_255 [label="LOCALS\l0 = usize\l1 = &pinocchio::account_info::AccountInfo\l2 = u64\l3 = *mut pinocchio::account_info::Account\l", style="filled", color=palegreen3];
    X499a64bd2ee6dafa_0 [label="3 <- CopyForDeref((*1).0)\l2 <- Use(cp((*3).8))\l0 <- Cast-IntToInt mv(2)\lReturn\l"];
  }
  subgraph cluster_256 {
    label="pinocchio::account_info::\nAccountInfo::lamports";
    style="filled";
    color=lightgray;
    node_257 [label="LOCALS\l0 = u64\l1 = &pinocchio::account_info::AccountInfo\l2 = *mut pinocchio::account_info::Account\l", style="filled", color=palegreen3];
    X91937cb3b305cbc5_0 [label="2 <- CopyForDeref((*1).0)\l0 <- Use(cp((*2).7))\lReturn\l"];
  }
  subgraph cluster_258 {
    label="pinocchio::log::sol_log";
    style="filled";
    color=lightgray;
    node_259 [label="LOCALS\l0 = ()\l1 = &str\l2 = &str\l", style="filled", color=palegreen3];
    X3a0ccd4589f66f55_0 -> X3a0ccd4589f66f55_1 [label="2"];
    X3a0ccd4589f66f55_0 [label="Call\l"];
    X3a0ccd4589f66f55_1 [label="Return\l"];
  }
  X3a0ccd4589f66f55_0 -> X1f8937e70182e85e_0 [label="cp(1)"];
  subgraph cluster_260 {
    label="pinocchio::sysvars::rent:\n:Rent::minimum_balance";
    style="filled";
    color=lightgray;
    node_261 [label="LOCALS\l0 = u64\l1 = &pinocchio::sysvars::rent::Rent\l2 = usize\l3 = u64\l4 = bool\l5 = u64\l6 = u64\l7 = (u64, bool)\l8 = u64\l9 = (u64, bool)\l10 = (u64, bool)\l11 = f64\l12 = f64\l13 = u64\l14 = u64\l15 = (u64, bool)\l16 = u64\l17 = (u64, bool)\l18 = f64\l", style="filled", color=palegreen3];
    X3036df73713f23cc_0 -> X3036df73713f23cc_1 [label="4"];
    X3036df73713f23cc_0 [label="3 <- Cast-IntToInt cp(2)\lCall\l"];
    X3036df73713f23cc_1 -> X3036df73713f23cc_6 [label="0"];
    X3036df73713f23cc_1 -> X3036df73713f23cc_2 [label="other"];
    X3036df73713f23cc_1 [label="SwitchInt mv(4)\l"];
    X3036df73713f23cc_2 -> X3036df73713f23cc_3;
    X3036df73713f23cc_2 [label="7 <- chkd-Add(const ?_u64, cp(3))\lAssert mv(7.1) == false\l"];
    X3036df73713f23cc_3 -> X3036df73713f23cc_4;
    X3036df73713f23cc_3 [label="6 <- Use(mv(7.0))\l8 <- Use(cp((*1).0))\l9 <- chkd-Mul(cp(6), cp(8))\lAssert mv(9.1) == false\l"];
    X3036df73713f23cc_4 -> X3036df73713f23cc_5;
    X3036df73713f23cc_4 [label="5 <- Use(mv(9.0))\l10 <- chkd-Mul(cp(5), const ?_u64)\lAssert mv(10.1) == false\l"];
    X3036df73713f23cc_5 -> X3036df73713f23cc_9;
    X3036df73713f23cc_5 [label="0 <- Use(mv(10.0))\lGoto\l"];
    X3036df73713f23cc_6 -> X3036df73713f23cc_7;
    X3036df73713f23cc_6 [label="15 <- chkd-Add(const ?_u64, cp(3))\lAssert mv(15.1) == false\l"];
    X3036df73713f23cc_7 -> X3036df73713f23cc_8;
    X3036df73713f23cc_7 [label="14 <- Use(mv(15.0))\l16 <- Use(cp((*1).0))\l17 <- chkd-Mul(cp(14), cp(16))\lAssert mv(17.1) == false\l"];
    X3036df73713f23cc_8 -> X3036df73713f23cc_9;
    X3036df73713f23cc_8 [label="13 <- Use(mv(17.0))\l12 <- Cast-IntToFloat mv(13)\l18 <- Use(cp((*1).1))\l11 <- Mul(mv(12), mv(18))\l0 <- Cast-FloatToInt mv(11)\lGoto\l"];
    X3036df73713f23cc_9 [label="Return\l"];
  }
  X3036df73713f23cc_0 -> X1351ef5c71268340_0 [label="cp(1)"];
  subgraph cluster_262 {
    label="pinocchio::sysvars::rent:\n:Rent::from_bytes_uncheck\ned";
    style="filled";
    color=lightgray;
    node_263 [label="LOCALS\l0 = &pinocchio::sysvars::rent::Rent\l1 = &[u8]\l2 = *const pinocchio::sysvars::rent::Rent\l3 = *const u8\l", style="filled", color=palegreen3];
    Xc3348c6747a1f406_0 -> Xc3348c6747a1f406_1 [label="3"];
    Xc3348c6747a1f406_0 [label="Call\l"];
    Xc3348c6747a1f406_1 [label="2 <- Cast-PtrToPtr mv(3)\l0 <- & (*2)\lReturn\l"];
  }
  Xc3348c6747a1f406_0 -> X5e85acfe8a19755e_0 [label="cp(1)"];
  subgraph cluster_264 {
    label="pinocchio::sysvars::rent:\n:Rent::is_default_rent_th\nreshold";
    style="filled";
    color=lightgray;
    node_265 [label="LOCALS\l0 = bool\l1 = &pinocchio::sysvars::rent::Rent\l2 = u64\l3 = [u8; 8]\l4 = f64\l", style="filled", color=palegreen3];
    X1351ef5c71268340_0 -> X1351ef5c71268340_1 [label="3"];
    X1351ef5c71268340_0 [label="4 <- Use(cp((*1).1))\lCall\l"];
    X1351ef5c71268340_1 -> X1351ef5c71268340_2 [label="2"];
    X1351ef5c71268340_1 [label="Call\l"];
    X1351ef5c71268340_2 [label="0 <- Eq(mv(2), const ?_u64)\lReturn\l"];
  }
  X1351ef5c71268340_0 -> Xb7233195f5e48779_0 [label="mv(4)"];
  X1351ef5c71268340_1 -> X4b040c9530995baf_0 [label="mv(3)"];
  subgraph cluster_266 {
    label="pinocchio::sysvars::rent:\n:Rent::from_account_info_\nunchecked";
    style="filled";
    color=lightgray;
    node_267 [label="LOCALS\l0 = core::result::Result<&pinocchio::sysvars::rent::Rent, pinocchio::program_error::ProgramError>\l1 = &pinocchio::account_info::AccountInfo\l2 = bool\l3 = &&[u8; 32]\l4 = &[u8; 32]\l5 = &&[u8; 32]\l6 = pinocchio::program_error::ProgramError\l7 = &pinocchio::sysvars::rent::Rent\l8 = &[u8]\l", style="filled", color=palegreen3];
    Xfaf06a046c4d2f42_0 -> Xfaf06a046c4d2f42_1 [label="4"];
    Xfaf06a046c4d2f42_0 [label="Call\l"];
    Xfaf06a046c4d2f42_1 -> Xfaf06a046c4d2f42_2 [label="2"];
    Xfaf06a046c4d2f42_1 [label="3 <- & 4\l5 <- Use(const &&[u8; 32])\lCall\l"];
    Xfaf06a046c4d2f42_2 -> Xfaf06a046c4d2f42_4 [label="0"];
    Xfaf06a046c4d2f42_2 -> Xfaf06a046c4d2f42_3 [label="other"];
    Xfaf06a046c4d2f42_2 [label="SwitchInt mv(2)\l"];
    Xfaf06a046c4d2f42_3 -> Xfaf06a046c4d2f42_7;
    Xfaf06a046c4d2f42_3 [label="6 <- Adt{1} ()\l0 <- Adt{1} (mv(6))\lGoto\l"];
    Xfaf06a046c4d2f42_4 -> Xfaf06a046c4d2f42_5 [label="8"];
    Xfaf06a046c4d2f42_4 [label="Call\l"];
    Xfaf06a046c4d2f42_5 -> Xfaf06a046c4d2f42_6 [label="7"];
    Xfaf06a046c4d2f42_5 [label="Call\l"];
    Xfaf06a046c4d2f42_6 -> Xfaf06a046c4d2f42_7;
    Xfaf06a046c4d2f42_6 [label="0 <- Adt{0} (cp(7))\lGoto\l"];
    Xfaf06a046c4d2f42_7 [label="Return\l"];
  }
  Xfaf06a046c4d2f42_0 -> X8817de218f598320_0 [label="cp(1)"];
  Xfaf06a046c4d2f42_1 -> X5d6c1de00eb04104_0 [label="mv(3),mv(5)"];
  Xfaf06a046c4d2f42_4 -> Xd87d8e0f8c4953f_0 [label="cp(1)"];
  Xfaf06a046c4d2f42_5 -> Xc3348c6747a1f406_0 [label="cp(8)"];
  subgraph cluster_268 {
    label="pinocchio::sysvars::rent:\n:Rent::is_exempt";
    style="filled";
    color=lightgray;
    node_269 [label="LOCALS\l0 = bool\l1 = &pinocchio::sysvars::rent::Rent\l2 = u64\l3 = usize\l4 = u64\l", style="filled", color=palegreen3];
    X6d20fd147c3a589e_0 -> X6d20fd147c3a589e_1 [label="4"];
    X6d20fd147c3a589e_0 [label="Call\l"];
    X6d20fd147c3a589e_1 [label="0 <- Ge(cp(2), mv(4))\lReturn\l"];
  }
  X6d20fd147c3a589e_0 -> X3036df73713f23cc_0 [label="cp(1),cp(3)"];
  subgraph cluster_270 {
    label="entrypoint::entrypoint";
    style="filled";
    color=lightgray;
    node_271 [label="LOCALS\l0 = u64\l1 = *mut u8\l2 = [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>; 128]\l3 = &[u8; 32]\l4 = usize\l5 = &[u8]\l6 = (&[u8; 32], usize, &[u8])\l7 = &mut [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l8 = &mut [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>; 128]\l9 = core::result::Result<(), pinocchio::program_error::ProgramError>\l10 = &&[u8; 32]\l11 = &[pinocchio::account_info::AccountInfo]\l12 = *const pinocchio::account_info::AccountInfo\l13 = *const core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l14 = &[core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l15 = &[core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>; 128]\l16 = &&[u8]\l17 = isize\l18 = pinocchio::program_error::ProgramError\l19 = &[u8; 32]\l20 = &[u8]\l", style="filled", color=palegreen3];
    X35727d23baa70bc_0 -> X35727d23baa70bc_1 [label="6"];
    X35727d23baa70bc_0 [label="2 <- Repeat const core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l8 <- &mut 2\l7 <- Cast-PointerCoercion(Unsize) cp(8)\lCall\l"];
    X35727d23baa70bc_1 -> X35727d23baa70bc_2 [label="13"];
    X35727d23baa70bc_1 [label="3 <- Use(cp(6.0))\l4 <- Use(cp(6.1))\l5 <- Use(cp(6.2))\l10 <- & 3\l19 <- CopyForDeref((*10))\l15 <- & 2\l14 <- Cast-PointerCoercion(Unsize) mv(15)\lCall\l"];
    X35727d23baa70bc_2 -> X35727d23baa70bc_3 [label="11"];
    X35727d23baa70bc_2 [label="12 <- Cast-PtrToPtr mv(13)\lCall\l"];
    X35727d23baa70bc_3 -> X35727d23baa70bc_4 [label="9"];
    X35727d23baa70bc_3 [label="16 <- & 5\l20 <- CopyForDeref((*16))\lCall\l"];
    X35727d23baa70bc_4 -> X35727d23baa70bc_7 [label="0"];
    X35727d23baa70bc_4 -> X35727d23baa70bc_6 [label="1"];
    X35727d23baa70bc_4 -> X35727d23baa70bc_5 [label="other"];
    X35727d23baa70bc_4 [label="17 <- Discriminant(9)\lSwitchInt mv(17)\l"];
    X35727d23baa70bc_5 [label="Unreachable\l"];
    X35727d23baa70bc_6 -> X35727d23baa70bc_9 [label="0"];
    X35727d23baa70bc_6 [label="18 <- Use(mv((9 as variant 1).0))\lCall\l"];
    X35727d23baa70bc_7 -> X35727d23baa70bc_8;
    X35727d23baa70bc_7 [label="0 <- Use(const ?_u64)\lGoto\l"];
    X35727d23baa70bc_8 [label="Return\l"];
    X35727d23baa70bc_9 -> X35727d23baa70bc_8;
    X35727d23baa70bc_9 [label="Goto\l"];
  }
  X35727d23baa70bc_0 -> Xed53fe106f15d44b_0 [label="cp(1),mv(7)"];
  X35727d23baa70bc_1 -> Xd96a92a3093bb3ff_0 [label="mv(14)"];
  X35727d23baa70bc_2 -> X990394bf3cfa52c4_0 [label="cp(12),cp(4)"];
  X35727d23baa70bc_3 -> Xf71ee158856918bf_0 [label="cp(19),cp(11),cp(20)"];
  X35727d23baa70bc_6 -> X9b7d50e3fbab8ea3_0 [label="mv(18)"];
}
