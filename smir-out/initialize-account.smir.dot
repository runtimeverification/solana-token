digraph {
  label="pinocchio_token_program";
  node [shape=rectangle];
  Xac08878333d72e42_0 [label="_ZN4core9panicking5panic1\n7h941160ead03e2d54E", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  Xdd778da4886cf626_0 [label="_ZN4core6result13unwrap_f\nailed17h698bf754bc36b600E", color=red];
  X2b52c3b21b79df6c_0 [label="_ZN19spl_token_interface5\nerror134_$LT$impl$u20$cor\ne..convert..From$LT$spl_t\noken_interface..error..To\nkenError$GT$$u20$for$u20$\npinocchio..program_error.\n.ProgramError$GT$4from17h\nc6e0c76c2379dcb8E", color=red];
  X67d151235d77b301_0 [label="_ZN4core3fmt3num3imp52_$L\nT$impl$u20$core..fmt..Dis\nplay$u20$for$u20$u32$GT$3\nfmt17hec74c53b91325b16E", color=red];
  Xb7bf8399f7d46827_0 [label="_ZN4core5slice5index26sli\nce_start_index_len_fail17\nhc3d07dac3414cccaE", color=red];
  X5b44578fd65a3909_0 [label="_ZN4core3fmt9Formatter3pa\nd17hc1359c14f299250aE", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X38c69241c4d95178_0 [label="_ZN4core9panicking13asser\nt_failed17h384d2134aae20a\n09E", color=red];
  Xca95a9d6f7061805_0 [label="_ZN4core3fmt3num53_$LT$im\npl$u20$core..fmt..UpperHe\nx$u20$for$u20$u32$GT$3fmt\n17h7baa47f3e5cbe44cE", color=red];
  Xab38848ab7f87cef_0 [label="Intr: \nexact_div", color=red];
  Xd45e0829bd9b8685_0 [label="_ZN4core5slice3raw18from_\nraw_parts_mut17hd39020404\n1394ebaE", color=red];
  Xb93f0288e0006b54_0 [label="_ZN4core3fmt9Formatter9wr\nite_str17h79222ac07baf2d9\n8E", color=red];
  Xb4c60c8acc2aa4f0_0 [label="_ZN4core3fmt3num52_$LT$im\npl$u20$core..fmt..UpperHe\nx$u20$for$u20$u8$GT$3fmt1\n7hcc3293c85bcdb723E", color=red];
  X3e3db5977da52381_0 [label="_ZN50_$LT$T$u20$as$u20$co\nre..convert..Into$LT$U$GT\n$$GT$4into17hecca773eb6e4\n642eE", color=red];
  Xfffaab11503b9894_0 [label="_ZN4core9panicking9panic_\nfmt17h3df1a4d3dd80ed56E", color=red];
  X5ea6c111b835a80f_0 [label="Intr: \nctpop", color=red];
  X1f8937e70182e85e_0 [label="_ZN4core4hint9black_box17\nhaee43377622d8965E", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X1eb9e8a223d962a5_0 [label="_ZN4core9panicking19asser\nt_failed_inner17h1d286061\nca0adfe7E", color=red];
  X445ab3f2d45ff97a_0 [label="_ZN4core5slice3raw14from_\nraw_parts17h1e564b97e5995\n981E", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  Xe9aeaaaf212ff5cc_0 [label="_ZN4core3fmt3num3imp51_$L\nT$impl$u20$core..fmt..Dis\nplay$u20$for$u20$u8$GT$3f\nmt17hb7528d9a39ef0430E", color=red];
  X781918ccf9219bf_0 [label="_ZN4core3fmt9Formatter10d\nebug_list17h83a5abeb16602\ne06E", color=red];
  Xee56336712b487c9_0 [label="_ZN4core3fmt8builders9Deb\nugList6finish17h006b52cd8\n519e80dE", color=red];
  X2272e127fe823423_0 [label="_ZN79_$LT$core..result..R\nesult$LT$T$C$E$GT$$u20$as\n$u20$core..ops..try_trait\n..Try$GT$6branch17he25507\n9ee625a107E", color=red];
  X5cf7402e6efa4d0b_0 [label="_ZN91_$LT$core..slice..it\ner..Iter$LT$T$GT$$u20$as$\nu20$core..iter..traits..i\nterator..Iterator$GT$4nex\nt17h8889bcd3b1e37678E", color=red];
  Xcfb99dd5dbeb355e_0 [label="_ZN4core9panicking14panic\n_nounwind17h3a5ca15c20002\n51eE", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X85724fedaf4a5444_0 [label="_ZN4core3fmt9Formatter25d\nebug_tuple_field1_finish1\n7h9a57a6e5dd04f319E", color=red];
  X5487d67c18c92abd_0 [label="_ZN9pinocchio12account_in\nfo11AccountInfo8data_ptr1\n7hb6e9e0a8aa5bfc73E", color=red];
  X1d0677a8f15bd47_0 [label="_ZN4core3fmt3num53_$LT$im\npl$u20$core..fmt..LowerHe\nx$u20$for$u20$u32$GT$3fmt\n17hb987357f13dc6cc8E", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X6938f74b16e4abe6_0 [label="_ZN4core3fmt8builders9Deb\nugList5entry17h0c3f2561bc\n049767E", color=red];
  Xd6b56047a80c2f44_0 [label="_ZN92_$LT$spl_token_inter\nface..error..TokenError$u\n20$as$u20$core..convert..\nTryFrom$LT$u32$GT$$GT$8tr\ny_from17hb4b287096064e78e\nE", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X310df8f1c672aeb_0 [label="Intr: \ncttz_nonzero", color=red];
  X5adbeff4b5cb293e_0 [label="_ZN153_$LT$core..result..\nResult$LT$T$C$F$GT$$u20$a\ns$u20$core..ops..try_trai\nt..FromResidual$LT$core..\nresult..Result$LT$core..c\nonvert..Infallible$C$E$GT\n$$GT$$GT$13from_residual1\n7h88ee5a672840db5aE", color=red];
  X5c48a4d6939009d7_0 [label="_ZN77_$LT$pinocchio..sysv\nars..rent..Rent$u20$as$u2\n0$pinocchio..sysvars..Sys\nvar$GT$3get17hf38567ad131\nf2adaE", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X9b498145f7dc0efa_0 [label="_ZN4core6option13unwrap_f\nailed17hb0fa9493deab9974E", color=red];
  X7a4a77babfb83a53_0 [label="_ZN9pinocchio13program_er\nror99_$LT$impl$u20$core..\nconvert..From$LT$pinocchi\no..program_error..Program\nError$GT$$u20$for$u20$u64\n$GT$4from17h3cde40cb61358\n316E", color=red];
  X83c8e82412404978_0 [label="Intr: \nassert_inhabited", color=red];
  Xc0df9b1997ac90da_0 [label="_ZN4core3fmt3num52_$LT$im\npl$u20$core..fmt..LowerHe\nx$u20$for$u20$u8$GT$3fmt1\n7h5c13501d312fda12E", color=red];
  X43ad75e732d0e131_0 [label="Intr: \nraw_eq", color=red];
  subgraph cluster_0 {
    label="<spl_token_interface::sta\nte::mint::Mint \nas \nspl_token_interface::stat\ne::Initializable>::is_ini\ntialized";
    style="filled";
    color=lightgray;
    node_1 [label="LOCALS\l0 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l1 = &spl_token_interface::state::mint::Mint\l2 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    Xfda868f8ceb54b0b_0 -> Xfda868f8ceb54b0b_3 [label="0"];
    Xfda868f8ceb54b0b_0 -> Xfda868f8ceb54b0b_2 [label="1"];
    Xfda868f8ceb54b0b_0 -> Xfda868f8ceb54b0b_1 [label="other"];
    Xfda868f8ceb54b0b_0 [label="SwitchInt cp((*1).3)\l"];
    Xfda868f8ceb54b0b_1 -> Xfda868f8ceb54b0b_4;
    Xfda868f8ceb54b0b_1 [label="2 <- Adt{3} ()\l0 <- Adt{1} (mv(2))\lGoto\l"];
    Xfda868f8ceb54b0b_2 -> Xfda868f8ceb54b0b_4;
    Xfda868f8ceb54b0b_2 [label="0 <- Adt{0} (const bool)\lGoto\l"];
    Xfda868f8ceb54b0b_3 -> Xfda868f8ceb54b0b_4;
    Xfda868f8ceb54b0b_3 [label="0 <- Adt{0} (const bool)\lGoto\l"];
    Xfda868f8ceb54b0b_4 [label="Return\l"];
  }
  subgraph cluster_2 {
    label="<core::ops::Range<usize> \nas \ncore::slice::SliceIndex<[\npinocchio::account_info::\nAccountInfo]>>::get_unche\ncked";
    style="filled";
    color=lightgray;
    node_3 [label="LOCALS\l0 = *const [pinocchio::account_info::AccountInfo]\l1 = core::ops::Range<usize>\l2 = *const [pinocchio::account_info::AccountInfo]\l3 = bool\l4 = ()\l5 = usize\l6 = usize\l7 = usize\l8 = usize\l9 = usize\l10 = usize\l11 = *const pinocchio::account_info::AccountInfo\l12 = *const pinocchio::account_info::AccountInfo\l", style="filled", color=palegreen3];
    X35636d3a007cb3bc_0 -> X35636d3a007cb3bc_3 [label="0"];
    X35636d3a007cb3bc_0 -> X35636d3a007cb3bc_1 [label="other"];
    X35636d3a007cb3bc_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    X35636d3a007cb3bc_1 -> X35636d3a007cb3bc_2 [label="4"];
    X35636d3a007cb3bc_1 [label="Storage Live _5\l5 <- Use(cp(1.0))\lStorage Live _6\l6 <- Use(cp(1.1))\lStorage Live _7\l7 <- PtrMetadata(cp(2))\lCall\l"];
    X35636d3a007cb3bc_2 -> X35636d3a007cb3bc_3;
    X35636d3a007cb3bc_2 [label="Storage Dead _7\lStorage Dead _6\lStorage Dead _5\lGoto\l"];
    X35636d3a007cb3bc_3 [label="Storage Dead _3\lStorage Live _9\l9 <- Use(cp(1.1))\l10 <- Use(cp(1.0))\l8 <- SubUnchecked(mv(9), cp(10))\lStorage Dead _9\lStorage Live _11\lStorage Live _12\l12 <- Cast-PtrToPtr cp(2)\l11 <- Offset(cp(12), cp(10))\lStorage Dead _12\l0 <- *([pinocchio::account_info::AccountInfo]) (cp(11), cp(8))\lStorage Dead _11\lReturn\l"];
  }
  X35636d3a007cb3bc_1 -> X9ee05f346622e41_0 [label="mv(5),mv(6),mv(7)"];
  subgraph cluster_4 {
    label="<core::ops::Range<usize> \nas \ncore::slice::SliceIndex<[\nu8]>>::get_unchecked";
    style="filled";
    color=lightgray;
    node_5 [label="LOCALS\l0 = *const [u8]\l1 = core::ops::Range<usize>\l2 = *const [u8]\l3 = bool\l4 = ()\l5 = usize\l6 = usize\l7 = usize\l8 = usize\l9 = usize\l10 = usize\l11 = *const u8\l12 = *const u8\l", style="filled", color=palegreen3];
    Xa5745fda7f573cf5_0 -> Xa5745fda7f573cf5_3 [label="0"];
    Xa5745fda7f573cf5_0 -> Xa5745fda7f573cf5_1 [label="other"];
    Xa5745fda7f573cf5_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    Xa5745fda7f573cf5_1 -> Xa5745fda7f573cf5_2 [label="4"];
    Xa5745fda7f573cf5_1 [label="Storage Live _5\l5 <- Use(cp(1.0))\lStorage Live _6\l6 <- Use(cp(1.1))\lStorage Live _7\l7 <- PtrMetadata(cp(2))\lCall\l"];
    Xa5745fda7f573cf5_2 -> Xa5745fda7f573cf5_3;
    Xa5745fda7f573cf5_2 [label="Storage Dead _7\lStorage Dead _6\lStorage Dead _5\lGoto\l"];
    Xa5745fda7f573cf5_3 [label="Storage Dead _3\lStorage Live _9\l9 <- Use(cp(1.1))\l10 <- Use(cp(1.0))\l8 <- SubUnchecked(mv(9), cp(10))\lStorage Dead _9\lStorage Live _11\lStorage Live _12\l12 <- Cast-PtrToPtr cp(2)\l11 <- Offset(cp(12), cp(10))\lStorage Dead _12\l0 <- *([u8]) (cp(11), cp(8))\lStorage Dead _11\lReturn\l"];
  }
  Xa5745fda7f573cf5_1 -> X9ee05f346622e41_0 [label="mv(5),mv(6),mv(7)"];
  subgraph cluster_6 {
    label="<core::ops::Range<usize> \nas \ncore::slice::SliceIndex<[\nT]>>::get_unchecked::prec\nondition_check";
    style="filled";
    color=lightgray;
    node_7 [label="LOCALS\l0 = ()\l1 = usize\l2 = usize\l3 = usize\l4 = bool\l5 = bool\l6 = !\l", style="filled", color=palegreen3];
    X9ee05f346622e41_0 -> X9ee05f346622e41_3 [label="0"];
    X9ee05f346622e41_0 -> X9ee05f346622e41_1 [label="other"];
    X9ee05f346622e41_0 [label="Storage Live _4\l4 <- Ge(cp(2), cp(1))\lSwitchInt mv(4)\l"];
    X9ee05f346622e41_1 -> X9ee05f346622e41_3 [label="0"];
    X9ee05f346622e41_1 -> X9ee05f346622e41_2 [label="other"];
    X9ee05f346622e41_1 [label="Storage Live _5\l5 <- Le(cp(2), cp(3))\lSwitchInt mv(5)\l"];
    X9ee05f346622e41_2 [label="Storage Dead _5\lStorage Dead _4\lReturn\l"];
    X9ee05f346622e41_3 [label="Call\l"];
  }
  X9ee05f346622e41_3 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_8 {
    label="<spl_token_interface::sta\nte::account::Account \nas \nspl_token_interface::stat\ne::Initializable>::is_ini\ntialized";
    style="filled";
    color=lightgray;
    node_9 [label="LOCALS\l0 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l1 = &spl_token_interface::state::account::Account\l2 = core::result::Result<spl_token_interface::state::account_state::AccountState, pinocchio::program_error::ProgramError>\l3 = u8\l", style="filled", color=palegreen3];
    X51b146e3c692f3b3_0 -> X51b146e3c692f3b3_1 [label="2"];
    X51b146e3c692f3b3_0 [label="3 <- Use(cp((*1).4))\lCall\l"];
    X51b146e3c692f3b3_1 -> X51b146e3c692f3b3_2 [label="0"];
    X51b146e3c692f3b3_1 [label="Call\l"];
    X51b146e3c692f3b3_2 [label="Return\l"];
  }
  X51b146e3c692f3b3_0 -> Xebdcabd9f1c41329_0 [label="mv(3)"];
  X51b146e3c692f3b3_1 -> X881c7a326c470b28_0 [label="mv(2),const {closure@<spl_token_interface::state::account::Account as spl_token_interface::state::Initializable>::is_initialized::{closure#0}}"];
  subgraph cluster_10 {
    label="<spl_token_interface::sta\nte::account::Account \nas \nspl_token_interface::stat\ne::Initializable>::is_ini\ntialized::{closure#0}";
    style="filled";
    color=lightgray;
    node_11 [label="LOCALS\l0 = bool\l1 = {closure@<spl_token_interface::state::account::Account as spl_token_interface::state::Initializable>::is_initialized::{closure#0}}\l2 = spl_token_interface::state::account_state::AccountState\l3 = &spl_token_interface::state::account_state::AccountState\l4 = &spl_token_interface::state::account_state::AccountState\l", style="filled", color=palegreen3];
    Xe8c8eaa619633971_0 -> Xe8c8eaa619633971_1 [label="0"];
    Xe8c8eaa619633971_0 [label="3 <- & 2\l4 <- Use(const &spl_token_interface::state::account_state::AccountState)\lCall\l"];
    Xe8c8eaa619633971_1 [label="Return\l"];
  }
  Xe8c8eaa619633971_0 -> Xd5b4a5747e6ff805_0 [label="mv(3),mv(4)"];
  subgraph cluster_12 {
    label="<core::ops::RangeTo<usize\n> \nas \ncore::slice::SliceIndex<[\npinocchio::account_info::\nAccountInfo]>>::get_unche\ncked";
    style="filled";
    color=lightgray;
    node_13 [label="LOCALS\l0 = *const [pinocchio::account_info::AccountInfo]\l1 = core::ops::RangeTo<usize>\l2 = *const [pinocchio::account_info::AccountInfo]\l3 = core::ops::Range<usize>\l4 = usize\l", style="filled", color=palegreen3];
    X547eb5d0a2c4568_0 -> X547eb5d0a2c4568_1 [label="0"];
    X547eb5d0a2c4568_0 [label="Storage Live _3\lStorage Live _4\l4 <- Use(cp(1.0))\l3 <- Adt{0} (const ?_usize, mv(4))\lStorage Dead _4\lCall\l"];
    X547eb5d0a2c4568_1 [label="Storage Dead _3\lReturn\l"];
  }
  X547eb5d0a2c4568_0 -> X35636d3a007cb3bc_0 [label="mv(3),mv(2)"];
  subgraph cluster_14 {
    label="<spl_token_interface::sta\nte::account_state::Accoun\ntState \nas \ncore::convert::TryFrom<u8\n>>::try_from";
    style="filled";
    color=lightgray;
    node_15 [label="LOCALS\l0 = core::result::Result<spl_token_interface::state::account_state::AccountState, pinocchio::program_error::ProgramError>\l1 = u8\l2 = bool\l3 = bool\l4 = spl_token_interface::state::account_state::AccountState\l5 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    Xebdcabd9f1c41329_0 -> Xebdcabd9f1c41329_1 [label="0"];
    Xebdcabd9f1c41329_0 -> Xebdcabd9f1c41329_3 [label="other"];
    Xebdcabd9f1c41329_0 [label="2 <- Le(const ?_u8, cp(1))\lSwitchInt mv(2)\l"];
    Xebdcabd9f1c41329_1 -> Xebdcabd9f1c41329_4;
    Xebdcabd9f1c41329_1 [label="5 <- Adt{3} ()\l0 <- Adt{1} (mv(5))\lGoto\l"];
    Xebdcabd9f1c41329_2 -> Xebdcabd9f1c41329_4;
    Xebdcabd9f1c41329_2 [label="4 <- Cast-Transmute cp(1)\l0 <- Adt{0} (mv(4))\lGoto\l"];
    Xebdcabd9f1c41329_3 -> Xebdcabd9f1c41329_1 [label="0"];
    Xebdcabd9f1c41329_3 -> Xebdcabd9f1c41329_2 [label="other"];
    Xebdcabd9f1c41329_3 [label="3 <- Le(cp(1), const ?_u8)\lSwitchInt mv(3)\l"];
    Xebdcabd9f1c41329_4 [label="Return\l"];
  }
  subgraph cluster_16 {
    label="<core::ops::RangeFrom<usi\nze> \nas \ncore::slice::SliceIndex<[\npinocchio::account_info::\nAccountInfo]>>::index";
    style="filled";
    color=lightgray;
    node_17 [label="LOCALS\l0 = &[pinocchio::account_info::AccountInfo]\l1 = core::ops::RangeFrom<usize>\l2 = &[pinocchio::account_info::AccountInfo]\l3 = bool\l4 = usize\l5 = usize\l6 = !\l7 = *const [pinocchio::account_info::AccountInfo]\l8 = *const [pinocchio::account_info::AccountInfo]\l9 = bool\l10 = ()\l11 = usize\l12 = *const pinocchio::account_info::AccountInfo\l13 = *const pinocchio::account_info::AccountInfo\l", style="filled", color=palegreen3];
    Xb10705ddd1b146e2_0 -> Xb10705ddd1b146e2_2 [label="0"];
    Xb10705ddd1b146e2_0 -> Xb10705ddd1b146e2_1 [label="other"];
    Xb10705ddd1b146e2_0 [label="Storage Live _3\l4 <- Use(cp(1.0))\l5 <- PtrMetadata(cp(2))\l3 <- Gt(cp(4), cp(5))\lSwitchInt mv(3)\l"];
    Xb10705ddd1b146e2_1 [label="Call\l"];
    Xb10705ddd1b146e2_2 -> Xb10705ddd1b146e2_4 [label="0"];
    Xb10705ddd1b146e2_2 -> Xb10705ddd1b146e2_3 [label="other"];
    Xb10705ddd1b146e2_2 [label="Storage Dead _3\lStorage Live _7\lStorage Live _8\l8 <- &raw (*2)\lStorage Live _11\lStorage Live _9\l9 <- UbChecks :: bool\lSwitchInt mv(9)\l"];
    Xb10705ddd1b146e2_3 -> Xb10705ddd1b146e2_4 [label="10"];
    Xb10705ddd1b146e2_3 [label="Call\l"];
    Xb10705ddd1b146e2_4 [label="Storage Dead _9\l11 <- SubUnchecked(cp(5), cp(4))\lStorage Live _12\lStorage Live _13\l13 <- Cast-PtrToPtr cp(8)\l12 <- Offset(cp(13), cp(4))\lStorage Dead _13\l7 <- *([pinocchio::account_info::AccountInfo]) (cp(12), cp(11))\lStorage Dead _12\lStorage Dead _11\lStorage Dead _8\l0 <- & (*7)\lStorage Dead _7\lReturn\l"];
  }
  Xb10705ddd1b146e2_1 -> Xb7bf8399f7d46827_0 [label="mv(4),mv(5)"];
  Xb10705ddd1b146e2_3 -> X9ee05f346622e41_0 [label="cp(4),cp(5),cp(5)"];
  subgraph cluster_18 {
    label="<core::ops::RangeFrom<usi\nze> \nas \ncore::slice::SliceIndex<[\nu8]>>::index";
    style="filled";
    color=lightgray;
    node_19 [label="LOCALS\l0 = &[u8]\l1 = core::ops::RangeFrom<usize>\l2 = &[u8]\l3 = bool\l4 = usize\l5 = usize\l6 = !\l7 = *const [u8]\l8 = *const [u8]\l9 = bool\l10 = ()\l11 = usize\l12 = *const u8\l13 = *const u8\l", style="filled", color=palegreen3];
    Xdbbcf3965a56e3eb_0 -> Xdbbcf3965a56e3eb_2 [label="0"];
    Xdbbcf3965a56e3eb_0 -> Xdbbcf3965a56e3eb_1 [label="other"];
    Xdbbcf3965a56e3eb_0 [label="Storage Live _3\l4 <- Use(cp(1.0))\l5 <- PtrMetadata(cp(2))\l3 <- Gt(cp(4), cp(5))\lSwitchInt mv(3)\l"];
    Xdbbcf3965a56e3eb_1 [label="Call\l"];
    Xdbbcf3965a56e3eb_2 -> Xdbbcf3965a56e3eb_4 [label="0"];
    Xdbbcf3965a56e3eb_2 -> Xdbbcf3965a56e3eb_3 [label="other"];
    Xdbbcf3965a56e3eb_2 [label="Storage Dead _3\lStorage Live _7\lStorage Live _8\l8 <- &raw (*2)\lStorage Live _11\lStorage Live _9\l9 <- UbChecks :: bool\lSwitchInt mv(9)\l"];
    Xdbbcf3965a56e3eb_3 -> Xdbbcf3965a56e3eb_4 [label="10"];
    Xdbbcf3965a56e3eb_3 [label="Call\l"];
    Xdbbcf3965a56e3eb_4 [label="Storage Dead _9\l11 <- SubUnchecked(cp(5), cp(4))\lStorage Live _12\lStorage Live _13\l13 <- Cast-PtrToPtr cp(8)\l12 <- Offset(cp(13), cp(4))\lStorage Dead _13\l7 <- *([u8]) (cp(12), cp(11))\lStorage Dead _12\lStorage Dead _11\lStorage Dead _8\l0 <- & (*7)\lStorage Dead _7\lReturn\l"];
  }
  Xdbbcf3965a56e3eb_1 -> Xb7bf8399f7d46827_0 [label="mv(4),mv(5)"];
  Xdbbcf3965a56e3eb_3 -> X9ee05f346622e41_0 [label="cp(4),cp(5),cp(5)"];
  subgraph cluster_20 {
    label="<core::result::Result<&sp\nl_token_interface::state:\n:mint::Mint, \npinocchio::program_error:\n:ProgramError> \nas \ncore::ops::FromResidual<c\nore::result::Result<core:\n:convert::Infallible, \npinocchio::program_error:\n:ProgramError>>>::from_re\nsidual";
    style="filled";
    color=lightgray;
    node_21 [label="LOCALS\l0 = core::result::Result<&spl_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l1 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l2 = pinocchio::program_error::ProgramError\l3 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X942e0746becfec86_0 -> X942e0746becfec86_1 [label="3"];
    X942e0746becfec86_0 [label="2 <- Use(mv((1 as variant 1).0))\lStorage Live _3\lCall\l"];
    X942e0746becfec86_1 [label="0 <- Adt{1} (mv(3))\lStorage Dead _3\lReturn\l"];
  }
  X942e0746becfec86_0 -> X6ab29abaf30a0fd0_0 [label="mv(2)"];
  subgraph cluster_22 {
    label="<core::result::Result<(),\n \npinocchio::program_error:\n:ProgramError> \nas \ncore::ops::FromResidual<c\nore::result::Result<core:\n:convert::Infallible, \nspl_token_interface::erro\nr::TokenError>>>::from_re\nsidual";
    style="filled";
    color=lightgray;
    node_23 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = core::result::Result<core::convert::Infallible, spl_token_interface::error::TokenError>\l2 = spl_token_interface::error::TokenError\l3 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X619ee3ba0019d783_0 -> X619ee3ba0019d783_1 [label="3"];
    X619ee3ba0019d783_0 [label="2 <- Use(mv((1 as variant 1).0))\lStorage Live _3\lCall\l"];
    X619ee3ba0019d783_1 [label="0 <- Adt{1} (mv(3))\lStorage Dead _3\lReturn\l"];
  }
  X619ee3ba0019d783_0 -> X2b52c3b21b79df6c_0 [label="mv(2)"];
  subgraph cluster_24 {
    label="spl_token_interface::nati\nve_mint::is_native_mint";
    style="filled";
    color=lightgray;
    node_25 [label="LOCALS\l0 = bool\l1 = &[u8; 32]\l2 = &&[u8; 32]\l3 = &&[u8; 32]\l", style="filled", color=palegreen3];
    X38f1feb0e27f16b3_0 -> X38f1feb0e27f16b3_1 [label="0"];
    X38f1feb0e27f16b3_0 [label="2 <- & 1\l3 <- Use(const &&[u8; 32])\lCall\l"];
    X38f1feb0e27f16b3_1 [label="Return\l"];
  }
  X38f1feb0e27f16b3_0 -> X62e1ca1dfa9f1ff9_0 [label="mv(2),mv(3)"];
  subgraph cluster_26 {
    label="spl_token_interface::stat\ne::load_unchecked::<spl_t\noken_interface::state::mi\nnt::Mint>";
    style="filled";
    color=lightgray;
    node_27 [label="LOCALS\l0 = core::result::Result<&spl_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l1 = &[u8]\l2 = bool\l3 = usize\l4 = pinocchio::program_error::ProgramError\l5 = &spl_token_interface::state::mint::Mint\l6 = *const spl_token_interface::state::mint::Mint\l7 = *const u8\l", style="filled", color=palegreen3];
    X6730c331e405ac65_0 -> X6730c331e405ac65_2 [label="0"];
    X6730c331e405ac65_0 -> X6730c331e405ac65_1 [label="other"];
    X6730c331e405ac65_0 [label="3 <- PtrMetadata(cp(1))\l2 <- Ne(mv(3), const ?_usize)\lSwitchInt mv(2)\l"];
    X6730c331e405ac65_1 -> X6730c331e405ac65_4;
    X6730c331e405ac65_1 [label="4 <- Adt{3} ()\l0 <- Adt{1} (mv(4))\lGoto\l"];
    X6730c331e405ac65_2 -> X6730c331e405ac65_3 [label="7"];
    X6730c331e405ac65_2 [label="Call\l"];
    X6730c331e405ac65_3 -> X6730c331e405ac65_4;
    X6730c331e405ac65_3 [label="6 <- Cast-PtrToPtr mv(7)\l5 <- & (*6)\l0 <- Adt{0} (cp(5))\lGoto\l"];
    X6730c331e405ac65_4 [label="Return\l"];
  }
  X6730c331e405ac65_2 -> X5e85acfe8a19755e_0 [label="cp(1)"];
  subgraph cluster_28 {
    label="spl_token_interface::stat\ne::load_mut_unchecked::<s\npl_token_interface::state\n::account::Account>";
    style="filled";
    color=lightgray;
    node_29 [label="LOCALS\l0 = core::result::Result<&mut spl_token_interface::state::account::Account, pinocchio::program_error::ProgramError>\l1 = &mut [u8]\l2 = bool\l3 = usize\l4 = &[u8]\l5 = pinocchio::program_error::ProgramError\l6 = &mut spl_token_interface::state::account::Account\l7 = *mut spl_token_interface::state::account::Account\l8 = *mut u8\l", style="filled", color=palegreen3];
    X49a43113cd3c5d44_0 -> X49a43113cd3c5d44_2 [label="0"];
    X49a43113cd3c5d44_0 -> X49a43113cd3c5d44_1 [label="other"];
    X49a43113cd3c5d44_0 [label="4 <- & (*1)\l3 <- PtrMetadata(mv(4))\l2 <- Ne(mv(3), const ?_usize)\lSwitchInt mv(2)\l"];
    X49a43113cd3c5d44_1 -> X49a43113cd3c5d44_4;
    X49a43113cd3c5d44_1 [label="5 <- Adt{3} ()\l0 <- Adt{1} (mv(5))\lGoto\l"];
    X49a43113cd3c5d44_2 -> X49a43113cd3c5d44_3 [label="8"];
    X49a43113cd3c5d44_2 [label="Call\l"];
    X49a43113cd3c5d44_3 -> X49a43113cd3c5d44_4;
    X49a43113cd3c5d44_3 [label="7 <- Cast-PtrToPtr mv(8)\l6 <- &mut (*7)\l0 <- Adt{0} (cp(6))\lGoto\l"];
    X49a43113cd3c5d44_4 [label="Return\l"];
  }
  X49a43113cd3c5d44_2 -> X8641c13e22843093_0 [label="cp(1)"];
  subgraph cluster_30 {
    label="spl_token_interface::stat\ne::load::<spl_token_inter\nface::state::mint::Mint>";
    style="filled";
    color=lightgray;
    node_31 [label="LOCALS\l0 = core::result::Result<&spl_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l1 = &[u8]\l2 = core::result::Result<&spl_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    Xb3735d347f72ab76_0 -> Xb3735d347f72ab76_1 [label="2"];
    Xb3735d347f72ab76_0 [label="Call\l"];
    Xb3735d347f72ab76_1 -> Xb3735d347f72ab76_2 [label="0"];
    Xb3735d347f72ab76_1 [label="Call\l"];
    Xb3735d347f72ab76_2 [label="Return\l"];
  }
  Xb3735d347f72ab76_0 -> X6730c331e405ac65_0 [label="cp(1)"];
  Xb3735d347f72ab76_1 -> Xdfbed971e20b497d_0 [label="mv(2),const {closure@spl_token_interface::state::load<spl_token_interface::state::mint::Mint>::{closure#0}}"];
  subgraph cluster_32 {
    label="spl_token_interface::stat\ne::load::<spl_token_inter\nface::state::mint::Mint>:\n:{closure#0}";
    style="filled";
    color=lightgray;
    node_33 [label="LOCALS\l0 = core::result::Result<&spl_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l1 = {closure@spl_token_interface::state::load<spl_token_interface::state::mint::Mint>::{closure#0}}\l2 = &spl_token_interface::state::mint::Mint\l3 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, bool>\l4 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l5 = isize\l6 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l7 = bool\l8 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    Xd59e01ff537956ed_0 -> Xd59e01ff537956ed_1 [label="4"];
    Xd59e01ff537956ed_0 [label="Call\l"];
    Xd59e01ff537956ed_1 -> Xd59e01ff537956ed_2 [label="3"];
    Xd59e01ff537956ed_1 [label="Call\l"];
    Xd59e01ff537956ed_2 -> Xd59e01ff537956ed_4 [label="0"];
    Xd59e01ff537956ed_2 -> Xd59e01ff537956ed_5 [label="1"];
    Xd59e01ff537956ed_2 -> Xd59e01ff537956ed_3 [label="other"];
    Xd59e01ff537956ed_2 [label="5 <- Discriminant(3)\lSwitchInt mv(5)\l"];
    Xd59e01ff537956ed_3 [label="Unreachable\l"];
    Xd59e01ff537956ed_4 -> Xd59e01ff537956ed_7 [label="0"];
    Xd59e01ff537956ed_4 -> Xd59e01ff537956ed_6 [label="other"];
    Xd59e01ff537956ed_4 [label="7 <- Use(cp((3 as variant 0).0))\lSwitchInt cp(7)\l"];
    Xd59e01ff537956ed_5 -> Xd59e01ff537956ed_8 [label="0"];
    Xd59e01ff537956ed_5 [label="6 <- Use(mv((3 as variant 1).0))\lCall\l"];
    Xd59e01ff537956ed_6 -> Xd59e01ff537956ed_8;
    Xd59e01ff537956ed_6 [label="0 <- Adt{0} (cp(2))\lGoto\l"];
    Xd59e01ff537956ed_7 -> Xd59e01ff537956ed_8;
    Xd59e01ff537956ed_7 [label="8 <- Adt{9} ()\l0 <- Adt{1} (mv(8))\lGoto\l"];
    Xd59e01ff537956ed_8 [label="Return\l"];
  }
  Xd59e01ff537956ed_0 -> Xfda868f8ceb54b0b_0 [label="cp(2)"];
  Xd59e01ff537956ed_1 -> X94faba497d3a8d24_0 [label="mv(4)"];
  Xd59e01ff537956ed_5 -> X942e0746becfec86_0 [label="mv(6)"];
  subgraph cluster_34 {
    label="spl_token_interface::stat\ne::account::Account::set_\namount";
    style="filled";
    color=lightgray;
    node_35 [label="LOCALS\l0 = ()\l1 = &mut spl_token_interface::state::account::Account\l2 = u64\l3 = [u8; 8]\l", style="filled", color=palegreen3];
    X1c99c2b6b9095250_0 -> X1c99c2b6b9095250_1 [label="3"];
    X1c99c2b6b9095250_0 [label="Call\l"];
    X1c99c2b6b9095250_1 [label="(*1).2 <- Use(mv(3))\lReturn\l"];
  }
  X1c99c2b6b9095250_0 -> Xd9beafda37b4af63_0 [label="cp(2)"];
  subgraph cluster_36 {
    label="spl_token_interface::stat\ne::account::Account::set_\nnative";
    style="filled";
    color=lightgray;
    node_37 [label="LOCALS\l0 = ()\l1 = &mut spl_token_interface::state::account::Account\l2 = bool\l3 = usize\l4 = usize\l5 = bool\l", style="filled", color=palegreen3];
    Xf2ce9a9691c6e7c1_0 -> Xf2ce9a9691c6e7c1_1;
    Xf2ce9a9691c6e7c1_0 [label="3 <- Use(const ?_usize)\l4 <- Use(const ?_usize)\l5 <- Lt(cp(3), cp(4))\lAssert mv(5) == true\l"];
    Xf2ce9a9691c6e7c1_1 [label="(*1).5[_3] <- Cast-IntToInt cp(2)\lReturn\l"];
  }
  subgraph cluster_38 {
    label="spl_token_interface::stat\ne::account::Account::acco\nunt_state";
    style="filled";
    color=lightgray;
    node_39 [label="LOCALS\l0 = core::result::Result<spl_token_interface::state::account_state::AccountState, pinocchio::program_error::ProgramError>\l1 = &spl_token_interface::state::account::Account\l2 = u8\l", style="filled", color=palegreen3];
    Xd5c95dfb9809593b_0 -> Xd5c95dfb9809593b_1 [label="0"];
    Xd5c95dfb9809593b_0 [label="2 <- Use(cp((*1).4))\lCall\l"];
    Xd5c95dfb9809593b_1 [label="Return\l"];
  }
  Xd5c95dfb9809593b_0 -> Xebdcabd9f1c41329_0 [label="mv(2)"];
  subgraph cluster_40 {
    label="spl_token_interface::stat\ne::account::Account::nati\nve_amount";
    style="filled";
    color=lightgray;
    node_41 [label="LOCALS\l0 = core::option::Option<u64>\l1 = &spl_token_interface::state::account::Account\l2 = bool\l3 = u64\l4 = [u8; 8]\l", style="filled", color=palegreen3];
    X2ac947ac9fa596e2_0 -> X2ac947ac9fa596e2_1 [label="2"];
    X2ac947ac9fa596e2_0 [label="Call\l"];
    X2ac947ac9fa596e2_1 -> X2ac947ac9fa596e2_4 [label="0"];
    X2ac947ac9fa596e2_1 -> X2ac947ac9fa596e2_2 [label="other"];
    X2ac947ac9fa596e2_1 [label="SwitchInt mv(2)\l"];
    X2ac947ac9fa596e2_2 -> X2ac947ac9fa596e2_3 [label="3"];
    X2ac947ac9fa596e2_2 [label="4 <- Use(cp((*1).6))\lCall\l"];
    X2ac947ac9fa596e2_3 -> X2ac947ac9fa596e2_5;
    X2ac947ac9fa596e2_3 [label="0 <- Adt{1} (mv(3))\lGoto\l"];
    X2ac947ac9fa596e2_4 -> X2ac947ac9fa596e2_5;
    X2ac947ac9fa596e2_4 [label="0 <- Adt{0} ()\lGoto\l"];
    X2ac947ac9fa596e2_5 [label="Return\l"];
  }
  X2ac947ac9fa596e2_0 -> X439fceefbd0e681_0 [label="cp(1)"];
  X2ac947ac9fa596e2_2 -> X4b040c9530995baf_0 [label="mv(4)"];
  subgraph cluster_42 {
    label="spl_token_interface::stat\ne::account::Account::set_\naccount_state";
    style="filled";
    color=lightgray;
    node_43 [label="LOCALS\l0 = ()\l1 = &mut spl_token_interface::state::account::Account\l2 = spl_token_interface::state::account_state::AccountState\l3 = u8\l4 = bool\l", style="filled", color=palegreen3];
    X2eb1c95b0fa45ac6_0 [label="3 <- Discriminant(2)\l4 <- Le(cp(3), const ?_u8)\lIntr: Assume mv(4)\l(*1).4 <- Use(cp(3))\lReturn\l"];
  }
  subgraph cluster_44 {
    label="spl_token_interface::stat\ne::account::Account::set_\nnative_amount";
    style="filled";
    color=lightgray;
    node_45 [label="LOCALS\l0 = ()\l1 = &mut spl_token_interface::state::account::Account\l2 = u64\l3 = [u8; 8]\l", style="filled", color=palegreen3];
    X8826ee51f39e5fb2_0 -> X8826ee51f39e5fb2_1 [label="3"];
    X8826ee51f39e5fb2_0 [label="Call\l"];
    X8826ee51f39e5fb2_1 [label="(*1).6 <- Use(mv(3))\lReturn\l"];
  }
  X8826ee51f39e5fb2_0 -> Xd9beafda37b4af63_0 [label="cp(2)"];
  subgraph cluster_46 {
    label="spl_token_interface::stat\ne::account::Account::amou\nnt";
    style="filled";
    color=lightgray;
    node_47 [label="LOCALS\l0 = u64\l1 = &spl_token_interface::state::account::Account\l2 = [u8; 8]\l", style="filled", color=palegreen3];
    Xfeb9911cbc7a7b7a_0 -> Xfeb9911cbc7a7b7a_1 [label="0"];
    Xfeb9911cbc7a7b7a_0 [label="2 <- Use(cp((*1).2))\lCall\l"];
    Xfeb9911cbc7a7b7a_1 [label="Return\l"];
  }
  Xfeb9911cbc7a7b7a_0 -> X4b040c9530995baf_0 [label="mv(2)"];
  subgraph cluster_48 {
    label="spl_token_interface::stat\ne::account::Account::is_n\native";
    style="filled";
    color=lightgray;
    node_49 [label="LOCALS\l0 = bool\l1 = &spl_token_interface::state::account::Account\l2 = u8\l3 = usize\l4 = usize\l5 = bool\l", style="filled", color=palegreen3];
    X439fceefbd0e681_0 -> X439fceefbd0e681_1;
    X439fceefbd0e681_0 [label="3 <- Use(const ?_usize)\l4 <- Use(const ?_usize)\l5 <- Lt(cp(3), cp(4))\lAssert mv(5) == true\l"];
    X439fceefbd0e681_1 [label="2 <- Use(cp((*1).5[_3]))\l0 <- Eq(mv(2), const ?_u8)\lReturn\l"];
  }
  subgraph cluster_50 {
    label="entrypoint::process_instr\nuction";
    style="filled";
    color=lightgray;
    node_51 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[u8; 32]\l2 = &[pinocchio::account_info::AccountInfo]\l3 = &[u8]\l4 = pinocchio::program_error::ProgramError\l5 = spl_token_interface::error::TokenError\l6 = &u8\l7 = &[u8]\l8 = usize\l9 = bool\l10 = core::result::Result<(), pinocchio::program_error::ProgramError>\l11 = u8\l12 = core::result::Result<(), pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    Xf71ee158856918bf_0 -> Xf71ee158856918bf_3 [label="0"];
    Xf71ee158856918bf_0 -> Xf71ee158856918bf_2 [label="other"];
    Xf71ee158856918bf_0 [label="8 <- Len((*3))\l9 <- Ge(mv(8), const ?_usize)\lSwitchInt mv(9)\l"];
    Xf71ee158856918bf_1 -> Xf71ee158856918bf_7;
    Xf71ee158856918bf_1 [label="0 <- Adt{1} (mv(4))\lGoto\l"];
    Xf71ee158856918bf_2 -> Xf71ee158856918bf_4 [label="255"];
    Xf71ee158856918bf_2 -> Xf71ee158856918bf_5 [label="other"];
    Xf71ee158856918bf_2 [label="6 <- & (*3)[0]\l7 <- & (*3)[1..-0]\l11 <- Use(cp((*6)))\lSwitchInt mv(11)\l"];
    Xf71ee158856918bf_3 -> Xf71ee158856918bf_1 [label="4"];
    Xf71ee158856918bf_3 [label="5 <- Adt{12} ()\lCall\l"];
    Xf71ee158856918bf_4 -> Xf71ee158856918bf_6 [label="10"];
    Xf71ee158856918bf_4 [label="Call\l"];
    Xf71ee158856918bf_5 -> Xf71ee158856918bf_6 [label="10"];
    Xf71ee158856918bf_5 [label="Call\l"];
    Xf71ee158856918bf_6 -> Xf71ee158856918bf_7 [label="0"];
    Xf71ee158856918bf_6 [label="12 <- Use(mv(10))\lCall\l"];
    Xf71ee158856918bf_7 [label="Return\l"];
  }
  Xf71ee158856918bf_3 -> X3e3db5977da52381_0 [label="mv(5)"];
  Xf71ee158856918bf_4 -> Xfd5a8332d4d69684_0 [label="cp(2),cp(7)"];
  Xf71ee158856918bf_5 -> Xdb069c516746123a_0 [label="cp(2),cp(3)"];
  Xf71ee158856918bf_6 -> X960a47fdaee9926a_0 [label="mv(12),const for<'a> fn(&'a pinocchio::program_error::ProgramError) {entrypoint::log_error}"];
  subgraph cluster_52 {
    label="entrypoint::inner_process\n_instruction";
    style="filled";
    color=lightgray;
    node_53 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[pinocchio::account_info::AccountInfo]\l2 = &[u8]\l3 = pinocchio::program_error::ProgramError\l4 = spl_token_interface::error::TokenError\l5 = &u8\l6 = &[u8]\l7 = usize\l8 = bool\l9 = &[pinocchio::account_info::AccountInfo; 4]\l10 = core::option::Option<&[pinocchio::account_info::AccountInfo; 4]>\l", style="filled", color=palegreen3];
    Xdb069c516746123a_0 -> Xdb069c516746123a_3 [label="0"];
    Xdb069c516746123a_0 -> Xdb069c516746123a_2 [label="other"];
    Xdb069c516746123a_0 [label="7 <- Len((*2))\l8 <- Ge(mv(7), const ?_usize)\lSwitchInt mv(8)\l"];
    Xdb069c516746123a_1 -> Xdb069c516746123a_8;
    Xdb069c516746123a_1 [label="0 <- Adt{1} (mv(3))\lGoto\l"];
    Xdb069c516746123a_2 -> Xdb069c516746123a_5 [label="101"];
    Xdb069c516746123a_2 -> Xdb069c516746123a_4 [label="other"];
    Xdb069c516746123a_2 [label="5 <- & (*2)[0]\l6 <- & (*2)[1..-0]\lSwitchInt cp((*5))\l"];
    Xdb069c516746123a_3 -> Xdb069c516746123a_1 [label="3"];
    Xdb069c516746123a_3 [label="4 <- Adt{12} ()\lCall\l"];
    Xdb069c516746123a_4 -> Xdb069c516746123a_8;
    Xdb069c516746123a_4 [label="0 <- Adt{0} (const ())\lGoto\l"];
    Xdb069c516746123a_5 -> Xdb069c516746123a_6 [label="10"];
    Xdb069c516746123a_5 [label="Call\l"];
    Xdb069c516746123a_6 -> Xdb069c516746123a_7 [label="9"];
    Xdb069c516746123a_6 [label="Call\l"];
    Xdb069c516746123a_7 -> Xdb069c516746123a_8 [label="0"];
    Xdb069c516746123a_7 [label="Call\l"];
    Xdb069c516746123a_8 [label="Return\l"];
  }
  Xdb069c516746123a_3 -> X3e3db5977da52381_0 [label="mv(4)"];
  Xdb069c516746123a_5 -> X307d25e8633c02a0_0 [label="cp(1)"];
  Xdb069c516746123a_6 -> X963747dca830d1cd_0 [label="mv(10)"];
  Xdb069c516746123a_7 -> Xd232903ecd9ed830_0 [label="cp(9)"];
  subgraph cluster_54 {
    label="entrypoint::test_process_\ninitialize_account";
    style="filled";
    color=lightgray;
    node_55 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[pinocchio::account_info::AccountInfo; 4]\l2 = {closure@p-token/src/entrypoint.rs:498:23: 498:51}\l3 = spl_token_interface::state::account_state::AccountState\l4 = core::result::Result<spl_token_interface::state::account_state::AccountState, pinocchio::program_error::ProgramError>\l5 = &spl_token_interface::state::account::Account\l6 = spl_token_interface::state::account::Account\l7 = &{closure@p-token/src/entrypoint.rs:498:23: 498:51}\l8 = (&pinocchio::account_info::AccountInfo,)\l9 = &pinocchio::account_info::AccountInfo\l10 = usize\l11 = usize\l12 = bool\l13 = u64\l14 = &pinocchio::sysvars::rent::Rent\l15 = &[u8]\l16 = &pinocchio::account_info::AccountInfo\l17 = usize\l18 = usize\l19 = bool\l20 = usize\l21 = &pinocchio::account_info::AccountInfo\l22 = usize\l23 = usize\l24 = bool\l25 = bool\l26 = &&[u8; 32]\l27 = &[u8; 32]\l28 = &pinocchio::account_info::AccountInfo\l29 = usize\l30 = usize\l31 = bool\l32 = &&[u8; 32]\l33 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l34 = &spl_token_interface::state::mint::Mint\l35 = spl_token_interface::state::mint::Mint\l36 = *const spl_token_interface::state::mint::Mint\l37 = *const u8\l38 = &[u8]\l39 = &pinocchio::account_info::AccountInfo\l40 = usize\l41 = usize\l42 = bool\l43 = core::result::Result<(), pinocchio::program_error::ProgramError>\l44 = &[pinocchio::account_info::AccountInfo]\l45 = bool\l46 = usize\l47 = &[pinocchio::account_info::AccountInfo]\l48 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l49 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l50 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l51 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l52 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l53 = bool\l54 = core::panicking::AssertKind\l55 = !\l56 = core::option::Option<core::fmt::Arguments<'_>>\l57 = bool\l58 = &&[u8; 32]\l59 = &[u8; 32]\l60 = &pinocchio::account_info::AccountInfo\l61 = usize\l62 = usize\l63 = bool\l64 = &&[u8; 32]\l65 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l66 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l67 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l68 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l69 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l70 = bool\l71 = core::panicking::AssertKind\l72 = !\l73 = core::option::Option<core::fmt::Arguments<'_>>\l74 = bool\l75 = usize\l76 = &pinocchio::account_info::AccountInfo\l77 = usize\l78 = usize\l79 = bool\l80 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l81 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l82 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l83 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l84 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l85 = bool\l86 = core::panicking::AssertKind\l87 = !\l88 = core::option::Option<core::fmt::Arguments<'_>>\l89 = bool\l90 = &spl_token_interface::state::account_state::AccountState\l91 = &spl_token_interface::state::account_state::AccountState\l92 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l93 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l94 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l95 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l96 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l97 = bool\l98 = core::panicking::AssertKind\l99 = !\l100 = core::option::Option<core::fmt::Arguments<'_>>\l101 = bool\l102 = u64\l103 = &pinocchio::account_info::AccountInfo\l104 = usize\l105 = usize\l106 = bool\l107 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l108 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l109 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l110 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l111 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l112 = bool\l113 = core::panicking::AssertKind\l114 = !\l115 = core::option::Option<core::fmt::Arguments<'_>>\l116 = bool\l117 = &&[u8; 32]\l118 = &[u8; 32]\l119 = &pinocchio::account_info::AccountInfo\l120 = usize\l121 = usize\l122 = bool\l123 = &&[u8; 32]\l124 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l125 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l126 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l127 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l128 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l129 = bool\l130 = core::panicking::AssertKind\l131 = !\l132 = core::option::Option<core::fmt::Arguments<'_>>\l133 = bool\l134 = &&[u8; 32]\l135 = &[u8; 32]\l136 = &pinocchio::account_info::AccountInfo\l137 = usize\l138 = usize\l139 = bool\l140 = &&[u8; 32]\l141 = bool\l142 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l143 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l144 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l145 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l146 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l147 = bool\l148 = core::panicking::AssertKind\l149 = !\l150 = core::option::Option<core::fmt::Arguments<'_>>\l151 = bool\l152 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l153 = !\l154 = (&spl_token_interface::state::account_state::AccountState, &spl_token_interface::state::account_state::AccountState)\l155 = &spl_token_interface::state::account_state::AccountState\l156 = spl_token_interface::state::account_state::AccountState\l157 = core::result::Result<spl_token_interface::state::account_state::AccountState, pinocchio::program_error::ProgramError>\l158 = &spl_token_interface::state::account::Account\l159 = spl_token_interface::state::account::Account\l160 = &{closure@p-token/src/entrypoint.rs:498:23: 498:51}\l161 = (&pinocchio::account_info::AccountInfo,)\l162 = &pinocchio::account_info::AccountInfo\l163 = usize\l164 = usize\l165 = bool\l166 = &spl_token_interface::state::account_state::AccountState\l167 = &spl_token_interface::state::account_state::AccountState\l168 = &spl_token_interface::state::account_state::AccountState\l169 = bool\l170 = core::panicking::AssertKind\l171 = !\l172 = core::option::Option<core::fmt::Arguments<'_>>\l173 = (&[u8; 32], &[u8; 32])\l174 = &[u8; 32]\l175 = spl_token_interface::state::account::Account\l176 = &{closure@p-token/src/entrypoint.rs:498:23: 498:51}\l177 = (&pinocchio::account_info::AccountInfo,)\l178 = &pinocchio::account_info::AccountInfo\l179 = usize\l180 = usize\l181 = bool\l182 = &[u8; 32]\l183 = &pinocchio::account_info::AccountInfo\l184 = usize\l185 = usize\l186 = bool\l187 = &[u8; 32]\l188 = &[u8; 32]\l189 = bool\l190 = core::panicking::AssertKind\l191 = !\l192 = core::option::Option<core::fmt::Arguments<'_>>\l193 = (&[u8; 32], &[u8; 32])\l194 = &[u8; 32]\l195 = spl_token_interface::state::account::Account\l196 = &{closure@p-token/src/entrypoint.rs:498:23: 498:51}\l197 = (&pinocchio::account_info::AccountInfo,)\l198 = &pinocchio::account_info::AccountInfo\l199 = usize\l200 = usize\l201 = bool\l202 = &[u8; 32]\l203 = &pinocchio::account_info::AccountInfo\l204 = usize\l205 = usize\l206 = bool\l207 = &[u8; 32]\l208 = &[u8; 32]\l209 = bool\l210 = core::panicking::AssertKind\l211 = !\l212 = core::option::Option<core::fmt::Arguments<'_>>\l213 = bool\l214 = &spl_token_interface::state::account::Account\l215 = spl_token_interface::state::account::Account\l216 = &{closure@p-token/src/entrypoint.rs:498:23: 498:51}\l217 = (&pinocchio::account_info::AccountInfo,)\l218 = &pinocchio::account_info::AccountInfo\l219 = usize\l220 = usize\l221 = bool\l222 = !\l223 = (&u64, &u64)\l224 = &u64\l225 = u64\l226 = core::option::Option<u64>\l227 = &spl_token_interface::state::account::Account\l228 = spl_token_interface::state::account::Account\l229 = &{closure@p-token/src/entrypoint.rs:498:23: 498:51}\l230 = (&pinocchio::account_info::AccountInfo,)\l231 = &pinocchio::account_info::AccountInfo\l232 = usize\l233 = usize\l234 = bool\l235 = &u64\l236 = &u64\l237 = &u64\l238 = bool\l239 = u64\l240 = u64\l241 = core::panicking::AssertKind\l242 = !\l243 = core::option::Option<core::fmt::Arguments<'_>>\l244 = (&u64, &u64)\l245 = &u64\l246 = u64\l247 = &spl_token_interface::state::account::Account\l248 = spl_token_interface::state::account::Account\l249 = &{closure@p-token/src/entrypoint.rs:498:23: 498:51}\l250 = (&pinocchio::account_info::AccountInfo,)\l251 = &pinocchio::account_info::AccountInfo\l252 = usize\l253 = usize\l254 = bool\l255 = &u64\l256 = u64\l257 = u64\l258 = &pinocchio::account_info::AccountInfo\l259 = usize\l260 = usize\l261 = bool\l262 = (u64, bool)\l263 = &u64\l264 = &u64\l265 = bool\l266 = u64\l267 = u64\l268 = core::panicking::AssertKind\l269 = !\l270 = core::option::Option<core::fmt::Arguments<'_>>\l", style="filled", color=palegreen3];
    Xd232903ecd9ed830_0 -> Xd232903ecd9ed830_1;
    Xd232903ecd9ed830_0 [label="7 <- & 2\l10 <- Use(const ?_usize)\l11 <- Use(const ?_usize)\l12 <- Lt(cp(10), cp(11))\lAssert mv(12) == true\l"];
    Xd232903ecd9ed830_1 -> Xd232903ecd9ed830_2 [label="6"];
    Xd232903ecd9ed830_1 [label="9 <- & (*1)[_10]\l8 <- Tuple (cp(9))\lCall\l"];
    Xd232903ecd9ed830_2 -> Xd232903ecd9ed830_3 [label="4"];
    Xd232903ecd9ed830_2 [label="5 <- & 6\lCall\l"];
    Xd232903ecd9ed830_3 -> Xd232903ecd9ed830_4 [label="3"];
    Xd232903ecd9ed830_3 [label="Call\l"];
    Xd232903ecd9ed830_4 -> Xd232903ecd9ed830_5;
    Xd232903ecd9ed830_4 [label="17 <- Use(const ?_usize)\l18 <- Use(const ?_usize)\l19 <- Lt(cp(17), cp(18))\lAssert mv(19) == true\l"];
    Xd232903ecd9ed830_5 -> Xd232903ecd9ed830_6 [label="15"];
    Xd232903ecd9ed830_5 [label="16 <- & (*1)[_17]\lCall\l"];
    Xd232903ecd9ed830_6 -> Xd232903ecd9ed830_7 [label="14"];
    Xd232903ecd9ed830_6 [label="Call\l"];
    Xd232903ecd9ed830_7 -> Xd232903ecd9ed830_8;
    Xd232903ecd9ed830_7 [label="22 <- Use(const ?_usize)\l23 <- Use(const ?_usize)\l24 <- Lt(cp(22), cp(23))\lAssert mv(24) == true\l"];
    Xd232903ecd9ed830_8 -> Xd232903ecd9ed830_9 [label="20"];
    Xd232903ecd9ed830_8 [label="21 <- & (*1)[_22]\lCall\l"];
    Xd232903ecd9ed830_9 -> Xd232903ecd9ed830_10 [label="13"];
    Xd232903ecd9ed830_9 [label="Call\l"];
    Xd232903ecd9ed830_10 -> Xd232903ecd9ed830_11;
    Xd232903ecd9ed830_10 [label="29 <- Use(const ?_usize)\l30 <- Use(const ?_usize)\l31 <- Lt(cp(29), cp(30))\lAssert mv(31) == true\l"];
    Xd232903ecd9ed830_11 -> Xd232903ecd9ed830_12 [label="27"];
    Xd232903ecd9ed830_11 [label="28 <- & (*1)[_29]\lCall\l"];
    Xd232903ecd9ed830_12 -> Xd232903ecd9ed830_13 [label="25"];
    Xd232903ecd9ed830_12 [label="26 <- & 27\l32 <- Use(const &&[u8; 32])\lCall\l"];
    Xd232903ecd9ed830_13 -> Xd232903ecd9ed830_14;
    Xd232903ecd9ed830_13 [label="40 <- Use(const ?_usize)\l41 <- Use(const ?_usize)\l42 <- Lt(cp(40), cp(41))\lAssert mv(42) == true\l"];
    Xd232903ecd9ed830_14 -> Xd232903ecd9ed830_15 [label="38"];
    Xd232903ecd9ed830_14 [label="39 <- & (*1)[_40]\lCall\l"];
    Xd232903ecd9ed830_15 -> Xd232903ecd9ed830_16 [label="37"];
    Xd232903ecd9ed830_15 [label="Call\l"];
    Xd232903ecd9ed830_16 -> Xd232903ecd9ed830_17 [label="35"];
    Xd232903ecd9ed830_16 [label="36 <- Cast-PtrToPtr mv(37)\lCall\l"];
    Xd232903ecd9ed830_17 -> Xd232903ecd9ed830_18 [label="33"];
    Xd232903ecd9ed830_17 [label="34 <- & 35\lCall\l"];
    Xd232903ecd9ed830_18 -> Xd232903ecd9ed830_19 [label="43"];
    Xd232903ecd9ed830_18 [label="44 <- Cast-PointerCoercion(Unsize) cp(1)\lCall\l"];
    Xd232903ecd9ed830_19 -> Xd232903ecd9ed830_23 [label="0"];
    Xd232903ecd9ed830_19 -> Xd232903ecd9ed830_20 [label="other"];
    Xd232903ecd9ed830_19 [label="47 <- Cast-PointerCoercion(Unsize) cp(1)\l46 <- PtrMetadata(mv(47))\l45 <- Lt(mv(46), const ?_usize)\lSwitchInt mv(45)\l"];
    Xd232903ecd9ed830_20 -> Xd232903ecd9ed830_21 [label="53"];
    Xd232903ecd9ed830_20 [label="49 <- & 43\l50 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l48 <- Tuple (mv(49), mv(50))\l51 <- Use(cp(48.0))\l52 <- Use(cp(48.1))\lCall\l"];
    Xd232903ecd9ed830_21 -> Xd232903ecd9ed830_22 [label="0"];
    Xd232903ecd9ed830_21 -> Xd232903ecd9ed830_109 [label="other"];
    Xd232903ecd9ed830_21 [label="SwitchInt mv(53)\l"];
    Xd232903ecd9ed830_22 [label="54 <- Adt{0} ()\l56 <- Adt{0} ()\lCall\l"];
    Xd232903ecd9ed830_23 -> Xd232903ecd9ed830_24;
    Xd232903ecd9ed830_23 [label="61 <- Use(const ?_usize)\l62 <- Use(const ?_usize)\l63 <- Lt(cp(61), cp(62))\lAssert mv(63) == true\l"];
    Xd232903ecd9ed830_24 -> Xd232903ecd9ed830_25 [label="59"];
    Xd232903ecd9ed830_24 [label="60 <- & (*1)[_61]\lCall\l"];
    Xd232903ecd9ed830_25 -> Xd232903ecd9ed830_26 [label="57"];
    Xd232903ecd9ed830_25 [label="58 <- & 59\l64 <- Use(const &&[u8; 32])\lCall\l"];
    Xd232903ecd9ed830_26 -> Xd232903ecd9ed830_30 [label="0"];
    Xd232903ecd9ed830_26 -> Xd232903ecd9ed830_27 [label="other"];
    Xd232903ecd9ed830_26 [label="SwitchInt mv(57)\l"];
    Xd232903ecd9ed830_27 -> Xd232903ecd9ed830_28 [label="70"];
    Xd232903ecd9ed830_27 [label="66 <- & 43\l67 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l65 <- Tuple (mv(66), mv(67))\l68 <- Use(cp(65.0))\l69 <- Use(cp(65.1))\lCall\l"];
    Xd232903ecd9ed830_28 -> Xd232903ecd9ed830_29 [label="0"];
    Xd232903ecd9ed830_28 -> Xd232903ecd9ed830_109 [label="other"];
    Xd232903ecd9ed830_28 [label="SwitchInt mv(70)\l"];
    Xd232903ecd9ed830_29 [label="71 <- Adt{0} ()\l73 <- Adt{0} ()\lCall\l"];
    Xd232903ecd9ed830_30 -> Xd232903ecd9ed830_31;
    Xd232903ecd9ed830_30 [label="77 <- Use(const ?_usize)\l78 <- Use(const ?_usize)\l79 <- Lt(cp(77), cp(78))\lAssert mv(79) == true\l"];
    Xd232903ecd9ed830_31 -> Xd232903ecd9ed830_32 [label="75"];
    Xd232903ecd9ed830_31 [label="76 <- & (*1)[_77]\lCall\l"];
    Xd232903ecd9ed830_32 -> Xd232903ecd9ed830_36 [label="0"];
    Xd232903ecd9ed830_32 -> Xd232903ecd9ed830_33 [label="other"];
    Xd232903ecd9ed830_32 [label="74 <- Ne(mv(75), const ?_usize)\lSwitchInt mv(74)\l"];
    Xd232903ecd9ed830_33 -> Xd232903ecd9ed830_34 [label="85"];
    Xd232903ecd9ed830_33 [label="81 <- & 43\l82 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l80 <- Tuple (mv(81), mv(82))\l83 <- Use(cp(80.0))\l84 <- Use(cp(80.1))\lCall\l"];
    Xd232903ecd9ed830_34 -> Xd232903ecd9ed830_35 [label="0"];
    Xd232903ecd9ed830_34 -> Xd232903ecd9ed830_109 [label="other"];
    Xd232903ecd9ed830_34 [label="SwitchInt mv(85)\l"];
    Xd232903ecd9ed830_35 [label="86 <- Adt{0} ()\l88 <- Adt{0} ()\lCall\l"];
    Xd232903ecd9ed830_36 -> Xd232903ecd9ed830_37 [label="89"];
    Xd232903ecd9ed830_36 [label="90 <- & 3\l91 <- Use(const &spl_token_interface::state::account_state::AccountState)\lCall\l"];
    Xd232903ecd9ed830_37 -> Xd232903ecd9ed830_41 [label="0"];
    Xd232903ecd9ed830_37 -> Xd232903ecd9ed830_38 [label="other"];
    Xd232903ecd9ed830_37 [label="SwitchInt mv(89)\l"];
    Xd232903ecd9ed830_38 -> Xd232903ecd9ed830_39 [label="97"];
    Xd232903ecd9ed830_38 [label="93 <- & 43\l94 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l92 <- Tuple (mv(93), mv(94))\l95 <- Use(cp(92.0))\l96 <- Use(cp(92.1))\lCall\l"];
    Xd232903ecd9ed830_39 -> Xd232903ecd9ed830_40 [label="0"];
    Xd232903ecd9ed830_39 -> Xd232903ecd9ed830_109 [label="other"];
    Xd232903ecd9ed830_39 [label="SwitchInt mv(97)\l"];
    Xd232903ecd9ed830_40 [label="98 <- Adt{0} ()\l100 <- Adt{0} ()\lCall\l"];
    Xd232903ecd9ed830_41 -> Xd232903ecd9ed830_42;
    Xd232903ecd9ed830_41 [label="104 <- Use(const ?_usize)\l105 <- Use(const ?_usize)\l106 <- Lt(cp(104), cp(105))\lAssert mv(106) == true\l"];
    Xd232903ecd9ed830_42 -> Xd232903ecd9ed830_43 [label="102"];
    Xd232903ecd9ed830_42 [label="103 <- & (*1)[_104]\lCall\l"];
    Xd232903ecd9ed830_43 -> Xd232903ecd9ed830_47 [label="0"];
    Xd232903ecd9ed830_43 -> Xd232903ecd9ed830_44 [label="other"];
    Xd232903ecd9ed830_43 [label="101 <- Lt(mv(102), cp(13))\lSwitchInt mv(101)\l"];
    Xd232903ecd9ed830_44 -> Xd232903ecd9ed830_45 [label="112"];
    Xd232903ecd9ed830_44 [label="108 <- & 43\l109 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l107 <- Tuple (mv(108), mv(109))\l110 <- Use(cp(107.0))\l111 <- Use(cp(107.1))\lCall\l"];
    Xd232903ecd9ed830_45 -> Xd232903ecd9ed830_46 [label="0"];
    Xd232903ecd9ed830_45 -> Xd232903ecd9ed830_109 [label="other"];
    Xd232903ecd9ed830_45 [label="SwitchInt mv(112)\l"];
    Xd232903ecd9ed830_46 [label="113 <- Adt{0} ()\l115 <- Adt{0} ()\lCall\l"];
    Xd232903ecd9ed830_47 -> Xd232903ecd9ed830_48 [label="0"];
    Xd232903ecd9ed830_47 -> Xd232903ecd9ed830_55 [label="other"];
    Xd232903ecd9ed830_47 [label="SwitchInt cp(25)\l"];
    Xd232903ecd9ed830_48 -> Xd232903ecd9ed830_49;
    Xd232903ecd9ed830_48 [label="120 <- Use(const ?_usize)\l121 <- Use(const ?_usize)\l122 <- Lt(cp(120), cp(121))\lAssert mv(122) == true\l"];
    Xd232903ecd9ed830_49 -> Xd232903ecd9ed830_50 [label="118"];
    Xd232903ecd9ed830_49 [label="119 <- & (*1)[_120]\lCall\l"];
    Xd232903ecd9ed830_50 -> Xd232903ecd9ed830_51 [label="116"];
    Xd232903ecd9ed830_50 [label="117 <- & 118\l123 <- Use(const &&[u8; 32])\lCall\l"];
    Xd232903ecd9ed830_51 -> Xd232903ecd9ed830_55 [label="0"];
    Xd232903ecd9ed830_51 -> Xd232903ecd9ed830_52 [label="other"];
    Xd232903ecd9ed830_51 [label="SwitchInt mv(116)\l"];
    Xd232903ecd9ed830_52 -> Xd232903ecd9ed830_53 [label="129"];
    Xd232903ecd9ed830_52 [label="125 <- & 43\l126 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l124 <- Tuple (mv(125), mv(126))\l127 <- Use(cp(124.0))\l128 <- Use(cp(124.1))\lCall\l"];
    Xd232903ecd9ed830_53 -> Xd232903ecd9ed830_54 [label="0"];
    Xd232903ecd9ed830_53 -> Xd232903ecd9ed830_109 [label="other"];
    Xd232903ecd9ed830_53 [label="SwitchInt mv(129)\l"];
    Xd232903ecd9ed830_54 [label="130 <- Adt{0} ()\l132 <- Adt{0} ()\lCall\l"];
    Xd232903ecd9ed830_55 -> Xd232903ecd9ed830_56 [label="0"];
    Xd232903ecd9ed830_55 -> Xd232903ecd9ed830_65 [label="other"];
    Xd232903ecd9ed830_55 [label="SwitchInt cp(25)\l"];
    Xd232903ecd9ed830_56 -> Xd232903ecd9ed830_57;
    Xd232903ecd9ed830_56 [label="137 <- Use(const ?_usize)\l138 <- Use(const ?_usize)\l139 <- Lt(cp(137), cp(138))\lAssert mv(139) == true\l"];
    Xd232903ecd9ed830_57 -> Xd232903ecd9ed830_58 [label="135"];
    Xd232903ecd9ed830_57 [label="136 <- & (*1)[_137]\lCall\l"];
    Xd232903ecd9ed830_58 -> Xd232903ecd9ed830_59 [label="133"];
    Xd232903ecd9ed830_58 [label="134 <- & 135\l140 <- Use(const &&[u8; 32])\lCall\l"];
    Xd232903ecd9ed830_59 -> Xd232903ecd9ed830_65 [label="0"];
    Xd232903ecd9ed830_59 -> Xd232903ecd9ed830_60 [label="other"];
    Xd232903ecd9ed830_59 [label="SwitchInt mv(133)\l"];
    Xd232903ecd9ed830_60 -> Xd232903ecd9ed830_61 [label="141"];
    Xd232903ecd9ed830_60 [label="Call\l"];
    Xd232903ecd9ed830_61 -> Xd232903ecd9ed830_62 [label="0"];
    Xd232903ecd9ed830_61 -> Xd232903ecd9ed830_65 [label="other"];
    Xd232903ecd9ed830_61 [label="SwitchInt mv(141)\l"];
    Xd232903ecd9ed830_62 -> Xd232903ecd9ed830_63 [label="147"];
    Xd232903ecd9ed830_62 [label="143 <- & 43\l144 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l142 <- Tuple (mv(143), mv(144))\l145 <- Use(cp(142.0))\l146 <- Use(cp(142.1))\lCall\l"];
    Xd232903ecd9ed830_63 -> Xd232903ecd9ed830_64 [label="0"];
    Xd232903ecd9ed830_63 -> Xd232903ecd9ed830_109 [label="other"];
    Xd232903ecd9ed830_63 [label="SwitchInt mv(147)\l"];
    Xd232903ecd9ed830_64 [label="148 <- Adt{0} ()\l150 <- Adt{0} ()\lCall\l"];
    Xd232903ecd9ed830_65 -> Xd232903ecd9ed830_66 [label="151"];
    Xd232903ecd9ed830_65 [label="152 <- & 43\lCall\l"];
    Xd232903ecd9ed830_66 -> Xd232903ecd9ed830_68 [label="0"];
    Xd232903ecd9ed830_66 -> Xd232903ecd9ed830_67 [label="other"];
    Xd232903ecd9ed830_66 [label="SwitchInt mv(151)\l"];
    Xd232903ecd9ed830_67 -> Xd232903ecd9ed830_69;
    Xd232903ecd9ed830_67 [label="160 <- & 2\l163 <- Use(const ?_usize)\l164 <- Use(const ?_usize)\l165 <- Lt(cp(163), cp(164))\lAssert mv(165) == true\l"];
    Xd232903ecd9ed830_68 [label="Call\l"];
    Xd232903ecd9ed830_69 -> Xd232903ecd9ed830_70 [label="159"];
    Xd232903ecd9ed830_69 [label="162 <- & (*1)[_163]\l161 <- Tuple (cp(162))\lCall\l"];
    Xd232903ecd9ed830_70 -> Xd232903ecd9ed830_71 [label="157"];
    Xd232903ecd9ed830_70 [label="158 <- & 159\lCall\l"];
    Xd232903ecd9ed830_71 -> Xd232903ecd9ed830_72 [label="156"];
    Xd232903ecd9ed830_71 [label="Call\l"];
    Xd232903ecd9ed830_72 -> Xd232903ecd9ed830_73 [label="169"];
    Xd232903ecd9ed830_72 [label="155 <- & 156\l166 <- Use(const &spl_token_interface::state::account_state::AccountState)\l154 <- Tuple (mv(155), mv(166))\l167 <- Use(cp(154.0))\l168 <- Use(cp(154.1))\lCall\l"];
    Xd232903ecd9ed830_73 -> Xd232903ecd9ed830_75 [label="0"];
    Xd232903ecd9ed830_73 -> Xd232903ecd9ed830_74 [label="other"];
    Xd232903ecd9ed830_73 [label="SwitchInt mv(169)\l"];
    Xd232903ecd9ed830_74 -> Xd232903ecd9ed830_76;
    Xd232903ecd9ed830_74 [label="176 <- & 2\l179 <- Use(const ?_usize)\l180 <- Use(const ?_usize)\l181 <- Lt(cp(179), cp(180))\lAssert mv(181) == true\l"];
    Xd232903ecd9ed830_75 [label="170 <- Adt{0} ()\l172 <- Adt{0} ()\lCall\l"];
    Xd232903ecd9ed830_76 -> Xd232903ecd9ed830_77 [label="175"];
    Xd232903ecd9ed830_76 [label="178 <- & (*1)[_179]\l177 <- Tuple (cp(178))\lCall\l"];
    Xd232903ecd9ed830_77 -> Xd232903ecd9ed830_78;
    Xd232903ecd9ed830_77 [label="174 <- & 175.0\l184 <- Use(const ?_usize)\l185 <- Use(const ?_usize)\l186 <- Lt(cp(184), cp(185))\lAssert mv(186) == true\l"];
    Xd232903ecd9ed830_78 -> Xd232903ecd9ed830_79 [label="182"];
    Xd232903ecd9ed830_78 [label="183 <- & (*1)[_184]\lCall\l"];
    Xd232903ecd9ed830_79 -> Xd232903ecd9ed830_80 [label="189"];
    Xd232903ecd9ed830_79 [label="173 <- Tuple (mv(174), cp(182))\l187 <- Use(cp(173.0))\l188 <- Use(cp(173.1))\lCall\l"];
    Xd232903ecd9ed830_80 -> Xd232903ecd9ed830_82 [label="0"];
    Xd232903ecd9ed830_80 -> Xd232903ecd9ed830_81 [label="other"];
    Xd232903ecd9ed830_80 [label="SwitchInt mv(189)\l"];
    Xd232903ecd9ed830_81 -> Xd232903ecd9ed830_83;
    Xd232903ecd9ed830_81 [label="196 <- & 2\l199 <- Use(const ?_usize)\l200 <- Use(const ?_usize)\l201 <- Lt(cp(199), cp(200))\lAssert mv(201) == true\l"];
    Xd232903ecd9ed830_82 [label="190 <- Adt{0} ()\l192 <- Adt{0} ()\lCall\l"];
    Xd232903ecd9ed830_83 -> Xd232903ecd9ed830_84 [label="195"];
    Xd232903ecd9ed830_83 [label="198 <- & (*1)[_199]\l197 <- Tuple (cp(198))\lCall\l"];
    Xd232903ecd9ed830_84 -> Xd232903ecd9ed830_85;
    Xd232903ecd9ed830_84 [label="194 <- & 195.1\l204 <- Use(const ?_usize)\l205 <- Use(const ?_usize)\l206 <- Lt(cp(204), cp(205))\lAssert mv(206) == true\l"];
    Xd232903ecd9ed830_85 -> Xd232903ecd9ed830_86 [label="202"];
    Xd232903ecd9ed830_85 [label="203 <- & (*1)[_204]\lCall\l"];
    Xd232903ecd9ed830_86 -> Xd232903ecd9ed830_87 [label="209"];
    Xd232903ecd9ed830_86 [label="193 <- Tuple (mv(194), cp(202))\l207 <- Use(cp(193.0))\l208 <- Use(cp(193.1))\lCall\l"];
    Xd232903ecd9ed830_87 -> Xd232903ecd9ed830_89 [label="0"];
    Xd232903ecd9ed830_87 -> Xd232903ecd9ed830_88 [label="other"];
    Xd232903ecd9ed830_87 [label="SwitchInt mv(209)\l"];
    Xd232903ecd9ed830_88 -> Xd232903ecd9ed830_109 [label="0"];
    Xd232903ecd9ed830_88 -> Xd232903ecd9ed830_90 [label="other"];
    Xd232903ecd9ed830_88 [label="SwitchInt cp(25)\l"];
    Xd232903ecd9ed830_89 [label="210 <- Adt{0} ()\l212 <- Adt{0} ()\lCall\l"];
    Xd232903ecd9ed830_90 -> Xd232903ecd9ed830_91;
    Xd232903ecd9ed830_90 [label="216 <- & 2\l219 <- Use(const ?_usize)\l220 <- Use(const ?_usize)\l221 <- Lt(cp(219), cp(220))\lAssert mv(221) == true\l"];
    Xd232903ecd9ed830_91 -> Xd232903ecd9ed830_92 [label="215"];
    Xd232903ecd9ed830_91 [label="218 <- & (*1)[_219]\l217 <- Tuple (cp(218))\lCall\l"];
    Xd232903ecd9ed830_92 -> Xd232903ecd9ed830_93 [label="213"];
    Xd232903ecd9ed830_92 [label="214 <- & 215\lCall\l"];
    Xd232903ecd9ed830_93 -> Xd232903ecd9ed830_95 [label="0"];
    Xd232903ecd9ed830_93 -> Xd232903ecd9ed830_94 [label="other"];
    Xd232903ecd9ed830_93 [label="SwitchInt mv(213)\l"];
    Xd232903ecd9ed830_94 -> Xd232903ecd9ed830_96;
    Xd232903ecd9ed830_94 [label="229 <- & 2\l232 <- Use(const ?_usize)\l233 <- Use(const ?_usize)\l234 <- Lt(cp(232), cp(233))\lAssert mv(234) == true\l"];
    Xd232903ecd9ed830_95 [label="Call\l"];
    Xd232903ecd9ed830_96 -> Xd232903ecd9ed830_97 [label="228"];
    Xd232903ecd9ed830_96 [label="231 <- & (*1)[_232]\l230 <- Tuple (cp(231))\lCall\l"];
    Xd232903ecd9ed830_97 -> Xd232903ecd9ed830_98 [label="226"];
    Xd232903ecd9ed830_97 [label="227 <- & 228\lCall\l"];
    Xd232903ecd9ed830_98 -> Xd232903ecd9ed830_99 [label="225"];
    Xd232903ecd9ed830_98 [label="Call\l"];
    Xd232903ecd9ed830_99 -> Xd232903ecd9ed830_101 [label="0"];
    Xd232903ecd9ed830_99 -> Xd232903ecd9ed830_100 [label="other"];
    Xd232903ecd9ed830_99 [label="224 <- & 225\l235 <- & 13\l223 <- Tuple (mv(224), mv(235))\l236 <- Use(cp(223.0))\l237 <- Use(cp(223.1))\l239 <- Use(cp((*236)))\l240 <- Use(cp((*237)))\l238 <- Eq(mv(239), mv(240))\lSwitchInt mv(238)\l"];
    Xd232903ecd9ed830_100 -> Xd232903ecd9ed830_102;
    Xd232903ecd9ed830_100 [label="249 <- & 2\l252 <- Use(const ?_usize)\l253 <- Use(const ?_usize)\l254 <- Lt(cp(252), cp(253))\lAssert mv(254) == true\l"];
    Xd232903ecd9ed830_101 [label="241 <- Adt{0} ()\l243 <- Adt{0} ()\lCall\l"];
    Xd232903ecd9ed830_102 -> Xd232903ecd9ed830_103 [label="248"];
    Xd232903ecd9ed830_102 [label="251 <- & (*1)[_252]\l250 <- Tuple (cp(251))\lCall\l"];
    Xd232903ecd9ed830_103 -> Xd232903ecd9ed830_104 [label="246"];
    Xd232903ecd9ed830_103 [label="247 <- & 248\lCall\l"];
    Xd232903ecd9ed830_104 -> Xd232903ecd9ed830_105;
    Xd232903ecd9ed830_104 [label="245 <- & 246\l259 <- Use(const ?_usize)\l260 <- Use(const ?_usize)\l261 <- Lt(cp(259), cp(260))\lAssert mv(261) == true\l"];
    Xd232903ecd9ed830_105 -> Xd232903ecd9ed830_106 [label="257"];
    Xd232903ecd9ed830_105 [label="258 <- & (*1)[_259]\lCall\l"];
    Xd232903ecd9ed830_106 -> Xd232903ecd9ed830_107;
    Xd232903ecd9ed830_106 [label="262 <- chkd-Sub(cp(257), cp(13))\lAssert mv(262.1) == false\l"];
    Xd232903ecd9ed830_107 -> Xd232903ecd9ed830_108 [label="0"];
    Xd232903ecd9ed830_107 -> Xd232903ecd9ed830_109 [label="other"];
    Xd232903ecd9ed830_107 [label="256 <- Use(mv(262.0))\l255 <- & 256\l244 <- Tuple (mv(245), mv(255))\l263 <- Use(cp(244.0))\l264 <- Use(cp(244.1))\l266 <- Use(cp((*263)))\l267 <- Use(cp((*264)))\l265 <- Eq(mv(266), mv(267))\lSwitchInt mv(265)\l"];
    Xd232903ecd9ed830_108 [label="268 <- Adt{0} ()\l270 <- Adt{0} ()\lCall\l"];
    Xd232903ecd9ed830_109 [label="0 <- Use(mv(43))\lReturn\l"];
  }
  Xd232903ecd9ed830_1 -> Xf61ddd0ea5efe8e3_0 [label="mv(7),mv(8)"];
  Xd232903ecd9ed830_2 -> Xd5c95dfb9809593b_0 [label="mv(5)"];
  Xd232903ecd9ed830_3 -> Xca79d860634e64da_0 [label="mv(4)"];
  Xd232903ecd9ed830_5 -> Xd87d8e0f8c4953f_0 [label="mv(16)"];
  Xd232903ecd9ed830_6 -> Xc3348c6747a1f406_0 [label="cp(15)"];
  Xd232903ecd9ed830_8 -> X499a64bd2ee6dafa_0 [label="mv(21)"];
  Xd232903ecd9ed830_9 -> X3036df73713f23cc_0 [label="cp(14),mv(20)"];
  Xd232903ecd9ed830_11 -> X8817de218f598320_0 [label="mv(28)"];
  Xd232903ecd9ed830_12 -> X62e1ca1dfa9f1ff9_0 [label="mv(26),mv(32)"];
  Xd232903ecd9ed830_14 -> Xd87d8e0f8c4953f_0 [label="mv(39)"];
  Xd232903ecd9ed830_15 -> X5e85acfe8a19755e_0 [label="cp(38)"];
  Xd232903ecd9ed830_16 -> X80b73d35b2577076_0 [label="mv(36)"];
  Xd232903ecd9ed830_17 -> Xfda868f8ceb54b0b_0 [label="mv(34)"];
  Xd232903ecd9ed830_18 -> X6dbdfb2e67509203_0 [label="mv(44)"];
  Xd232903ecd9ed830_20 -> X9d133aa780502b33_0 [label="cp(51),cp(52)"];
  Xd232903ecd9ed830_22 -> X1badff0345f2ca99_0 [label="mv(54),cp(51),cp(52),mv(56)"];
  Xd232903ecd9ed830_24 -> X8817de218f598320_0 [label="mv(60)"];
  Xd232903ecd9ed830_25 -> X5d6c1de00eb04104_0 [label="mv(58),mv(64)"];
  Xd232903ecd9ed830_27 -> X9d133aa780502b33_0 [label="cp(68),cp(69)"];
  Xd232903ecd9ed830_29 -> X1badff0345f2ca99_0 [label="mv(71),cp(68),cp(69),mv(73)"];
  Xd232903ecd9ed830_31 -> X499a64bd2ee6dafa_0 [label="mv(76)"];
  Xd232903ecd9ed830_33 -> X9d133aa780502b33_0 [label="cp(83),cp(84)"];
  Xd232903ecd9ed830_35 -> X1badff0345f2ca99_0 [label="mv(86),cp(83),cp(84),mv(88)"];
  Xd232903ecd9ed830_36 -> Xd5b4a5747e6ff805_0 [label="mv(90),mv(91)"];
  Xd232903ecd9ed830_38 -> X9d133aa780502b33_0 [label="cp(95),cp(96)"];
  Xd232903ecd9ed830_40 -> X1badff0345f2ca99_0 [label="mv(98),cp(95),cp(96),mv(100)"];
  Xd232903ecd9ed830_42 -> X91937cb3b305cbc5_0 [label="mv(103)"];
  Xd232903ecd9ed830_44 -> X9d133aa780502b33_0 [label="cp(110),cp(111)"];
  Xd232903ecd9ed830_46 -> X1badff0345f2ca99_0 [label="mv(113),cp(110),cp(111),mv(115)"];
  Xd232903ecd9ed830_49 -> X63a66dd16cbd53fd_0 [label="mv(119)"];
  Xd232903ecd9ed830_50 -> X5d6c1de00eb04104_0 [label="mv(117),mv(123)"];
  Xd232903ecd9ed830_52 -> X9d133aa780502b33_0 [label="cp(127),cp(128)"];
  Xd232903ecd9ed830_54 -> X1badff0345f2ca99_0 [label="mv(130),cp(127),cp(128),mv(132)"];
  Xd232903ecd9ed830_57 -> X63a66dd16cbd53fd_0 [label="mv(136)"];
  Xd232903ecd9ed830_58 -> X62e1ca1dfa9f1ff9_0 [label="mv(134),mv(140)"];
  Xd232903ecd9ed830_60 -> X89be5f95c133d42a_0 [label="mv(33)"];
  Xd232903ecd9ed830_62 -> X9d133aa780502b33_0 [label="cp(145),cp(146)"];
  Xd232903ecd9ed830_64 -> X1badff0345f2ca99_0 [label="mv(148),cp(145),cp(146),mv(150)"];
  Xd232903ecd9ed830_65 -> X19e8b93c837642e3_0 [label="mv(152)"];
  Xd232903ecd9ed830_68 -> Xac08878333d72e42_0 [label="const &str"];
  Xd232903ecd9ed830_69 -> Xf61ddd0ea5efe8e3_0 [label="mv(160),mv(161)"];
  Xd232903ecd9ed830_70 -> Xd5c95dfb9809593b_0 [label="mv(158)"];
  Xd232903ecd9ed830_71 -> Xca79d860634e64da_0 [label="mv(157)"];
  Xd232903ecd9ed830_72 -> X92c90d3df5004379_0 [label="cp(167),cp(168)"];
  Xd232903ecd9ed830_75 -> X8dbb979e53789c78_0 [label="mv(170),cp(167),cp(168),mv(172)"];
  Xd232903ecd9ed830_76 -> Xf61ddd0ea5efe8e3_0 [label="mv(176),mv(177)"];
  Xd232903ecd9ed830_78 -> X8817de218f598320_0 [label="mv(183)"];
  Xd232903ecd9ed830_79 -> Xe9ad0bcad84fb4ac_0 [label="cp(187),cp(188)"];
  Xd232903ecd9ed830_82 -> X844355eb68dec65_0 [label="mv(190),cp(187),cp(188),mv(192)"];
  Xd232903ecd9ed830_83 -> Xf61ddd0ea5efe8e3_0 [label="mv(196),mv(197)"];
  Xd232903ecd9ed830_85 -> X8817de218f598320_0 [label="mv(203)"];
  Xd232903ecd9ed830_86 -> Xe9ad0bcad84fb4ac_0 [label="cp(207),cp(208)"];
  Xd232903ecd9ed830_89 -> X844355eb68dec65_0 [label="mv(210),cp(207),cp(208),mv(212)"];
  Xd232903ecd9ed830_91 -> Xf61ddd0ea5efe8e3_0 [label="mv(216),mv(217)"];
  Xd232903ecd9ed830_92 -> X439fceefbd0e681_0 [label="mv(214)"];
  Xd232903ecd9ed830_95 -> Xac08878333d72e42_0 [label="const &str"];
  Xd232903ecd9ed830_96 -> Xf61ddd0ea5efe8e3_0 [label="mv(229),mv(230)"];
  Xd232903ecd9ed830_97 -> X2ac947ac9fa596e2_0 [label="mv(227)"];
  Xd232903ecd9ed830_98 -> X7d5c5735aaa5a26c_0 [label="mv(226)"];
  Xd232903ecd9ed830_101 -> X38c69241c4d95178_0 [label="mv(241),cp(236),cp(237),mv(243)"];
  Xd232903ecd9ed830_102 -> Xf61ddd0ea5efe8e3_0 [label="mv(249),mv(250)"];
  Xd232903ecd9ed830_103 -> Xfeb9911cbc7a7b7a_0 [label="mv(247)"];
  Xd232903ecd9ed830_105 -> X91937cb3b305cbc5_0 [label="mv(258)"];
  Xd232903ecd9ed830_108 -> X38c69241c4d95178_0 [label="mv(268),cp(263),cp(264),mv(270)"];
  subgraph cluster_56 {
    label="entrypoint::test_process_\ninitialize_account::{clos\nure#0}";
    style="filled";
    color=lightgray;
    node_57 [label="LOCALS\l0 = spl_token_interface::state::account::Account\l1 = &{closure@p-token/src/entrypoint.rs:498:23: 498:51}\l2 = &pinocchio::account_info::AccountInfo\l3 = *const spl_token_interface::state::account::Account\l4 = *const u8\l5 = &[u8]\l", style="filled", color=palegreen3];
    Xf61ddd0ea5efe8e3_0 -> Xf61ddd0ea5efe8e3_1 [label="5"];
    Xf61ddd0ea5efe8e3_0 [label="Call\l"];
    Xf61ddd0ea5efe8e3_1 -> Xf61ddd0ea5efe8e3_2 [label="4"];
    Xf61ddd0ea5efe8e3_1 [label="Call\l"];
    Xf61ddd0ea5efe8e3_2 -> Xf61ddd0ea5efe8e3_3 [label="0"];
    Xf61ddd0ea5efe8e3_2 [label="3 <- Cast-PtrToPtr mv(4)\lCall\l"];
    Xf61ddd0ea5efe8e3_3 [label="Return\l"];
  }
  Xf61ddd0ea5efe8e3_0 -> Xd87d8e0f8c4953f_0 [label="cp(2)"];
  Xf61ddd0ea5efe8e3_1 -> X5e85acfe8a19755e_0 [label="cp(5)"];
  Xf61ddd0ea5efe8e3_2 -> X7dc6a8245be12621_0 [label="mv(3)"];
  subgraph cluster_58 {
    label="entrypoint::log_error";
    style="filled";
    color=lightgray;
    node_59 [label="LOCALS\l0 = ()\l1 = &pinocchio::program_error::ProgramError\l2 = ()\l3 = &str\l", style="filled", color=palegreen3];
    X8c6785085c39bd7a_0 -> X8c6785085c39bd7a_1 [label="3"];
    X8c6785085c39bd7a_0 [label="Call\l"];
    X8c6785085c39bd7a_1 -> X8c6785085c39bd7a_2 [label="2"];
    X8c6785085c39bd7a_1 [label="Call\l"];
    X8c6785085c39bd7a_2 [label="Return\l"];
  }
  X8c6785085c39bd7a_0 -> X5de8bd844887fb1f_0 [label="cp(1)"];
  X8c6785085c39bd7a_1 -> X3a0ccd4589f66f55_0 [label="cp(3)"];
  subgraph cluster_60 {
    label="processor::initialize_acc\nount::process_initialize_\naccount";
    style="filled";
    color=lightgray;
    node_61 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[pinocchio::account_info::AccountInfo]\l2 = core::option::Option<&[u8; 32]>\l", style="filled", color=palegreen3];
    X6dbdfb2e67509203_0 -> X6dbdfb2e67509203_1 [label="0"];
    X6dbdfb2e67509203_0 [label="2 <- Adt{0} ()\lCall\l"];
    X6dbdfb2e67509203_1 [label="Return\l"];
  }
  X6dbdfb2e67509203_0 -> Xfb4fa17bb5eb7ccb_0 [label="cp(1),mv(2),const bool"];
  subgraph cluster_62 {
    label="processor::check_account_\nowner";
    style="filled";
    color=lightgray;
    node_63 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &pinocchio::account_info::AccountInfo\l2 = bool\l3 = &[u8; 32]\l4 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X234cb1e57fb61e21_0 -> X234cb1e57fb61e21_1 [label="2"];
    X234cb1e57fb61e21_0 [label="3 <- Use(const &[u8; 32])\lCall\l"];
    X234cb1e57fb61e21_1 -> X234cb1e57fb61e21_3 [label="0"];
    X234cb1e57fb61e21_1 -> X234cb1e57fb61e21_2 [label="other"];
    X234cb1e57fb61e21_1 [label="SwitchInt mv(2)\l"];
    X234cb1e57fb61e21_2 -> X234cb1e57fb61e21_4;
    X234cb1e57fb61e21_2 [label="0 <- Adt{0} (const ())\lGoto\l"];
    X234cb1e57fb61e21_3 -> X234cb1e57fb61e21_4;
    X234cb1e57fb61e21_3 [label="4 <- Adt{6} ()\l0 <- Adt{1} (mv(4))\lGoto\l"];
    X234cb1e57fb61e21_4 [label="Return\l"];
  }
  X234cb1e57fb61e21_0 -> X8f13c009139e5cec_0 [label="cp(1),cp(3)"];
  subgraph cluster_64 {
    label="processor::batch::process\n_batch";
    style="filled";
    color=lightgray;
    node_65 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[pinocchio::account_info::AccountInfo]\l2 = &[u8]\l3 = bool\l4 = usize\l5 = &[u8]\l6 = pinocchio::program_error::ProgramError\l7 = spl_token_interface::error::TokenError\l8 = usize\l9 = u8\l10 = &u8\l11 = &[u8]\l12 = usize\l13 = usize\l14 = u8\l15 = &u8\l16 = &[u8]\l17 = (usize, bool)\l18 = bool\l19 = usize\l20 = &[u8]\l21 = bool\l22 = pinocchio::program_error::ProgramError\l23 = spl_token_interface::error::TokenError\l24 = bool\l25 = usize\l26 = &[pinocchio::account_info::AccountInfo]\l27 = pinocchio::program_error::ProgramError\l28 = &[pinocchio::account_info::AccountInfo]\l29 = &[u8]\l30 = (&[pinocchio::account_info::AccountInfo], &[u8])\l31 = &[pinocchio::account_info::AccountInfo]\l32 = &[pinocchio::account_info::AccountInfo]\l33 = core::ops::RangeTo<usize>\l34 = &[u8]\l35 = &[u8]\l36 = core::ops::Range<usize>\l37 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>>\l38 = core::result::Result<(), pinocchio::program_error::ProgramError>\l39 = isize\l40 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l41 = bool\l42 = usize\l43 = &[u8]\l44 = &[pinocchio::account_info::AccountInfo]\l45 = &[pinocchio::account_info::AccountInfo]\l46 = core::ops::RangeFrom<usize>\l47 = &[u8]\l48 = &[u8]\l49 = core::ops::RangeFrom<usize>\l", style="filled", color=palegreen3];
    Xfd5a8332d4d69684_0 -> Xfd5a8332d4d69684_1;
    Xfd5a8332d4d69684_0 [label="Goto\l"];
    Xfd5a8332d4d69684_1 -> Xfd5a8332d4d69684_4 [label="0"];
    Xfd5a8332d4d69684_1 -> Xfd5a8332d4d69684_2 [label="other"];
    Xfd5a8332d4d69684_1 [label="5 <- Use(cp(2))\l4 <- PtrMetadata(mv(5))\l3 <- Lt(mv(4), const ?_usize)\lSwitchInt mv(3)\l"];
    Xfd5a8332d4d69684_2 -> Xfd5a8332d4d69684_3 [label="6"];
    Xfd5a8332d4d69684_2 [label="7 <- Adt{12} ()\lCall\l"];
    Xfd5a8332d4d69684_3 -> Xfd5a8332d4d69684_25;
    Xfd5a8332d4d69684_3 [label="0 <- Adt{1} (mv(6))\lGoto\l"];
    Xfd5a8332d4d69684_4 -> Xfd5a8332d4d69684_5 [label="10"];
    Xfd5a8332d4d69684_4 [label="11 <- Use(cp(2))\lCall\l"];
    Xfd5a8332d4d69684_5 -> Xfd5a8332d4d69684_6 [label="15"];
    Xfd5a8332d4d69684_5 [label="9 <- Use(cp((*10)))\l8 <- Cast-IntToInt mv(9)\l16 <- Use(cp(2))\lCall\l"];
    Xfd5a8332d4d69684_6 -> Xfd5a8332d4d69684_7;
    Xfd5a8332d4d69684_6 [label="14 <- Use(cp((*15)))\l13 <- Cast-IntToInt mv(14)\l17 <- chkd-Add(const ?_usize, cp(13))\lAssert mv(17.1) == false\l"];
    Xfd5a8332d4d69684_7 -> Xfd5a8332d4d69684_8 [label="0"];
    Xfd5a8332d4d69684_7 -> Xfd5a8332d4d69684_9 [label="other"];
    Xfd5a8332d4d69684_7 [label="12 <- Use(mv(17.0))\l20 <- Use(cp(2))\l19 <- PtrMetadata(mv(20))\l18 <- Lt(mv(19), cp(12))\lSwitchInt mv(18)\l"];
    Xfd5a8332d4d69684_8 -> Xfd5a8332d4d69684_11 [label="0"];
    Xfd5a8332d4d69684_8 -> Xfd5a8332d4d69684_9 [label="other"];
    Xfd5a8332d4d69684_8 [label="21 <- Eq(cp(12), const ?_usize)\lSwitchInt mv(21)\l"];
    Xfd5a8332d4d69684_9 -> Xfd5a8332d4d69684_10 [label="22"];
    Xfd5a8332d4d69684_9 [label="23 <- Adt{12} ()\lCall\l"];
    Xfd5a8332d4d69684_10 -> Xfd5a8332d4d69684_25;
    Xfd5a8332d4d69684_10 [label="0 <- Adt{1} (mv(22))\lGoto\l"];
    Xfd5a8332d4d69684_11 -> Xfd5a8332d4d69684_13 [label="0"];
    Xfd5a8332d4d69684_11 -> Xfd5a8332d4d69684_12 [label="other"];
    Xfd5a8332d4d69684_11 [label="26 <- Use(cp(1))\l25 <- PtrMetadata(mv(26))\l24 <- Lt(mv(25), cp(8))\lSwitchInt mv(24)\l"];
    Xfd5a8332d4d69684_12 -> Xfd5a8332d4d69684_25;
    Xfd5a8332d4d69684_12 [label="27 <- Adt{10} ()\l0 <- Adt{1} (mv(27))\lGoto\l"];
    Xfd5a8332d4d69684_13 -> Xfd5a8332d4d69684_14 [label="31"];
    Xfd5a8332d4d69684_13 [label="32 <- Use(cp(1))\l33 <- Adt{0} (cp(8))\lCall\l"];
    Xfd5a8332d4d69684_14 -> Xfd5a8332d4d69684_15 [label="34"];
    Xfd5a8332d4d69684_14 [label="35 <- Use(cp(2))\l36 <- Adt{0} (const ?_usize, cp(12))\lCall\l"];
    Xfd5a8332d4d69684_15 -> Xfd5a8332d4d69684_16 [label="38"];
    Xfd5a8332d4d69684_15 [label="30 <- Tuple (mv(31), mv(34))\l28 <- Use(cp(30.0))\l29 <- Use(cp(30.1))\lCall\l"];
    Xfd5a8332d4d69684_16 -> Xfd5a8332d4d69684_17 [label="37"];
    Xfd5a8332d4d69684_16 [label="Call\l"];
    Xfd5a8332d4d69684_17 -> Xfd5a8332d4d69684_19 [label="0"];
    Xfd5a8332d4d69684_17 -> Xfd5a8332d4d69684_20 [label="1"];
    Xfd5a8332d4d69684_17 -> Xfd5a8332d4d69684_18 [label="other"];
    Xfd5a8332d4d69684_17 [label="39 <- Discriminant(37)\lSwitchInt mv(39)\l"];
    Xfd5a8332d4d69684_18 [label="Unreachable\l"];
    Xfd5a8332d4d69684_19 -> Xfd5a8332d4d69684_22 [label="0"];
    Xfd5a8332d4d69684_19 -> Xfd5a8332d4d69684_21 [label="other"];
    Xfd5a8332d4d69684_19 [label="43 <- Use(cp(2))\l42 <- PtrMetadata(mv(43))\l41 <- Eq(cp(12), mv(42))\lSwitchInt mv(41)\l"];
    Xfd5a8332d4d69684_20 -> Xfd5a8332d4d69684_25 [label="0"];
    Xfd5a8332d4d69684_20 [label="40 <- Use(mv((37 as variant 1).0))\lCall\l"];
    Xfd5a8332d4d69684_21 -> Xfd5a8332d4d69684_25;
    Xfd5a8332d4d69684_21 [label="0 <- Adt{0} (const ())\lGoto\l"];
    Xfd5a8332d4d69684_22 -> Xfd5a8332d4d69684_23 [label="44"];
    Xfd5a8332d4d69684_22 [label="45 <- Use(cp(1))\l46 <- Adt{0} (cp(8))\lCall\l"];
    Xfd5a8332d4d69684_23 -> Xfd5a8332d4d69684_24 [label="47"];
    Xfd5a8332d4d69684_23 [label="1 <- Use(cp(44))\l48 <- Use(cp(2))\l49 <- Adt{0} (cp(12))\lCall\l"];
    Xfd5a8332d4d69684_24 -> Xfd5a8332d4d69684_1;
    Xfd5a8332d4d69684_24 [label="2 <- Use(cp(47))\lGoto\l"];
    Xfd5a8332d4d69684_25 [label="Return\l"];
  }
  Xfd5a8332d4d69684_2 -> X3e3db5977da52381_0 [label="mv(7)"];
  Xfd5a8332d4d69684_4 -> Xe2dd8d6d8ab56bef_0 [label="mv(11),const ?_usize"];
  Xfd5a8332d4d69684_5 -> Xe2dd8d6d8ab56bef_0 [label="mv(16),const ?_usize"];
  Xfd5a8332d4d69684_9 -> X3e3db5977da52381_0 [label="mv(23)"];
  Xfd5a8332d4d69684_13 -> X76d4fee106df2abc_0 [label="mv(32),mv(33)"];
  Xfd5a8332d4d69684_14 -> X63c3503b3e7fa274_0 [label="mv(35),mv(36)"];
  Xfd5a8332d4d69684_15 -> Xdb069c516746123a_0 [label="cp(28),cp(29)"];
  Xfd5a8332d4d69684_16 -> X2272e127fe823423_0 [label="mv(38)"];
  Xfd5a8332d4d69684_20 -> X5adbeff4b5cb293e_0 [label="mv(40)"];
  Xfd5a8332d4d69684_22 -> X7354e97359dec8c1_0 [label="mv(45),mv(46)"];
  Xfd5a8332d4d69684_23 -> Xac6bf6e65b32d0d0_0 [label="mv(48),mv(49)"];
  subgraph cluster_66 {
    label="processor::shared::initia\nlize_account::process_ini\ntialize_account";
    style="filled";
    color=lightgray;
    node_67 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[pinocchio::account_info::AccountInfo]\l2 = core::option::Option<&[u8; 32]>\l3 = bool\l4 = &pinocchio::account_info::AccountInfo\l5 = &pinocchio::account_info::AccountInfo\l6 = &[u8; 32]\l7 = &[pinocchio::account_info::AccountInfo]\l8 = (&pinocchio::account_info::AccountInfo, &pinocchio::account_info::AccountInfo, &[u8; 32], &[pinocchio::account_info::AccountInfo])\l9 = isize\l10 = &[u8; 32]\l11 = pinocchio::program_error::ProgramError\l12 = &pinocchio::account_info::AccountInfo\l13 = &pinocchio::account_info::AccountInfo\l14 = &[pinocchio::account_info::AccountInfo]\l15 = usize\l16 = bool\l17 = pinocchio::program_error::ProgramError\l18 = &pinocchio::account_info::AccountInfo\l19 = &pinocchio::account_info::AccountInfo\l20 = &pinocchio::account_info::AccountInfo\l21 = &[pinocchio::account_info::AccountInfo]\l22 = usize\l23 = bool\l24 = &[u8; 32]\l25 = usize\l26 = u64\l27 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, &pinocchio::account_info::AccountInfo>\l28 = core::result::Result<&pinocchio::account_info::AccountInfo, pinocchio::program_error::ProgramError>\l29 = core::option::Option<&pinocchio::account_info::AccountInfo>\l30 = pinocchio::program_error::ProgramError\l31 = isize\l32 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l33 = &pinocchio::account_info::AccountInfo\l34 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, &pinocchio::sysvars::rent::Rent>\l35 = core::result::Result<&pinocchio::sysvars::rent::Rent, pinocchio::program_error::ProgramError>\l36 = isize\l37 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l38 = &pinocchio::sysvars::rent::Rent\l39 = &pinocchio::sysvars::rent::Rent\l40 = pinocchio::sysvars::rent::Rent\l41 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, pinocchio::sysvars::rent::Rent>\l42 = core::result::Result<pinocchio::sysvars::rent::Rent, pinocchio::program_error::ProgramError>\l43 = isize\l44 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l45 = pinocchio::sysvars::rent::Rent\l46 = bool\l47 = &[u8; 32]\l48 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, &mut spl_token_interface::state::account::Account>\l49 = core::result::Result<&mut spl_token_interface::state::account::Account, pinocchio::program_error::ProgramError>\l50 = &mut [u8]\l51 = isize\l52 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l53 = &mut spl_token_interface::state::account::Account\l54 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, bool>\l55 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l56 = &spl_token_interface::state::account::Account\l57 = isize\l58 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l59 = bool\l60 = pinocchio::program_error::ProgramError\l61 = spl_token_interface::error::TokenError\l62 = bool\l63 = u64\l64 = u64\l65 = pinocchio::program_error::ProgramError\l66 = spl_token_interface::error::TokenError\l67 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>>\l68 = core::result::Result<(), pinocchio::program_error::ProgramError>\l69 = isize\l70 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l71 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, spl_token_interface::error::TokenError>, &spl_token_interface::state::mint::Mint>\l72 = core::result::Result<&spl_token_interface::state::mint::Mint, spl_token_interface::error::TokenError>\l73 = core::result::Result<&spl_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l74 = &[u8]\l75 = isize\l76 = core::result::Result<core::convert::Infallible, spl_token_interface::error::TokenError>\l77 = &spl_token_interface::state::mint::Mint\l78 = ()\l79 = spl_token_interface::state::account_state::AccountState\l80 = [u8; 32]\l81 = &[u8; 32]\l82 = [u8; 32]\l83 = ()\l84 = ()\l85 = u64\l86 = ()\l87 = u64\l88 = u64\l89 = u64\l90 = (u64, bool)\l", style="filled", color=palegreen3];
    Xfb4fa17bb5eb7ccb_0 -> Xfb4fa17bb5eb7ccb_1 [label="1"];
    Xfb4fa17bb5eb7ccb_0 -> Xfb4fa17bb5eb7ccb_4 [label="0"];
    Xfb4fa17bb5eb7ccb_0 -> Xfb4fa17bb5eb7ccb_14 [label="other"];
    Xfb4fa17bb5eb7ccb_0 [label="9 <- Discriminant(2)\lSwitchInt mv(9)\l"];
    Xfb4fa17bb5eb7ccb_1 -> Xfb4fa17bb5eb7ccb_3 [label="0"];
    Xfb4fa17bb5eb7ccb_1 -> Xfb4fa17bb5eb7ccb_2 [label="other"];
    Xfb4fa17bb5eb7ccb_1 [label="10 <- Use(cp((2 as variant 1).0))\l15 <- Len((*1))\l16 <- Ge(mv(15), const ?_usize)\lSwitchInt mv(16)\l"];
    Xfb4fa17bb5eb7ccb_2 -> Xfb4fa17bb5eb7ccb_8;
    Xfb4fa17bb5eb7ccb_2 [label="12 <- & (*1)[0]\l13 <- & (*1)[1]\l14 <- & (*1)[2..-0]\l8 <- Tuple (cp(12), cp(13), cp(10), cp(14))\lGoto\l"];
    Xfb4fa17bb5eb7ccb_3 -> Xfb4fa17bb5eb7ccb_65;
    Xfb4fa17bb5eb7ccb_3 [label="11 <- Adt{10} ()\l0 <- Adt{1} (mv(11))\lGoto\l"];
    Xfb4fa17bb5eb7ccb_4 -> Xfb4fa17bb5eb7ccb_6 [label="0"];
    Xfb4fa17bb5eb7ccb_4 -> Xfb4fa17bb5eb7ccb_5 [label="other"];
    Xfb4fa17bb5eb7ccb_4 [label="22 <- Len((*1))\l23 <- Ge(mv(22), const ?_usize)\lSwitchInt mv(23)\l"];
    Xfb4fa17bb5eb7ccb_5 -> Xfb4fa17bb5eb7ccb_7 [label="24"];
    Xfb4fa17bb5eb7ccb_5 [label="18 <- & (*1)[0]\l19 <- & (*1)[1]\l20 <- & (*1)[2]\l21 <- & (*1)[3..-0]\lCall\l"];
    Xfb4fa17bb5eb7ccb_6 -> Xfb4fa17bb5eb7ccb_65;
    Xfb4fa17bb5eb7ccb_6 [label="17 <- Adt{10} ()\l0 <- Adt{1} (mv(17))\lGoto\l"];
    Xfb4fa17bb5eb7ccb_7 -> Xfb4fa17bb5eb7ccb_8;
    Xfb4fa17bb5eb7ccb_7 [label="8 <- Tuple (cp(18), cp(19), mv(24), cp(21))\lGoto\l"];
    Xfb4fa17bb5eb7ccb_8 -> Xfb4fa17bb5eb7ccb_9 [label="25"];
    Xfb4fa17bb5eb7ccb_8 [label="4 <- Use(cp(8.0))\l5 <- Use(cp(8.1))\l6 <- Use(cp(8.2))\l7 <- Use(cp(8.3))\lCall\l"];
    Xfb4fa17bb5eb7ccb_9 -> Xfb4fa17bb5eb7ccb_21 [label="0"];
    Xfb4fa17bb5eb7ccb_9 -> Xfb4fa17bb5eb7ccb_10 [label="other"];
    Xfb4fa17bb5eb7ccb_9 [label="SwitchInt cp(3)\l"];
    Xfb4fa17bb5eb7ccb_10 -> Xfb4fa17bb5eb7ccb_11 [label="29"];
    Xfb4fa17bb5eb7ccb_10 [label="Call\l"];
    Xfb4fa17bb5eb7ccb_11 -> Xfb4fa17bb5eb7ccb_12 [label="28"];
    Xfb4fa17bb5eb7ccb_11 [label="30 <- Adt{10} ()\lCall\l"];
    Xfb4fa17bb5eb7ccb_12 -> Xfb4fa17bb5eb7ccb_13 [label="27"];
    Xfb4fa17bb5eb7ccb_12 [label="Call\l"];
    Xfb4fa17bb5eb7ccb_13 -> Xfb4fa17bb5eb7ccb_15 [label="0"];
    Xfb4fa17bb5eb7ccb_13 -> Xfb4fa17bb5eb7ccb_16 [label="1"];
    Xfb4fa17bb5eb7ccb_13 -> Xfb4fa17bb5eb7ccb_14 [label="other"];
    Xfb4fa17bb5eb7ccb_13 [label="31 <- Discriminant(27)\lSwitchInt mv(31)\l"];
    Xfb4fa17bb5eb7ccb_14 [label="Unreachable\l"];
    Xfb4fa17bb5eb7ccb_15 -> Xfb4fa17bb5eb7ccb_17 [label="35"];
    Xfb4fa17bb5eb7ccb_15 [label="33 <- Use(cp((27 as variant 0).0))\lCall\l"];
    Xfb4fa17bb5eb7ccb_16 -> Xfb4fa17bb5eb7ccb_65 [label="0"];
    Xfb4fa17bb5eb7ccb_16 [label="32 <- Use(mv((27 as variant 1).0))\lCall\l"];
    Xfb4fa17bb5eb7ccb_17 -> Xfb4fa17bb5eb7ccb_18 [label="34"];
    Xfb4fa17bb5eb7ccb_17 [label="Call\l"];
    Xfb4fa17bb5eb7ccb_18 -> Xfb4fa17bb5eb7ccb_19 [label="0"];
    Xfb4fa17bb5eb7ccb_18 -> Xfb4fa17bb5eb7ccb_20 [label="1"];
    Xfb4fa17bb5eb7ccb_18 -> Xfb4fa17bb5eb7ccb_14 [label="other"];
    Xfb4fa17bb5eb7ccb_18 [label="36 <- Discriminant(34)\lSwitchInt mv(36)\l"];
    Xfb4fa17bb5eb7ccb_19 -> Xfb4fa17bb5eb7ccb_26 [label="26"];
    Xfb4fa17bb5eb7ccb_19 [label="38 <- Use(cp((34 as variant 0).0))\lCall\l"];
    Xfb4fa17bb5eb7ccb_20 -> Xfb4fa17bb5eb7ccb_65 [label="0"];
    Xfb4fa17bb5eb7ccb_20 [label="37 <- Use(mv((34 as variant 1).0))\lCall\l"];
    Xfb4fa17bb5eb7ccb_21 -> Xfb4fa17bb5eb7ccb_22 [label="42"];
    Xfb4fa17bb5eb7ccb_21 [label="Call\l"];
    Xfb4fa17bb5eb7ccb_22 -> Xfb4fa17bb5eb7ccb_23 [label="41"];
    Xfb4fa17bb5eb7ccb_22 [label="Call\l"];
    Xfb4fa17bb5eb7ccb_23 -> Xfb4fa17bb5eb7ccb_24 [label="0"];
    Xfb4fa17bb5eb7ccb_23 -> Xfb4fa17bb5eb7ccb_25 [label="1"];
    Xfb4fa17bb5eb7ccb_23 -> Xfb4fa17bb5eb7ccb_14 [label="other"];
    Xfb4fa17bb5eb7ccb_23 [label="43 <- Discriminant(41)\lSwitchInt mv(43)\l"];
    Xfb4fa17bb5eb7ccb_24 -> Xfb4fa17bb5eb7ccb_26 [label="26"];
    Xfb4fa17bb5eb7ccb_24 [label="45 <- Use(mv((41 as variant 0).0))\l40 <- Use(mv(45))\l39 <- & 40\lCall\l"];
    Xfb4fa17bb5eb7ccb_25 -> Xfb4fa17bb5eb7ccb_65 [label="0"];
    Xfb4fa17bb5eb7ccb_25 [label="44 <- Use(mv((41 as variant 1).0))\lCall\l"];
    Xfb4fa17bb5eb7ccb_26 -> Xfb4fa17bb5eb7ccb_27 [label="47"];
    Xfb4fa17bb5eb7ccb_26 [label="Call\l"];
    Xfb4fa17bb5eb7ccb_27 -> Xfb4fa17bb5eb7ccb_28 [label="46"];
    Xfb4fa17bb5eb7ccb_27 [label="Call\l"];
    Xfb4fa17bb5eb7ccb_28 -> Xfb4fa17bb5eb7ccb_29 [label="50"];
    Xfb4fa17bb5eb7ccb_28 [label="Call\l"];
    Xfb4fa17bb5eb7ccb_29 -> Xfb4fa17bb5eb7ccb_30 [label="49"];
    Xfb4fa17bb5eb7ccb_29 [label="Call\l"];
    Xfb4fa17bb5eb7ccb_30 -> Xfb4fa17bb5eb7ccb_31 [label="48"];
    Xfb4fa17bb5eb7ccb_30 [label="Call\l"];
    Xfb4fa17bb5eb7ccb_31 -> Xfb4fa17bb5eb7ccb_32 [label="0"];
    Xfb4fa17bb5eb7ccb_31 -> Xfb4fa17bb5eb7ccb_33 [label="1"];
    Xfb4fa17bb5eb7ccb_31 -> Xfb4fa17bb5eb7ccb_14 [label="other"];
    Xfb4fa17bb5eb7ccb_31 [label="51 <- Discriminant(48)\lSwitchInt mv(51)\l"];
    Xfb4fa17bb5eb7ccb_32 -> Xfb4fa17bb5eb7ccb_34 [label="55"];
    Xfb4fa17bb5eb7ccb_32 [label="53 <- Use(mv((48 as variant 0).0))\l56 <- & (*53)\lCall\l"];
    Xfb4fa17bb5eb7ccb_33 -> Xfb4fa17bb5eb7ccb_65 [label="0"];
    Xfb4fa17bb5eb7ccb_33 [label="52 <- Use(mv((48 as variant 1).0))\lCall\l"];
    Xfb4fa17bb5eb7ccb_34 -> Xfb4fa17bb5eb7ccb_35 [label="54"];
    Xfb4fa17bb5eb7ccb_34 [label="Call\l"];
    Xfb4fa17bb5eb7ccb_35 -> Xfb4fa17bb5eb7ccb_36 [label="0"];
    Xfb4fa17bb5eb7ccb_35 -> Xfb4fa17bb5eb7ccb_37 [label="1"];
    Xfb4fa17bb5eb7ccb_35 -> Xfb4fa17bb5eb7ccb_14 [label="other"];
    Xfb4fa17bb5eb7ccb_35 [label="57 <- Discriminant(54)\lSwitchInt mv(57)\l"];
    Xfb4fa17bb5eb7ccb_36 -> Xfb4fa17bb5eb7ccb_39 [label="0"];
    Xfb4fa17bb5eb7ccb_36 -> Xfb4fa17bb5eb7ccb_38 [label="other"];
    Xfb4fa17bb5eb7ccb_36 [label="59 <- Use(cp((54 as variant 0).0))\lSwitchInt cp(59)\l"];
    Xfb4fa17bb5eb7ccb_37 -> Xfb4fa17bb5eb7ccb_65 [label="0"];
    Xfb4fa17bb5eb7ccb_37 [label="58 <- Use(mv((54 as variant 1).0))\lCall\l"];
    Xfb4fa17bb5eb7ccb_38 -> Xfb4fa17bb5eb7ccb_40 [label="60"];
    Xfb4fa17bb5eb7ccb_38 [label="61 <- Adt{6} ()\lCall\l"];
    Xfb4fa17bb5eb7ccb_39 -> Xfb4fa17bb5eb7ccb_41 [label="63"];
    Xfb4fa17bb5eb7ccb_39 [label="Call\l"];
    Xfb4fa17bb5eb7ccb_40 -> Xfb4fa17bb5eb7ccb_65;
    Xfb4fa17bb5eb7ccb_40 [label="0 <- Adt{1} (mv(60))\lGoto\l"];
    Xfb4fa17bb5eb7ccb_41 -> Xfb4fa17bb5eb7ccb_44 [label="0"];
    Xfb4fa17bb5eb7ccb_41 -> Xfb4fa17bb5eb7ccb_42 [label="other"];
    Xfb4fa17bb5eb7ccb_41 [label="64 <- Use(cp(26))\l62 <- Lt(mv(63), mv(64))\lSwitchInt mv(62)\l"];
    Xfb4fa17bb5eb7ccb_42 -> Xfb4fa17bb5eb7ccb_43 [label="65"];
    Xfb4fa17bb5eb7ccb_42 [label="66 <- Adt{0} ()\lCall\l"];
    Xfb4fa17bb5eb7ccb_43 -> Xfb4fa17bb5eb7ccb_65;
    Xfb4fa17bb5eb7ccb_43 [label="0 <- Adt{1} (mv(65))\lGoto\l"];
    Xfb4fa17bb5eb7ccb_44 -> Xfb4fa17bb5eb7ccb_45 [label="0"];
    Xfb4fa17bb5eb7ccb_44 -> Xfb4fa17bb5eb7ccb_56 [label="other"];
    Xfb4fa17bb5eb7ccb_44 [label="SwitchInt cp(46)\l"];
    Xfb4fa17bb5eb7ccb_45 -> Xfb4fa17bb5eb7ccb_46 [label="68"];
    Xfb4fa17bb5eb7ccb_45 [label="Call\l"];
    Xfb4fa17bb5eb7ccb_46 -> Xfb4fa17bb5eb7ccb_47 [label="67"];
    Xfb4fa17bb5eb7ccb_46 [label="Call\l"];
    Xfb4fa17bb5eb7ccb_47 -> Xfb4fa17bb5eb7ccb_48 [label="0"];
    Xfb4fa17bb5eb7ccb_47 -> Xfb4fa17bb5eb7ccb_49 [label="1"];
    Xfb4fa17bb5eb7ccb_47 -> Xfb4fa17bb5eb7ccb_14 [label="other"];
    Xfb4fa17bb5eb7ccb_47 [label="69 <- Discriminant(67)\lSwitchInt mv(69)\l"];
    Xfb4fa17bb5eb7ccb_48 -> Xfb4fa17bb5eb7ccb_50 [label="74"];
    Xfb4fa17bb5eb7ccb_48 [label="Call\l"];
    Xfb4fa17bb5eb7ccb_49 -> Xfb4fa17bb5eb7ccb_65 [label="0"];
    Xfb4fa17bb5eb7ccb_49 [label="70 <- Use(mv((67 as variant 1).0))\lCall\l"];
    Xfb4fa17bb5eb7ccb_50 -> Xfb4fa17bb5eb7ccb_51 [label="73"];
    Xfb4fa17bb5eb7ccb_50 [label="Call\l"];
    Xfb4fa17bb5eb7ccb_51 -> Xfb4fa17bb5eb7ccb_52 [label="72"];
    Xfb4fa17bb5eb7ccb_51 [label="Call\l"];
    Xfb4fa17bb5eb7ccb_52 -> Xfb4fa17bb5eb7ccb_53 [label="71"];
    Xfb4fa17bb5eb7ccb_52 [label="Call\l"];
    Xfb4fa17bb5eb7ccb_53 -> Xfb4fa17bb5eb7ccb_54 [label="0"];
    Xfb4fa17bb5eb7ccb_53 -> Xfb4fa17bb5eb7ccb_55 [label="1"];
    Xfb4fa17bb5eb7ccb_53 -> Xfb4fa17bb5eb7ccb_14 [label="other"];
    Xfb4fa17bb5eb7ccb_53 [label="75 <- Discriminant(71)\lSwitchInt mv(75)\l"];
    Xfb4fa17bb5eb7ccb_54 -> Xfb4fa17bb5eb7ccb_56;
    Xfb4fa17bb5eb7ccb_54 [label="77 <- Use(cp((71 as variant 0).0))\lGoto\l"];
    Xfb4fa17bb5eb7ccb_55 -> Xfb4fa17bb5eb7ccb_65 [label="0"];
    Xfb4fa17bb5eb7ccb_55 [label="76 <- Use(mv((71 as variant 1).0))\lCall\l"];
    Xfb4fa17bb5eb7ccb_56 -> Xfb4fa17bb5eb7ccb_57 [label="78"];
    Xfb4fa17bb5eb7ccb_56 [label="79 <- Adt{1} ()\lCall\l"];
    Xfb4fa17bb5eb7ccb_57 -> Xfb4fa17bb5eb7ccb_58 [label="81"];
    Xfb4fa17bb5eb7ccb_57 [label="Call\l"];
    Xfb4fa17bb5eb7ccb_58 -> Xfb4fa17bb5eb7ccb_64 [label="0"];
    Xfb4fa17bb5eb7ccb_58 -> Xfb4fa17bb5eb7ccb_59 [label="other"];
    Xfb4fa17bb5eb7ccb_58 [label="80 <- Use(cp((*81)))\l(*53).0 <- Use(mv(80))\l82 <- Use(cp((*6)))\l(*53).1 <- Use(mv(82))\lSwitchInt cp(46)\l"];
    Xfb4fa17bb5eb7ccb_59 -> Xfb4fa17bb5eb7ccb_60 [label="83"];
    Xfb4fa17bb5eb7ccb_59 [label="Call\l"];
    Xfb4fa17bb5eb7ccb_60 -> Xfb4fa17bb5eb7ccb_61 [label="84"];
    Xfb4fa17bb5eb7ccb_60 [label="85 <- Use(cp(26))\lCall\l"];
    Xfb4fa17bb5eb7ccb_61 -> Xfb4fa17bb5eb7ccb_62 [label="88"];
    Xfb4fa17bb5eb7ccb_61 [label="Call\l"];
    Xfb4fa17bb5eb7ccb_62 -> Xfb4fa17bb5eb7ccb_63;
    Xfb4fa17bb5eb7ccb_62 [label="89 <- Use(cp(26))\l90 <- chkd-Sub(cp(88), cp(89))\lAssert mv(90.1) == false\l"];
    Xfb4fa17bb5eb7ccb_63 -> Xfb4fa17bb5eb7ccb_64 [label="86"];
    Xfb4fa17bb5eb7ccb_63 [label="87 <- Use(mv(90.0))\lCall\l"];
    Xfb4fa17bb5eb7ccb_64 -> Xfb4fa17bb5eb7ccb_65;
    Xfb4fa17bb5eb7ccb_64 [label="0 <- Adt{0} (const ())\lGoto\l"];
    Xfb4fa17bb5eb7ccb_65 [label="Return\l"];
  }
  Xfb4fa17bb5eb7ccb_5 -> X8817de218f598320_0 [label="cp(20)"];
  Xfb4fa17bb5eb7ccb_8 -> X499a64bd2ee6dafa_0 [label="cp(4)"];
  Xfb4fa17bb5eb7ccb_10 -> X69f80c161df389cb_0 [label="cp(7)"];
  Xfb4fa17bb5eb7ccb_11 -> X347766f6d4a7a5dc_0 [label="mv(29),mv(30)"];
  Xfb4fa17bb5eb7ccb_12 -> X45a9509fc036d935_0 [label="mv(28)"];
  Xfb4fa17bb5eb7ccb_15 -> Xfaf06a046c4d2f42_0 [label="cp(33)"];
  Xfb4fa17bb5eb7ccb_16 -> X5adbeff4b5cb293e_0 [label="mv(32)"];
  Xfb4fa17bb5eb7ccb_17 -> X2b904375dbbb0af7_0 [label="mv(35)"];
  Xfb4fa17bb5eb7ccb_19 -> X3036df73713f23cc_0 [label="cp(38),cp(25)"];
  Xfb4fa17bb5eb7ccb_20 -> X5adbeff4b5cb293e_0 [label="mv(37)"];
  Xfb4fa17bb5eb7ccb_21 -> X5c48a4d6939009d7_0 [label=""];
  Xfb4fa17bb5eb7ccb_22 -> Xf4d730ffcb43b968_0 [label="mv(42)"];
  Xfb4fa17bb5eb7ccb_24 -> X3036df73713f23cc_0 [label="mv(39),cp(25)"];
  Xfb4fa17bb5eb7ccb_25 -> X5adbeff4b5cb293e_0 [label="mv(44)"];
  Xfb4fa17bb5eb7ccb_26 -> X8817de218f598320_0 [label="cp(5)"];
  Xfb4fa17bb5eb7ccb_27 -> X38f1feb0e27f16b3_0 [label="cp(47)"];
  Xfb4fa17bb5eb7ccb_28 -> X5492146546091aad_0 [label="cp(4)"];
  Xfb4fa17bb5eb7ccb_29 -> X49a43113cd3c5d44_0 [label="cp(50)"];
  Xfb4fa17bb5eb7ccb_30 -> X4bab5789df6a8cfa_0 [label="mv(49)"];
  Xfb4fa17bb5eb7ccb_32 -> X51b146e3c692f3b3_0 [label="mv(56)"];
  Xfb4fa17bb5eb7ccb_33 -> X5adbeff4b5cb293e_0 [label="mv(52)"];
  Xfb4fa17bb5eb7ccb_34 -> X94faba497d3a8d24_0 [label="mv(55)"];
  Xfb4fa17bb5eb7ccb_37 -> X5adbeff4b5cb293e_0 [label="mv(58)"];
  Xfb4fa17bb5eb7ccb_38 -> X3e3db5977da52381_0 [label="mv(61)"];
  Xfb4fa17bb5eb7ccb_39 -> X91937cb3b305cbc5_0 [label="cp(4)"];
  Xfb4fa17bb5eb7ccb_42 -> X3e3db5977da52381_0 [label="mv(66)"];
  Xfb4fa17bb5eb7ccb_45 -> X234cb1e57fb61e21_0 [label="cp(5)"];
  Xfb4fa17bb5eb7ccb_46 -> X2272e127fe823423_0 [label="mv(68)"];
  Xfb4fa17bb5eb7ccb_48 -> Xd87d8e0f8c4953f_0 [label="cp(5)"];
  Xfb4fa17bb5eb7ccb_49 -> X5adbeff4b5cb293e_0 [label="mv(70)"];
  Xfb4fa17bb5eb7ccb_50 -> Xb3735d347f72ab76_0 [label="cp(74)"];
  Xfb4fa17bb5eb7ccb_51 -> X6225231dc09ec3e4_0 [label="mv(73),const {closure@p-token/src/processor/shared/initialize_account.rs:79:69: 79:72}"];
  Xfb4fa17bb5eb7ccb_52 -> X7d4b65c566a6f4e_0 [label="mv(72)"];
  Xfb4fa17bb5eb7ccb_55 -> X619ee3ba0019d783_0 [label="mv(76)"];
  Xfb4fa17bb5eb7ccb_56 -> X2eb1c95b0fa45ac6_0 [label="cp(53),mv(79)"];
  Xfb4fa17bb5eb7ccb_57 -> X8817de218f598320_0 [label="cp(5)"];
  Xfb4fa17bb5eb7ccb_59 -> Xf2ce9a9691c6e7c1_0 [label="cp(53),const bool"];
  Xfb4fa17bb5eb7ccb_60 -> X8826ee51f39e5fb2_0 [label="cp(53),mv(85)"];
  Xfb4fa17bb5eb7ccb_61 -> X91937cb3b305cbc5_0 [label="cp(4)"];
  Xfb4fa17bb5eb7ccb_63 -> X1c99c2b6b9095250_0 [label="cp(53),mv(87)"];
  subgraph cluster_68 {
    label="processor::shared::initia\nlize_account::process_ini\ntialize_account::{closure\n#0}";
    style="filled";
    color=lightgray;
    node_69 [label="LOCALS\l0 = spl_token_interface::error::TokenError\l1 = {closure@p-token/src/processor/shared/initialize_account.rs:79:69: 79:72}\l2 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X804d5408d551cb97_0 [label="0 <- Adt{2} ()\lReturn\l"];
  }
  subgraph cluster_70 {
    label="<&() \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_71 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&()\l2 = &mut core::fmt::Formatter<'_>\l3 = &()\l", style="filled", color=palegreen3];
    Xb020e88d82f0081_0 -> Xb020e88d82f0081_1 [label="0"];
    Xb020e88d82f0081_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    Xb020e88d82f0081_1 [label="Return\l"];
  }
  Xb020e88d82f0081_0 -> X9b9792a9c55c7503_0 [label="mv(3),mv(2)"];
  subgraph cluster_72 {
    label="<&core::result::Result<()\n, \npinocchio::program_error:\n:ProgramError> \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_73 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&core::result::Result<(), pinocchio::program_error::ProgramError>\l2 = &mut core::fmt::Formatter<'_>\l3 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    Xc109fb84c69e6807_0 -> Xc109fb84c69e6807_1 [label="0"];
    Xc109fb84c69e6807_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    Xc109fb84c69e6807_1 [label="Return\l"];
  }
  Xc109fb84c69e6807_0 -> X43f71b6e2d20bf4b_0 [label="mv(3),mv(2)"];
  subgraph cluster_74 {
    label="<&u8 \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_75 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&u8\l2 = &mut core::fmt::Formatter<'_>\l3 = &u8\l", style="filled", color=palegreen3];
    Xae64354fed2b8158_0 -> Xae64354fed2b8158_1 [label="0"];
    Xae64354fed2b8158_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    Xae64354fed2b8158_1 [label="Return\l"];
  }
  Xae64354fed2b8158_0 -> X1ec432a527e645de_0 [label="mv(3),mv(2)"];
  subgraph cluster_76 {
    label="<&spl_token_interface::st\nate::account_state::Accou\nntState \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_77 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&spl_token_interface::state::account_state::AccountState\l2 = &mut core::fmt::Formatter<'_>\l3 = &spl_token_interface::state::account_state::AccountState\l", style="filled", color=palegreen3];
    Xc2a15646edd8706f_0 -> Xc2a15646edd8706f_1 [label="0"];
    Xc2a15646edd8706f_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    Xc2a15646edd8706f_1 [label="Return\l"];
  }
  Xc2a15646edd8706f_0 -> X8a50bfb91d05238f_0 [label="mv(3),mv(2)"];
  subgraph cluster_78 {
    label="<&u32 \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_79 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&u32\l2 = &mut core::fmt::Formatter<'_>\l3 = &u32\l", style="filled", color=palegreen3];
    Xd05e08a93c55e760_0 -> Xd05e08a93c55e760_1 [label="0"];
    Xd05e08a93c55e760_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    Xd05e08a93c55e760_1 [label="Return\l"];
  }
  Xd05e08a93c55e760_0 -> X86616ecd3718916b_0 [label="mv(3),mv(2)"];
  subgraph cluster_80 {
    label="<&pinocchio::program_erro\nr::ProgramError \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_81 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&pinocchio::program_error::ProgramError\l2 = &mut core::fmt::Formatter<'_>\l3 = &pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    Xb6b7c9dfdacecaf3_0 -> Xb6b7c9dfdacecaf3_1 [label="0"];
    Xb6b7c9dfdacecaf3_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    Xb6b7c9dfdacecaf3_1 [label="Return\l"];
  }
  Xb6b7c9dfdacecaf3_0 -> X4d96ea5120bb9c65_0 [label="mv(3),mv(2)"];
  subgraph cluster_82 {
    label="<&[u8; \n32] \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_83 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&[u8; 32]\l2 = &mut core::fmt::Formatter<'_>\l3 = &[u8; 32]\l", style="filled", color=palegreen3];
    Xfb7f17e81450588f_0 -> Xfb7f17e81450588f_1 [label="0"];
    Xfb7f17e81450588f_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    Xfb7f17e81450588f_1 [label="Return\l"];
  }
  Xfb7f17e81450588f_0 -> X20fa37143c5ec43f_0 [label="mv(3),mv(2)"];
  subgraph cluster_84 {
    label="<() \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_85 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &()\l2 = &mut core::fmt::Formatter<'_>\l", style="filled", color=palegreen3];
    X9b9792a9c55c7503_0 -> X9b9792a9c55c7503_1 [label="0"];
    X9b9792a9c55c7503_0 [label="Call\l"];
    X9b9792a9c55c7503_1 [label="Return\l"];
  }
  X9b9792a9c55c7503_0 -> X5b44578fd65a3909_0 [label="mv(2),const &str"];
  subgraph cluster_86 {
    label="<[u8] \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_87 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &[u8]\l2 = &mut core::fmt::Formatter<'_>\l3 = &mut core::fmt::DebugList<'_, '_>\l4 = &mut core::fmt::DebugList<'_, '_>\l5 = core::fmt::DebugList<'_, '_>\l6 = core::slice::Iter<'_, u8>\l7 = usize\l8 = core::ptr::NonNull<u8>\l9 = core::ptr::NonNull<[u8]>\l10 = *const u8\l11 = *mut u8\l12 = *mut u8\l13 = *const u8\l14 = *const [u8]\l15 = *const u8\l", style="filled", color=palegreen3];
    X3deedd080d0bf2c6_0 -> X3deedd080d0bf2c6_1 [label="5"];
    X3deedd080d0bf2c6_0 [label="Storage Live _4\lStorage Live _5\lCall\l"];
    X3deedd080d0bf2c6_1 -> X3deedd080d0bf2c6_5 [label="0"];
    X3deedd080d0bf2c6_1 -> X3deedd080d0bf2c6_4 [label="other"];
    X3deedd080d0bf2c6_1 [label="4 <- &mut 5\lStorage Live _6\lStorage Live _7\lStorage Live _8\lStorage Live _14\lStorage Live _15\l7 <- PtrMetadata(cp(1))\lStorage Live _9\l14 <- &raw (*1)\l9 <- Adt{0} (cp(14))\l15 <- Cast-PtrToPtr cp(14)\l8 <- Adt{0} (cp(15))\lStorage Dead _9\lStorage Live _10\lSwitchInt const bool\l"];
    X3deedd080d0bf2c6_2 -> X3deedd080d0bf2c6_3 [label="0"];
    X3deedd080d0bf2c6_2 [label="Storage Dead _6\lStorage Dead _4\lCall\l"];
    X3deedd080d0bf2c6_3 [label="Storage Dead _5\lReturn\l"];
    X3deedd080d0bf2c6_4 -> X3deedd080d0bf2c6_6;
    X3deedd080d0bf2c6_4 [label="10 <- Cast-Transmute cp(7)\lGoto\l"];
    X3deedd080d0bf2c6_5 -> X3deedd080d0bf2c6_6;
    X3deedd080d0bf2c6_5 [label="Storage Live _11\lStorage Live _12\l12 <- Cast-PtrToPtr cp(14)\l11 <- Offset(cp(12), cp(7))\lStorage Dead _12\l10 <- Cast-PtrToPtr mv(11)\lStorage Dead _11\lGoto\l"];
    X3deedd080d0bf2c6_6 -> X3deedd080d0bf2c6_2 [label="3"];
    X3deedd080d0bf2c6_6 [label="Storage Live _13\l13 <- Use(cp(10))\l6 <- Adt{0} (cp(8), mv(13), const core::marker::PhantomData<&u8>)\lStorage Dead _13\lStorage Dead _10\lStorage Dead _15\lStorage Dead _14\lStorage Dead _8\lStorage Dead _7\lCall\l"];
  }
  X3deedd080d0bf2c6_0 -> X781918ccf9219bf_0 [label="mv(2)"];
  X3deedd080d0bf2c6_2 -> Xee56336712b487c9_0 [label="mv(3)"];
  X3deedd080d0bf2c6_6 -> Xf7e194bc2e560bae_0 [label="mv(4),mv(6)"];
  subgraph cluster_88 {
    label="<usize \nas \ncore::iter::Step>::forwar\nd_unchecked";
    style="filled";
    color=lightgray;
    node_89 [label="LOCALS\l0 = usize\l1 = usize\l2 = usize\l3 = bool\l4 = ()\l", style="filled", color=palegreen3];
    Xf98c0f07694c6176_0 -> Xf98c0f07694c6176_2 [label="0"];
    Xf98c0f07694c6176_0 -> Xf98c0f07694c6176_1 [label="other"];
    Xf98c0f07694c6176_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    Xf98c0f07694c6176_1 -> Xf98c0f07694c6176_2 [label="4"];
    Xf98c0f07694c6176_1 [label="Call\l"];
    Xf98c0f07694c6176_2 [label="Storage Dead _3\l0 <- AddUnchecked(cp(1), cp(2))\lReturn\l"];
  }
  Xf98c0f07694c6176_1 -> X6d16759fb07448a4_0 [label="cp(1),cp(2)"];
  subgraph cluster_90 {
    label="<usize \nas \ncore::cmp::Ord>::min";
    style="filled";
    color=lightgray;
    node_91 [label="LOCALS\l0 = usize\l1 = usize\l2 = usize\l", style="filled", color=palegreen3];
    X23a18a7f1b1af606_0 -> X23a18a7f1b1af606_1 [label="0"];
    X23a18a7f1b1af606_0 [label="Call\l"];
    X23a18a7f1b1af606_1 [label="Return\l"];
  }
  X23a18a7f1b1af606_0 -> X417bb8c927ddb4b5_0 [label="mv(1),mv(2),const for<'a, 'b> fn(&'a usize, &'b usize) -> core::cmp::Ordering {<usize as core::cmp::Ord>::cmp}"];
  subgraph cluster_92 {
    label="core::cmp::min::<usize>";
    style="filled";
    color=lightgray;
    node_93 [label="LOCALS\l0 = usize\l1 = usize\l2 = usize\l", style="filled", color=palegreen3];
    Xd4c8399dbe49afd_0 -> Xd4c8399dbe49afd_1 [label="0"];
    Xd4c8399dbe49afd_0 [label="Call\l"];
    Xd4c8399dbe49afd_1 [label="Return\l"];
  }
  Xd4c8399dbe49afd_0 -> X23a18a7f1b1af606_0 [label="mv(1),mv(2)"];
  subgraph cluster_94 {
    label="core::cmp::impls::<impl \ncore::cmp::Ord \nfor \nusize>::cmp";
    style="filled";
    color=lightgray;
    node_95 [label="LOCALS\l0 = core::cmp::Ordering\l1 = &usize\l2 = &usize\l3 = usize\l4 = usize\l", style="filled", color=palegreen3];
    X32480caf21985110_0 [label="Storage Live _3\l3 <- Use(cp((*1)))\lStorage Live _4\l4 <- Use(cp((*2)))\l0 <- Cmp(mv(3), mv(4))\lStorage Dead _4\lStorage Dead _3\lReturn\l"];
  }
  subgraph cluster_96 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialEq \nfor \nu32>::eq";
    style="filled";
    color=lightgray;
    node_97 [label="LOCALS\l0 = bool\l1 = &u32\l2 = &u32\l3 = u32\l4 = u32\l", style="filled", color=palegreen3];
    Xd0d2a70fc3d265c5_0 [label="Storage Live _3\l3 <- Use(cp((*1)))\lStorage Live _4\l4 <- Use(cp((*2)))\l0 <- Eq(mv(3), mv(4))\lStorage Dead _4\lStorage Dead _3\lReturn\l"];
  }
  subgraph cluster_98 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialOrd \nfor \nusize>::lt";
    style="filled";
    color=lightgray;
    node_99 [label="LOCALS\l0 = bool\l1 = &usize\l2 = &usize\l3 = usize\l4 = usize\l", style="filled", color=palegreen3];
    Xb4d458fe7af2393d_0 [label="Storage Live _3\l3 <- Use(cp((*1)))\lStorage Live _4\l4 <- Use(cp((*2)))\l0 <- Lt(mv(3), mv(4))\lStorage Dead _4\lStorage Dead _3\lReturn\l"];
  }
  subgraph cluster_100 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialEq \nfor \n()>::eq";
    style="filled";
    color=lightgray;
    node_101 [label="LOCALS\l0 = bool\l1 = &()\l2 = &()\l", style="filled", color=palegreen3];
    Xd7393c030c57f210_0 [label="0 <- Use(const bool)\lReturn\l"];
  }
  subgraph cluster_102 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialEq \nfor \n&u32>::eq";
    style="filled";
    color=lightgray;
    node_103 [label="LOCALS\l0 = bool\l1 = &&u32\l2 = &&u32\l3 = &u32\l4 = &u32\l", style="filled", color=palegreen3];
    X1db5e3317e89911b_0 -> X1db5e3317e89911b_1 [label="0"];
    X1db5e3317e89911b_0 [label="3 <- Use(cp((*1)))\l4 <- Use(cp((*2)))\lCall\l"];
    X1db5e3317e89911b_1 [label="Return\l"];
  }
  X1db5e3317e89911b_0 -> Xd0d2a70fc3d265c5_0 [label="mv(3),mv(4)"];
  subgraph cluster_104 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialEq \nfor \n&[u8; \n32]>::eq";
    style="filled";
    color=lightgray;
    node_105 [label="LOCALS\l0 = bool\l1 = &&[u8; 32]\l2 = &&[u8; 32]\l3 = &[u8; 32]\l4 = &[u8; 32]\l", style="filled", color=palegreen3];
    X62e1ca1dfa9f1ff9_0 -> X62e1ca1dfa9f1ff9_1 [label="0"];
    X62e1ca1dfa9f1ff9_0 [label="3 <- Use(cp((*1)))\l4 <- Use(cp((*2)))\lCall\l"];
    X62e1ca1dfa9f1ff9_1 [label="Return\l"];
  }
  X62e1ca1dfa9f1ff9_0 -> Xe9ad0bcad84fb4ac_0 [label="mv(3),mv(4)"];
  subgraph cluster_106 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialEq \nfor \n&[u8; \n32]>::ne";
    style="filled";
    color=lightgray;
    node_107 [label="LOCALS\l0 = bool\l1 = &&[u8; 32]\l2 = &&[u8; 32]\l3 = &[u8; 32]\l4 = &[u8; 32]\l", style="filled", color=palegreen3];
    X5d6c1de00eb04104_0 -> X5d6c1de00eb04104_1 [label="0"];
    X5d6c1de00eb04104_0 [label="3 <- Use(cp((*1)))\l4 <- Use(cp((*2)))\lCall\l"];
    X5d6c1de00eb04104_1 [label="Return\l"];
  }
  X5d6c1de00eb04104_0 -> X6dec8e35a57ec51c_0 [label="mv(3),mv(4)"];
  subgraph cluster_108 {
    label="core::cmp::min_by::<usize\n, \nfor<'a, \n'b> \nfn(&'a \nusize, \n&'b \nusize) \n-> \ncore::cmp::Ordering \n{<usize \nas \ncore::cmp::Ord>::cmp}>";
    style="filled";
    color=lightgray;
    node_109 [label="LOCALS\l0 = usize\l1 = usize\l2 = usize\l3 = for<'a, 'b> fn(&'a usize, &'b usize) -> core::cmp::Ordering {<usize as core::cmp::Ord>::cmp}\l4 = core::cmp::Ordering\l5 = (&usize, &usize)\l6 = &usize\l7 = &usize\l8 = i8\l9 = bool\l10 = bool\l", style="filled", color=palegreen3];
    X417bb8c927ddb4b5_0 -> X417bb8c927ddb4b5_7 [label="Cleanup"];
    X417bb8c927ddb4b5_0 -> X417bb8c927ddb4b5_1 [label="4"];
    X417bb8c927ddb4b5_0 [label="10 <- Use(const bool)\l9 <- Use(const bool)\lStorage Live _4\lStorage Live _5\l6 <- & 1\l7 <- & 2\l5 <- Tuple (cp(6), cp(7))\lCall\l"];
    X417bb8c927ddb4b5_1 -> X417bb8c927ddb4b5_4 [label="255"];
    X417bb8c927ddb4b5_1 -> X417bb8c927ddb4b5_4 [label="0"];
    X417bb8c927ddb4b5_1 -> X417bb8c927ddb4b5_3 [label="1"];
    X417bb8c927ddb4b5_1 -> X417bb8c927ddb4b5_2 [label="other"];
    X417bb8c927ddb4b5_1 [label="Storage Dead _5\l8 <- Discriminant(4)\lSwitchInt mv(8)\l"];
    X417bb8c927ddb4b5_2 [label="Unreachable\l"];
    X417bb8c927ddb4b5_3 -> X417bb8c927ddb4b5_5;
    X417bb8c927ddb4b5_3 [label="0 <- Use(mv(2))\lStorage Dead _4\lGoto\l"];
    X417bb8c927ddb4b5_4 -> X417bb8c927ddb4b5_5 [label="0"];
    X417bb8c927ddb4b5_4 -> X417bb8c927ddb4b5_9 [label="other"];
    X417bb8c927ddb4b5_4 [label="10 <- Use(const bool)\l0 <- Use(mv(1))\lStorage Dead _4\lSwitchInt cp(9)\l"];
    X417bb8c927ddb4b5_5 -> X417bb8c927ddb4b5_6 [label="0"];
    X417bb8c927ddb4b5_5 -> X417bb8c927ddb4b5_10 [label="other"];
    X417bb8c927ddb4b5_5 [label="SwitchInt cp(10)\l"];
    X417bb8c927ddb4b5_6 [label="Return\l"];
    X417bb8c927ddb4b5_7 -> X417bb8c927ddb4b5_12;
    X417bb8c927ddb4b5_7 [label="Drop 2\l"];
    X417bb8c927ddb4b5_8 [label="Resume\l"];
    X417bb8c927ddb4b5_9 -> X417bb8c927ddb4b5_12 [label="Cleanup"];
    X417bb8c927ddb4b5_9 -> X417bb8c927ddb4b5_6;
    X417bb8c927ddb4b5_9 [label="Drop 2\l"];
    X417bb8c927ddb4b5_10 -> X417bb8c927ddb4b5_6;
    X417bb8c927ddb4b5_10 [label="Drop 1\l"];
    X417bb8c927ddb4b5_11 -> X417bb8c927ddb4b5_8;
    X417bb8c927ddb4b5_11 [label="Drop 1\l"];
    X417bb8c927ddb4b5_12 -> X417bb8c927ddb4b5_8 [label="0"];
    X417bb8c927ddb4b5_12 -> X417bb8c927ddb4b5_11 [label="other"];
    X417bb8c927ddb4b5_12 [label="SwitchInt cp(10)\l"];
  }
  X417bb8c927ddb4b5_0 -> Xa7d822d8acd5c8ee_0 [label="mv(3),mv(5)"];
  subgraph cluster_110 {
    label="<spl_token_interface::sta\nte::account_state::Accoun\ntState \nas \ncore::cmp::PartialEq>::ne";
    style="filled";
    color=lightgray;
    node_111 [label="LOCALS\l0 = bool\l1 = &spl_token_interface::state::account_state::AccountState\l2 = &spl_token_interface::state::account_state::AccountState\l3 = bool\l", style="filled", color=palegreen3];
    Xd5b4a5747e6ff805_0 -> Xd5b4a5747e6ff805_1 [label="3"];
    Xd5b4a5747e6ff805_0 [label="Storage Live _3\lCall\l"];
    Xd5b4a5747e6ff805_1 [label="0 <- Not(mv(3))\lStorage Dead _3\lReturn\l"];
  }
  Xd5b4a5747e6ff805_0 -> X92c90d3df5004379_0 [label="mv(1),mv(2)"];
  subgraph cluster_112 {
    label="core::f64::<impl \nf64>::to_le_bytes";
    style="filled";
    color=lightgray;
    node_113 [label="LOCALS\l0 = [u8; 8]\l1 = f64\l2 = u64\l", style="filled", color=palegreen3];
    Xb7233195f5e48779_0 [label="Storage Live _2\l2 <- Cast-Transmute cp(1)\l0 <- Cast-Transmute cp(2)\lStorage Dead _2\lReturn\l"];
  }
  subgraph cluster_114 {
    label="core::fmt::num::<impl \ncore::fmt::Debug \nfor \nu8>::fmt";
    style="filled";
    color=lightgray;
    node_115 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &u8\l2 = &mut core::fmt::Formatter<'_>\l3 = u32\l4 = u32\l5 = u32\l6 = u32\l", style="filled", color=palegreen3];
    X1ec432a527e645de_0 -> X1ec432a527e645de_2 [label="0"];
    X1ec432a527e645de_0 -> X1ec432a527e645de_1 [label="other"];
    X1ec432a527e645de_0 [label="Storage Live _3\lStorage Live _4\l4 <- Use(cp((*2).0))\l3 <- BitAnd(mv(4), const ?_u32)\lStorage Dead _4\lSwitchInt mv(3)\l"];
    X1ec432a527e645de_1 -> X1ec432a527e645de_6 [label="0"];
    X1ec432a527e645de_1 [label="Storage Dead _3\lCall\l"];
    X1ec432a527e645de_2 -> X1ec432a527e645de_4 [label="0"];
    X1ec432a527e645de_2 -> X1ec432a527e645de_3 [label="other"];
    X1ec432a527e645de_2 [label="Storage Dead _3\lStorage Live _5\lStorage Live _6\l6 <- Use(cp((*2).0))\l5 <- BitAnd(mv(6), const ?_u32)\lStorage Dead _6\lSwitchInt mv(5)\l"];
    X1ec432a527e645de_3 -> X1ec432a527e645de_5 [label="0"];
    X1ec432a527e645de_3 [label="Storage Dead _5\lCall\l"];
    X1ec432a527e645de_4 -> X1ec432a527e645de_5 [label="0"];
    X1ec432a527e645de_4 [label="Storage Dead _5\lCall\l"];
    X1ec432a527e645de_5 -> X1ec432a527e645de_6;
    X1ec432a527e645de_5 [label="Goto\l"];
    X1ec432a527e645de_6 [label="Return\l"];
  }
  X1ec432a527e645de_1 -> Xc0df9b1997ac90da_0 [label="mv(1),mv(2)"];
  X1ec432a527e645de_3 -> Xb4c60c8acc2aa4f0_0 [label="mv(1),mv(2)"];
  X1ec432a527e645de_4 -> Xe9aeaaaf212ff5cc_0 [label="mv(1),mv(2)"];
  subgraph cluster_116 {
    label="core::fmt::num::<impl \ncore::fmt::Debug \nfor \nu32>::fmt";
    style="filled";
    color=lightgray;
    node_117 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &u32\l2 = &mut core::fmt::Formatter<'_>\l3 = u32\l4 = u32\l5 = u32\l6 = u32\l", style="filled", color=palegreen3];
    X86616ecd3718916b_0 -> X86616ecd3718916b_2 [label="0"];
    X86616ecd3718916b_0 -> X86616ecd3718916b_1 [label="other"];
    X86616ecd3718916b_0 [label="Storage Live _3\lStorage Live _4\l4 <- Use(cp((*2).0))\l3 <- BitAnd(mv(4), const ?_u32)\lStorage Dead _4\lSwitchInt mv(3)\l"];
    X86616ecd3718916b_1 -> X86616ecd3718916b_6 [label="0"];
    X86616ecd3718916b_1 [label="Storage Dead _3\lCall\l"];
    X86616ecd3718916b_2 -> X86616ecd3718916b_4 [label="0"];
    X86616ecd3718916b_2 -> X86616ecd3718916b_3 [label="other"];
    X86616ecd3718916b_2 [label="Storage Dead _3\lStorage Live _5\lStorage Live _6\l6 <- Use(cp((*2).0))\l5 <- BitAnd(mv(6), const ?_u32)\lStorage Dead _6\lSwitchInt mv(5)\l"];
    X86616ecd3718916b_3 -> X86616ecd3718916b_5 [label="0"];
    X86616ecd3718916b_3 [label="Storage Dead _5\lCall\l"];
    X86616ecd3718916b_4 -> X86616ecd3718916b_5 [label="0"];
    X86616ecd3718916b_4 [label="Storage Dead _5\lCall\l"];
    X86616ecd3718916b_5 -> X86616ecd3718916b_6;
    X86616ecd3718916b_5 [label="Goto\l"];
    X86616ecd3718916b_6 [label="Return\l"];
  }
  X86616ecd3718916b_1 -> X1d0677a8f15bd47_0 [label="mv(1),mv(2)"];
  X86616ecd3718916b_3 -> Xca95a9d6f7061805_0 [label="mv(1),mv(2)"];
  X86616ecd3718916b_4 -> X67d151235d77b301_0 [label="mv(1),mv(2)"];
  subgraph cluster_118 {
    label="core::fmt::DebugList::<'_\n, \n'_>::entries::<&u8, \ncore::slice::Iter<'_, \nu8>>";
    style="filled";
    color=lightgray;
    node_119 [label="LOCALS\l0 = &mut core::fmt::DebugList<'_, '_>\l1 = &mut core::fmt::DebugList<'_, '_>\l2 = core::slice::Iter<'_, u8>\l3 = core::slice::Iter<'_, u8>\l4 = core::slice::Iter<'_, u8>\l5 = core::option::Option<&u8>\l6 = &mut core::slice::Iter<'_, u8>\l7 = isize\l8 = &u8\l9 = &mut core::fmt::DebugList<'_, '_>\l10 = &dyn core::fmt::Debug\l11 = &&u8\l", style="filled", color=palegreen3];
    Xf7e194bc2e560bae_0 -> Xf7e194bc2e560bae_1 [label="3"];
    Xf7e194bc2e560bae_0 [label="Storage Live _3\lCall\l"];
    Xf7e194bc2e560bae_1 -> Xf7e194bc2e560bae_2;
    Xf7e194bc2e560bae_1 [label="Storage Live _4\l4 <- Use(mv(3))\lGoto\l"];
    Xf7e194bc2e560bae_2 -> Xf7e194bc2e560bae_11 [label="Cleanup"];
    Xf7e194bc2e560bae_2 -> Xf7e194bc2e560bae_3 [label="5"];
    Xf7e194bc2e560bae_2 [label="Storage Live _5\l6 <- &mut 4\lCall\l"];
    Xf7e194bc2e560bae_3 -> Xf7e194bc2e560bae_6 [label="0"];
    Xf7e194bc2e560bae_3 -> Xf7e194bc2e560bae_5 [label="1"];
    Xf7e194bc2e560bae_3 -> Xf7e194bc2e560bae_4 [label="other"];
    Xf7e194bc2e560bae_3 [label="7 <- Discriminant(5)\lSwitchInt mv(7)\l"];
    Xf7e194bc2e560bae_4 [label="Unreachable\l"];
    Xf7e194bc2e560bae_5 -> Xf7e194bc2e560bae_10 [label="Cleanup"];
    Xf7e194bc2e560bae_5 -> Xf7e194bc2e560bae_7 [label="9"];
    Xf7e194bc2e560bae_5 [label="Storage Live _8\l8 <- Use(mv((5 as variant 1).0))\lStorage Live _9\lStorage Live _10\l11 <- & 8\l10 <- Cast-PointerCoercion(Unsize) cp(11)\lCall\l"];
    Xf7e194bc2e560bae_6 -> Xf7e194bc2e560bae_9;
    Xf7e194bc2e560bae_6 [label="Storage Dead _5\lDrop 4\l"];
    Xf7e194bc2e560bae_7 -> Xf7e194bc2e560bae_11 [label="Cleanup"];
    Xf7e194bc2e560bae_7 -> Xf7e194bc2e560bae_8;
    Xf7e194bc2e560bae_7 [label="Storage Dead _10\lStorage Dead _9\lDrop 8\l"];
    Xf7e194bc2e560bae_8 -> Xf7e194bc2e560bae_2;
    Xf7e194bc2e560bae_8 [label="Storage Dead _8\lStorage Dead _5\lGoto\l"];
    Xf7e194bc2e560bae_9 [label="Storage Dead _4\lStorage Dead _3\l0 <- Use(cp(1))\lReturn\l"];
    Xf7e194bc2e560bae_10 -> Xf7e194bc2e560bae_11;
    Xf7e194bc2e560bae_10 [label="Drop 8\l"];
    Xf7e194bc2e560bae_11 -> Xf7e194bc2e560bae_12;
    Xf7e194bc2e560bae_11 [label="Drop 4\l"];
    Xf7e194bc2e560bae_12 [label="Resume\l"];
  }
  Xf7e194bc2e560bae_0 -> X9125598ebc1c3df8_0 [label="mv(2)"];
  Xf7e194bc2e560bae_2 -> X5cf7402e6efa4d0b_0 [label="mv(6)"];
  Xf7e194bc2e560bae_5 -> X6938f74b16e4abe6_0 [label="cp(1),mv(10)"];
  subgraph cluster_120 {
    label="core::mem::MaybeUninit::<\npinocchio::account_info::\nAccountInfo>::assume_init\n_ref";
    style="filled";
    color=lightgray;
    node_121 [label="LOCALS\l0 = &pinocchio::account_info::AccountInfo\l1 = &core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l2 = ()\l3 = *const pinocchio::account_info::AccountInfo\l4 = *const core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l", style="filled", color=palegreen3];
    Xa243b99d87ed4046_0 -> Xa243b99d87ed4046_1 [label="2"];
    Xa243b99d87ed4046_0 [label="Call\l"];
    Xa243b99d87ed4046_1 [label="Storage Live _3\lStorage Live _4\l4 <- &raw (*1)\l3 <- Cast-PtrToPtr cp(4)\lStorage Dead _4\l0 <- & (*3)\lStorage Dead _3\lReturn\l"];
  }
  Xa243b99d87ed4046_0 -> X83c8e82412404978_0 [label=""];
  subgraph cluster_122 {
    label="core::mem::MaybeUninit::<\npinocchio::account_info::\nAccountInfo>::write";
    style="filled";
    color=lightgray;
    node_123 [label="LOCALS\l0 = &mut pinocchio::account_info::AccountInfo\l1 = &mut core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l2 = pinocchio::account_info::AccountInfo\l3 = core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l4 = core::mem::ManuallyDrop<pinocchio::account_info::AccountInfo>\l5 = ()\l6 = *mut pinocchio::account_info::AccountInfo\l7 = *mut core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l", style="filled", color=palegreen3];
    X3e61e2a565de7318_0 -> X3e61e2a565de7318_1 [label="5"];
    X3e61e2a565de7318_0 [label="Storage Live _3\lStorage Live _4\l4 <- Adt{0} (cp(2))\l3 <- Adt{0} (mv(4))\lStorage Dead _4\l(*1) <- Use(mv(3))\lStorage Dead _3\lCall\l"];
    X3e61e2a565de7318_1 [label="Storage Live _6\lStorage Live _7\l7 <- &raw mut (*1)\l6 <- Cast-PtrToPtr cp(7)\lStorage Dead _7\l0 <- &mut (*6)\lStorage Dead _6\lReturn\l"];
  }
  X3e61e2a565de7318_0 -> X83c8e82412404978_0 [label=""];
  subgraph cluster_124 {
    label="core::mem::size_of::<u64>";
    style="filled";
    color=lightgray;
    node_125 [label="LOCALS\l0 = usize\l", style="filled", color=palegreen3];
    Xc400e100fe1b1e46_0 [label="0 <- SizeOf :: u64\lReturn\l"];
  }
  subgraph cluster_126 {
    label="core::mem::size_of::<pino\ncchio::account_info::Acco\nunt>";
    style="filled";
    color=lightgray;
    node_127 [label="LOCALS\l0 = usize\l", style="filled", color=palegreen3];
    Xdcc6cca97078e0a0_0 [label="0 <- SizeOf :: pinocchio::account_info::Account\lReturn\l"];
  }
  subgraph cluster_128 {
    label="core::num::<impl \nu64>::to_le_bytes";
    style="filled";
    color=lightgray;
    node_129 [label="LOCALS\l0 = [u8; 8]\l1 = u64\l", style="filled", color=palegreen3];
    Xd9beafda37b4af63_0 [label="0 <- Cast-Transmute cp(1)\lReturn\l"];
  }
  subgraph cluster_130 {
    label="core::num::<impl \nu64>::from_le_bytes";
    style="filled";
    color=lightgray;
    node_131 [label="LOCALS\l0 = u64\l1 = [u8; 8]\l", style="filled", color=palegreen3];
    X4b040c9530995baf_0 [label="0 <- Cast-Transmute cp(1)\lReturn\l"];
  }
  subgraph cluster_132 {
    label="core::num::<impl \nusize>::unchecked_add::pr\necondition_check";
    style="filled";
    color=lightgray;
    node_133 [label="LOCALS\l0 = ()\l1 = usize\l2 = usize\l3 = !\l4 = u64\l5 = bool\l6 = (u64, bool)\l7 = u64\l8 = u64\l", style="filled", color=palegreen3];
    X6d16759fb07448a4_0 -> X6d16759fb07448a4_2 [label="0"];
    X6d16759fb07448a4_0 -> X6d16759fb07448a4_1 [label="other"];
    X6d16759fb07448a4_0 [label="Storage Live _4\lStorage Live _6\lStorage Live _7\l7 <- Cast-IntToInt cp(1)\lStorage Live _8\l8 <- Cast-IntToInt cp(2)\l6 <- chkd-Add(mv(7), mv(8))\lStorage Dead _8\lStorage Dead _7\l4 <- Use(cp(6.0))\l5 <- Use(cp(6.1))\lStorage Dead _6\lStorage Dead _4\lSwitchInt cp(5)\l"];
    X6d16759fb07448a4_1 [label="Call\l"];
    X6d16759fb07448a4_2 [label="Return\l"];
  }
  X6d16759fb07448a4_1 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_134 {
    label="<for<'a, \n'b> \nfn(&'a \nusize, \n&'b \nusize) \n-> \ncore::cmp::Ordering \n{<usize \nas \ncore::cmp::Ord>::cmp} \nas \ncore::ops::FnOnce<(&usize\n, \n&usize)>>::call_once";
    style="filled";
    color=lightgray;
    node_135 [label="LOCALS\l0 = core::cmp::Ordering\l1 = for<'a, 'b> fn(&'a usize, &'b usize) -> core::cmp::Ordering {<usize as core::cmp::Ord>::cmp}\l2 = (&usize, &usize)\l", style="filled", color=palegreen3];
    Xa7d822d8acd5c8ee_0 -> Xa7d822d8acd5c8ee_1 [label="0"];
    Xa7d822d8acd5c8ee_0 [label="Call\l"];
    Xa7d822d8acd5c8ee_1 [label="Return\l"];
  }
  Xa7d822d8acd5c8ee_0 -> Xa7d822d8acd5c8ee_0: 1 [label="mv(2.0),mv(2.1)"];
  subgraph cluster_136 {
    label="<for<'a> \nfn(&'a \npinocchio::program_error:\n:ProgramError) \n{entrypoint::log_error} \nas \ncore::ops::FnOnce<(&pinoc\nchio::program_error::Prog\nramError,)>>::call_once";
    style="filled";
    color=lightgray;
    node_137 [label="LOCALS\l0 = ()\l1 = for<'a> fn(&'a pinocchio::program_error::ProgramError) {entrypoint::log_error}\l2 = (&pinocchio::program_error::ProgramError,)\l", style="filled", color=palegreen3];
    Xf950bf27d0cf5c6c_0 -> Xf950bf27d0cf5c6c_1 [label="0"];
    Xf950bf27d0cf5c6c_0 [label="Call\l"];
    Xf950bf27d0cf5c6c_1 [label="Return\l"];
  }
  Xf950bf27d0cf5c6c_0 -> Xf950bf27d0cf5c6c_0: 1 [label="mv(2.0)"];
  subgraph cluster_138 {
    label="core::ptr::drop_in_place:\n:<&core::result::Result<(\n), \npinocchio::program_error:\n:ProgramError>>";
    style="filled";
    color=lightgray;
    node_139 [label="LOCALS\l0 = ()\l1 = *mut &core::result::Result<(), pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    X6d6f60a1525fc0a8_0 [label="Return\l"];
  }
  subgraph cluster_140 {
    label="core::ptr::align_offset::\n<u8>";
    style="filled";
    color=lightgray;
    node_141 [label="LOCALS\l0 = usize\l1 = *const u8\l2 = usize\l3 = usize\l4 = usize\l5 = usize\l6 = usize\l7 = usize\l8 = usize\l9 = usize\l10 = usize\l11 = usize\l12 = bool\l13 = usize\l14 = u32\l15 = u32\l16 = u32\l17 = bool\l18 = usize\l19 = u32\l20 = usize\l21 = usize\l22 = usize\l23 = u32\l24 = usize\l25 = usize\l26 = usize\l27 = u32\l28 = usize\l29 = usize\l30 = usize\l31 = u32\l32 = usize\l33 = usize\l", style="filled", color=palegreen3];
    X19dd34cf757319eb_0 -> X19dd34cf757319eb_1 [label="0"];
    X19dd34cf757319eb_0 -> X19dd34cf757319eb_5 [label="other"];
    X19dd34cf757319eb_0 [label="3 <- SizeOf :: u8\l4 <- Cast-Transmute cp(1)\l5 <- SubUnchecked(cp(2), const ?_usize)\lSwitchInt mv(3)\l"];
    X19dd34cf757319eb_1 -> X19dd34cf757319eb_2 [label="0"];
    X19dd34cf757319eb_1 -> X19dd34cf757319eb_3 [label="other"];
    X19dd34cf757319eb_1 [label="6 <- BitAnd(cp(4), cp(5))\lSwitchInt mv(6)\l"];
    X19dd34cf757319eb_2 -> X19dd34cf757319eb_4;
    X19dd34cf757319eb_2 [label="0 <- Use(const ?_usize)\lGoto\l"];
    X19dd34cf757319eb_3 -> X19dd34cf757319eb_4;
    X19dd34cf757319eb_3 [label="0 <- Use(const ?_usize)\lGoto\l"];
    X19dd34cf757319eb_4 -> X19dd34cf757319eb_19;
    X19dd34cf757319eb_4 [label="Goto\l"];
    X19dd34cf757319eb_5 -> X19dd34cf757319eb_6 [label="0"];
    X19dd34cf757319eb_5 -> X19dd34cf757319eb_10 [label="other"];
    X19dd34cf757319eb_5 [label="7 <- Rem(cp(2), cp(3))\lSwitchInt mv(7)\l"];
    X19dd34cf757319eb_6 -> X19dd34cf757319eb_7 [label="0"];
    X19dd34cf757319eb_6 -> X19dd34cf757319eb_8 [label="other"];
    X19dd34cf757319eb_6 [label="Storage Live _9\l9 <- Add(cp(4), cp(5))\lStorage Live _10\l10 <- Sub(const ?_usize, cp(2))\l8 <- BitAnd(mv(9), mv(10))\lStorage Dead _10\lStorage Dead _9\l11 <- Sub(cp(8), cp(4))\lStorage Live _12\l12 <- Lt(cp(11), cp(2))\lIntr: Assume mv(12)\lStorage Dead _12\l13 <- Rem(cp(4), cp(3))\lSwitchInt mv(13)\l"];
    X19dd34cf757319eb_7 -> X19dd34cf757319eb_9 [label="0"];
    X19dd34cf757319eb_7 [label="Call\l"];
    X19dd34cf757319eb_8 -> X19dd34cf757319eb_9;
    X19dd34cf757319eb_8 [label="0 <- Use(const ?_usize)\lGoto\l"];
    X19dd34cf757319eb_9 -> X19dd34cf757319eb_19;
    X19dd34cf757319eb_9 [label="Goto\l"];
    X19dd34cf757319eb_10 -> X19dd34cf757319eb_11 [label="15"];
    X19dd34cf757319eb_10 [label="Storage Live _14\lCall\l"];
    X19dd34cf757319eb_11 -> X19dd34cf757319eb_12 [label="16"];
    X19dd34cf757319eb_11 [label="Call\l"];
    X19dd34cf757319eb_12 -> X19dd34cf757319eb_14 [label="0"];
    X19dd34cf757319eb_12 -> X19dd34cf757319eb_13 [label="other"];
    X19dd34cf757319eb_12 [label="Storage Live _17\l17 <- Lt(cp(15), cp(16))\lSwitchInt mv(17)\l"];
    X19dd34cf757319eb_13 -> X19dd34cf757319eb_15;
    X19dd34cf757319eb_13 [label="14 <- Use(cp(15))\lGoto\l"];
    X19dd34cf757319eb_14 -> X19dd34cf757319eb_15;
    X19dd34cf757319eb_14 [label="14 <- Use(cp(16))\lGoto\l"];
    X19dd34cf757319eb_15 -> X19dd34cf757319eb_16 [label="0"];
    X19dd34cf757319eb_15 -> X19dd34cf757319eb_18 [label="other"];
    X19dd34cf757319eb_15 [label="Storage Dead _17\lStorage Live _19\l19 <- Use(cp(14))\l18 <- ShlUnchecked(const ?_usize, mv(19))\lStorage Dead _19\lStorage Live _20\lStorage Live _21\l21 <- SubUnchecked(cp(18), const ?_usize)\l20 <- BitAnd(cp(4), mv(21))\lStorage Dead _21\lSwitchInt mv(20)\l"];
    X19dd34cf757319eb_16 -> X19dd34cf757319eb_17 [label="33"];
    X19dd34cf757319eb_16 [label="Storage Dead _20\lStorage Live _23\l23 <- Use(cp(14))\l22 <- ShrUnchecked(cp(2), mv(23))\lStorage Dead _23\l24 <- SubUnchecked(cp(22), const ?_usize)\lStorage Live _26\l26 <- BitAnd(cp(3), cp(5))\lStorage Live _27\l27 <- Use(cp(14))\l25 <- ShrUnchecked(mv(26), mv(27))\lStorage Dead _27\lStorage Dead _26\lStorage Live _29\lStorage Live _30\l30 <- BitAnd(cp(4), cp(5))\lStorage Live _31\l31 <- Use(cp(14))\l29 <- ShrUnchecked(mv(30), mv(31))\lStorage Dead _31\lStorage Dead _30\l28 <- SubUnchecked(cp(22), mv(29))\lStorage Dead _29\lStorage Live _32\lStorage Live _33\lCall\l"];
    X19dd34cf757319eb_17 -> X19dd34cf757319eb_19;
    X19dd34cf757319eb_17 [label="32 <- Mul(cp(28), mv(33))\lStorage Dead _33\l0 <- BitAnd(mv(32), cp(24))\lStorage Dead _32\lStorage Dead _14\lGoto\l"];
    X19dd34cf757319eb_18 -> X19dd34cf757319eb_19;
    X19dd34cf757319eb_18 [label="Storage Dead _20\l0 <- Use(const ?_usize)\lStorage Dead _14\lGoto\l"];
    X19dd34cf757319eb_19 [label="Return\l"];
  }
  X19dd34cf757319eb_7 -> Xab38848ab7f87cef_0 [label="mv(11),mv(3)"];
  X19dd34cf757319eb_10 -> X310df8f1c672aeb_0 [label="cp(3)"];
  X19dd34cf757319eb_11 -> X310df8f1c672aeb_0 [label="cp(2)"];
  X19dd34cf757319eb_16 -> X90f500512b5cf374_0 [label="mv(25),mv(22)"];
  subgraph cluster_142 {
    label="core::ptr::align_offset::\nmod_inv";
    style="filled";
    color=lightgray;
    node_143 [label="LOCALS\l0 = usize\l1 = usize\l2 = usize\l3 = usize\l4 = usize\l5 = u8\l6 = [u8; 8]\l7 = usize\l8 = usize\l9 = bool\l10 = usize\l11 = bool\l12 = usize\l13 = usize\l14 = usize\l15 = usize\l16 = usize\l17 = usize\l18 = usize\l19 = bool\l20 = (usize, bool)\l21 = usize\l22 = usize\l23 = usize\l", style="filled", color=palegreen3];
    X90f500512b5cf374_0 -> X90f500512b5cf374_1;
    X90f500512b5cf374_0 [label="3 <- SubUnchecked(cp(2), const ?_usize)\lStorage Live _4\lStorage Live _5\lStorage Live _6\l6 <- Use(const [u8; 8])\lStorage Live _7\lStorage Live _8\l8 <- BitAnd(cp(1), const ?_usize)\l7 <- Shr(mv(8), const ?_i32)\lStorage Dead _8\l9 <- Lt(cp(7), const ?_usize)\lAssert mv(9) == true\l"];
    X90f500512b5cf374_1 -> X90f500512b5cf374_2;
    X90f500512b5cf374_1 [label="5 <- Use(cp(6[_7]))\l4 <- Cast-IntToInt mv(5)\lStorage Dead _5\lStorage Dead _7\lStorage Dead _6\lStorage Live _10\l10 <- Use(const ?_usize)\lGoto\l"];
    X90f500512b5cf374_2 -> X90f500512b5cf374_4 [label="0"];
    X90f500512b5cf374_2 -> X90f500512b5cf374_3 [label="other"];
    X90f500512b5cf374_2 [label="Storage Live _11\lStorage Live _12\l12 <- Use(cp(10))\l11 <- Ge(mv(12), cp(2))\lSwitchInt mv(11)\l"];
    X90f500512b5cf374_3 -> X90f500512b5cf374_6;
    X90f500512b5cf374_3 [label="Storage Dead _12\lStorage Dead _11\lGoto\l"];
    X90f500512b5cf374_4 -> X90f500512b5cf374_5 [label="0"];
    X90f500512b5cf374_4 -> X90f500512b5cf374_6 [label="other"];
    X90f500512b5cf374_4 [label="Storage Dead _12\lStorage Dead _11\lStorage Live _13\lStorage Live _14\l14 <- Use(cp(4))\lStorage Live _15\lStorage Live _16\lStorage Live _17\l17 <- Use(cp(4))\l16 <- Mul(cp(1), mv(17))\lStorage Dead _17\l15 <- Sub(const ?_usize, mv(16))\lStorage Dead _16\l13 <- Mul(mv(14), mv(15))\lStorage Dead _15\lStorage Dead _14\l4 <- Use(mv(13))\lStorage Dead _13\lStorage Live _20\lStorage Live _21\l21 <- Use(cp(10))\lStorage Live _22\l22 <- Use(cp(10))\l20 <- chkd-Mul(mv(21), mv(22))\lStorage Dead _22\lStorage Dead _21\l18 <- Use(cp(20.0))\l19 <- Use(cp(20.1))\lStorage Dead _20\lSwitchInt cp(19)\l"];
    X90f500512b5cf374_5 -> X90f500512b5cf374_2;
    X90f500512b5cf374_5 [label="10 <- Use(cp(18))\lGoto\l"];
    X90f500512b5cf374_6 [label="Storage Live _23\l23 <- Use(cp(4))\l0 <- BitAnd(mv(23), cp(3))\lStorage Dead _23\lStorage Dead _10\lStorage Dead _4\lReturn\l"];
  }
  subgraph cluster_144 {
    label="core::ptr::drop_in_place:\n:<&u8>";
    style="filled";
    color=lightgray;
    node_145 [label="LOCALS\l0 = ()\l1 = *mut &u8\l", style="filled", color=palegreen3];
    Xa69e6f0281b6af9a_0 [label="Return\l"];
  }
  subgraph cluster_146 {
    label="core::ptr::drop_in_place:\n:<&u32>";
    style="filled";
    color=lightgray;
    node_147 [label="LOCALS\l0 = ()\l1 = *mut &u32\l", style="filled", color=palegreen3];
    Xfe6c34d78e923dcb_0 [label="Return\l"];
  }
  subgraph cluster_148 {
    label="core::ptr::drop_in_place:\n:<&()>";
    style="filled";
    color=lightgray;
    node_149 [label="LOCALS\l0 = ()\l1 = *mut &()\l", style="filled", color=palegreen3];
    Xcb5af9be68892568_0 [label="Return\l"];
  }
  subgraph cluster_150 {
    label="core::ptr::drop_in_place:\n:<&[u8; \n32]>";
    style="filled";
    color=lightgray;
    node_151 [label="LOCALS\l0 = ()\l1 = *mut &[u8; 32]\l", style="filled", color=palegreen3];
    Xff9ba7c8865dcc99_0 [label="Return\l"];
  }
  subgraph cluster_152 {
    label="core::ptr::drop_in_place:\n:<pinocchio::program_erro\nr::ProgramError>";
    style="filled";
    color=lightgray;
    node_153 [label="LOCALS\l0 = ()\l1 = *mut pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X3d8bfa7e8fa4ed7a_0 [label="Return\l"];
  }
  subgraph cluster_154 {
    label="core::ptr::drop_in_place:\n:<&pinocchio::program_err\nor::ProgramError>";
    style="filled";
    color=lightgray;
    node_155 [label="LOCALS\l0 = ()\l1 = *mut &pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X93be498283be854c_0 [label="Return\l"];
  }
  subgraph cluster_156 {
    label="core::ptr::mut_ptr::<impl\n \n*mut \nu8>::add";
    style="filled";
    color=lightgray;
    node_157 [label="LOCALS\l0 = *mut u8\l1 = *mut u8\l2 = usize\l", style="filled", color=palegreen3];
    Xf7c0564bc7b3306b_0 [label="0 <- Offset(cp(1), cp(2))\lReturn\l"];
  }
  subgraph cluster_158 {
    label="core::ptr::drop_in_place:\n:<&spl_token_interface::s\ntate::account_state::Acco\nuntState>";
    style="filled";
    color=lightgray;
    node_159 [label="LOCALS\l0 = ()\l1 = *mut &spl_token_interface::state::account_state::AccountState\l", style="filled", color=palegreen3];
    Xd9b5391bba4a859b_0 [label="Return\l"];
  }
  subgraph cluster_160 {
    label="core::ptr::const_ptr::<im\npl \n*const \nu8>::align_offset";
    style="filled";
    color=lightgray;
    node_161 [label="LOCALS\l0 = usize\l1 = *const u8\l2 = usize\l3 = !\l4 = core::fmt::Arguments<'_>\l5 = u32\l6 = &[&str]\l7 = &[core::fmt::rt::Argument<'_>]\l", style="filled", color=palegreen3];
    X1016b8be58aff39a_0 -> X1016b8be58aff39a_4 [label="5"];
    X1016b8be58aff39a_0 [label="Storage Live _5\lCall\l"];
    X1016b8be58aff39a_1 -> X1016b8be58aff39a_3 [label="0"];
    X1016b8be58aff39a_1 [label="Storage Dead _5\lCall\l"];
    X1016b8be58aff39a_2 [label="Storage Dead _5\lStorage Live _4\lStorage Live _6\l6 <- Cast-PointerCoercion(Unsize) const &[&str; 1]\lStorage Live _7\l7 <- Cast-PointerCoercion(Unsize) const &[core::fmt::rt::Argument<'_>; 0]\l4 <- Adt{0} (mv(6), const core::option::Option<&[core::fmt::rt::Placeholder]>, mv(7))\lStorage Dead _7\lStorage Dead _6\lCall\l"];
    X1016b8be58aff39a_3 [label="Return\l"];
    X1016b8be58aff39a_4 -> X1016b8be58aff39a_1 [label="1"];
    X1016b8be58aff39a_4 -> X1016b8be58aff39a_2 [label="other"];
    X1016b8be58aff39a_4 [label="SwitchInt mv(5)\l"];
  }
  X1016b8be58aff39a_0 -> X5ea6c111b835a80f_0 [label="cp(2)"];
  X1016b8be58aff39a_1 -> X19dd34cf757319eb_0 [label="mv(1),mv(2)"];
  X1016b8be58aff39a_2 -> Xfffaab11503b9894_0 [label="mv(4)"];
  subgraph cluster_162 {
    label="core::ptr::const_ptr::<im\npl \n*const \nspl_token_interface::stat\ne::mint::Mint>::read";
    style="filled";
    color=lightgray;
    node_163 [label="LOCALS\l0 = spl_token_interface::state::mint::Mint\l1 = *const spl_token_interface::state::mint::Mint\l", style="filled", color=palegreen3];
    X80b73d35b2577076_0 [label="0 <- Use(cp((*1)))\lReturn\l"];
  }
  subgraph cluster_164 {
    label="core::ptr::const_ptr::<im\npl \n*const \nspl_token_interface::stat\ne::account::Account>::rea\nd";
    style="filled";
    color=lightgray;
    node_165 [label="LOCALS\l0 = spl_token_interface::state::account::Account\l1 = *const spl_token_interface::state::account::Account\l", style="filled", color=palegreen3];
    X7dc6a8245be12621_0 [label="0 <- Use(cp((*1)))\lReturn\l"];
  }
  subgraph cluster_166 {
    label="core::iter::range::<impl \ncore::iter::Iterator \nfor \ncore::ops::Range<usize>>:\n:next";
    style="filled";
    color=lightgray;
    node_167 [label="LOCALS\l0 = core::option::Option<usize>\l1 = &mut core::ops::Range<usize>\l", style="filled", color=palegreen3];
    X1f9e69c6b415d93e_0 -> X1f9e69c6b415d93e_1 [label="0"];
    X1f9e69c6b415d93e_0 [label="Call\l"];
    X1f9e69c6b415d93e_1 [label="Return\l"];
  }
  X1f9e69c6b415d93e_0 -> X76d9451f9bf287e8_0 [label="mv(1)"];
  subgraph cluster_168 {
    label="core::array::<impl \ncore::fmt::Debug \nfor \n[u8; \n32]>::fmt";
    style="filled";
    color=lightgray;
    node_169 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &[u8; 32]\l2 = &mut core::fmt::Formatter<'_>\l3 = &&[u8]\l4 = &[u8]\l5 = &[u8]\l", style="filled", color=palegreen3];
    X20fa37143c5ec43f_0 -> X20fa37143c5ec43f_1 [label="0"];
    X20fa37143c5ec43f_0 [label="Storage Live _4\l5 <- Cast-PointerCoercion(Unsize) cp(1)\l4 <- Use(cp(5))\l3 <- & 4\lCall\l"];
    X20fa37143c5ec43f_1 [label="Storage Dead _4\lReturn\l"];
  }
  X20fa37143c5ec43f_0 -> X3deedd080d0bf2c6_0 [label="mv(5),mv(2)"];
  subgraph cluster_170 {
    label="core::array::equality::<i\nmpl \ncore::cmp::PartialEq \nfor \n[u8; \n32]>::eq";
    style="filled";
    color=lightgray;
    node_171 [label="LOCALS\l0 = bool\l1 = &[u8; 32]\l2 = &[u8; 32]\l", style="filled", color=palegreen3];
    Xe9ad0bcad84fb4ac_0 -> Xe9ad0bcad84fb4ac_1 [label="0"];
    Xe9ad0bcad84fb4ac_0 [label="Call\l"];
    Xe9ad0bcad84fb4ac_1 [label="Return\l"];
  }
  Xe9ad0bcad84fb4ac_0 -> Xb51f0a1884dba91f_0 [label="mv(1),mv(2)"];
  subgraph cluster_172 {
    label="core::array::equality::<i\nmpl \ncore::cmp::PartialEq \nfor \n[u8; \n32]>::ne";
    style="filled";
    color=lightgray;
    node_173 [label="LOCALS\l0 = bool\l1 = &[u8; 32]\l2 = &[u8; 32]\l", style="filled", color=palegreen3];
    X6dec8e35a57ec51c_0 -> X6dec8e35a57ec51c_1 [label="0"];
    X6dec8e35a57ec51c_0 [label="Call\l"];
    X6dec8e35a57ec51c_1 [label="Return\l"];
  }
  X6dec8e35a57ec51c_0 -> Xf0a84b1dfc729bb8_0 [label="mv(1),mv(2)"];
  subgraph cluster_174 {
    label="core::slice::<impl \n[u8]>::as_mut_ptr";
    style="filled";
    color=lightgray;
    node_175 [label="LOCALS\l0 = *mut u8\l1 = &mut [u8]\l2 = *mut [u8]\l", style="filled", color=palegreen3];
    X8641c13e22843093_0 [label="Storage Live _2\l2 <- &raw mut (*1)\l0 <- Cast-PtrToPtr mv(2)\lStorage Dead _2\lReturn\l"];
  }
  subgraph cluster_176 {
    label="core::slice::<impl \n[pinocchio::account_info:\n:AccountInfo]>::first_chu\nnk::<4>";
    style="filled";
    color=lightgray;
    node_177 [label="LOCALS\l0 = core::option::Option<&[pinocchio::account_info::AccountInfo; 4]>\l1 = &[pinocchio::account_info::AccountInfo]\l2 = bool\l3 = usize\l4 = &[pinocchio::account_info::AccountInfo; 4]\l5 = *const [pinocchio::account_info::AccountInfo; 4]\l6 = *const pinocchio::account_info::AccountInfo\l7 = *const [pinocchio::account_info::AccountInfo]\l", style="filled", color=palegreen3];
    X307d25e8633c02a0_0 -> X307d25e8633c02a0_2 [label="0"];
    X307d25e8633c02a0_0 -> X307d25e8633c02a0_1 [label="other"];
    X307d25e8633c02a0_0 [label="Storage Live _2\lStorage Live _3\l3 <- PtrMetadata(cp(1))\l2 <- Lt(mv(3), const ?_usize)\lSwitchInt mv(2)\l"];
    X307d25e8633c02a0_1 -> X307d25e8633c02a0_3;
    X307d25e8633c02a0_1 [label="Storage Dead _3\l0 <- Use(const core::option::Option<&[pinocchio::account_info::AccountInfo; 4]>)\lGoto\l"];
    X307d25e8633c02a0_2 -> X307d25e8633c02a0_3;
    X307d25e8633c02a0_2 [label="Storage Dead _3\lStorage Live _5\lStorage Live _6\l7 <- &raw (*1)\l6 <- Cast-PtrToPtr cp(7)\l5 <- Cast-PtrToPtr cp(7)\lStorage Dead _6\l4 <- & (*5)\l0 <- Adt{1} (cp(4))\lStorage Dead _5\lGoto\l"];
    X307d25e8633c02a0_3 [label="Storage Dead _2\lReturn\l"];
  }
  subgraph cluster_178 {
    label="core::slice::<impl \n[u8]>::get_unchecked::<us\nize>";
    style="filled";
    color=lightgray;
    node_179 [label="LOCALS\l0 = &u8\l1 = &[u8]\l2 = usize\l3 = *const u8\l4 = *const [u8]\l", style="filled", color=palegreen3];
    Xe2dd8d6d8ab56bef_0 -> Xe2dd8d6d8ab56bef_1 [label="3"];
    Xe2dd8d6d8ab56bef_0 [label="Storage Live _3\lStorage Live _4\l4 <- &raw (*1)\lCall\l"];
    Xe2dd8d6d8ab56bef_1 [label="Storage Dead _4\l0 <- & (*3)\lStorage Dead _3\lReturn\l"];
  }
  Xe2dd8d6d8ab56bef_0 -> X7bd4403f8d22bbb7_0 [label="mv(2),mv(4)"];
  subgraph cluster_180 {
    label="core::slice::<impl \n[pinocchio::account_info:\n:AccountInfo]>::get_unche\ncked::<core::ops::RangeTo\n<usize>>";
    style="filled";
    color=lightgray;
    node_181 [label="LOCALS\l0 = &[pinocchio::account_info::AccountInfo]\l1 = &[pinocchio::account_info::AccountInfo]\l2 = core::ops::RangeTo<usize>\l3 = *const [pinocchio::account_info::AccountInfo]\l4 = *const [pinocchio::account_info::AccountInfo]\l", style="filled", color=palegreen3];
    X76d4fee106df2abc_0 -> X76d4fee106df2abc_1 [label="3"];
    X76d4fee106df2abc_0 [label="Storage Live _3\lStorage Live _4\l4 <- &raw (*1)\lCall\l"];
    X76d4fee106df2abc_1 [label="Storage Dead _4\l0 <- & (*3)\lStorage Dead _3\lReturn\l"];
  }
  X76d4fee106df2abc_0 -> X547eb5d0a2c4568_0 [label="mv(2),mv(4)"];
  subgraph cluster_182 {
    label="core::slice::<impl \n[u8]>::get_unchecked::<co\nre::ops::Range<usize>>";
    style="filled";
    color=lightgray;
    node_183 [label="LOCALS\l0 = &[u8]\l1 = &[u8]\l2 = core::ops::Range<usize>\l3 = *const [u8]\l4 = *const [u8]\l", style="filled", color=palegreen3];
    X63c3503b3e7fa274_0 -> X63c3503b3e7fa274_1 [label="3"];
    X63c3503b3e7fa274_0 [label="Storage Live _3\lStorage Live _4\l4 <- &raw (*1)\lCall\l"];
    X63c3503b3e7fa274_1 [label="Storage Dead _4\l0 <- & (*3)\lStorage Dead _3\lReturn\l"];
  }
  X63c3503b3e7fa274_0 -> Xa5745fda7f573cf5_0 [label="mv(2),mv(4)"];
  subgraph cluster_184 {
    label="core::slice::<impl \n[core::mem::MaybeUninit<p\ninocchio::account_info::A\nccountInfo>]>::get_unchec\nked::<usize>";
    style="filled";
    color=lightgray;
    node_185 [label="LOCALS\l0 = &core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l1 = &[core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l2 = usize\l3 = *const core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l4 = *const [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l", style="filled", color=palegreen3];
    X5fd8469768ca93e7_0 -> X5fd8469768ca93e7_1 [label="3"];
    X5fd8469768ca93e7_0 [label="Storage Live _3\lStorage Live _4\l4 <- &raw (*1)\lCall\l"];
    X5fd8469768ca93e7_1 [label="Storage Dead _4\l0 <- & (*3)\lStorage Dead _3\lReturn\l"];
  }
  X5fd8469768ca93e7_0 -> Xf7c0e3c61151eb20_0 [label="mv(2),mv(4)"];
  subgraph cluster_186 {
    label="core::slice::<impl \n[pinocchio::account_info:\n:AccountInfo]>::first";
    style="filled";
    color=lightgray;
    node_187 [label="LOCALS\l0 = core::option::Option<&pinocchio::account_info::AccountInfo>\l1 = &[pinocchio::account_info::AccountInfo]\l2 = usize\l3 = bool\l4 = &pinocchio::account_info::AccountInfo\l", style="filled", color=palegreen3];
    X69f80c161df389cb_0 -> X69f80c161df389cb_2 [label="0"];
    X69f80c161df389cb_0 -> X69f80c161df389cb_1 [label="other"];
    X69f80c161df389cb_0 [label="2 <- Len((*1))\l3 <- Ge(mv(2), const ?_usize)\lSwitchInt mv(3)\l"];
    X69f80c161df389cb_1 -> X69f80c161df389cb_3;
    X69f80c161df389cb_1 [label="4 <- & (*1)[0]\l0 <- Adt{1} (cp(4))\lGoto\l"];
    X69f80c161df389cb_2 -> X69f80c161df389cb_3;
    X69f80c161df389cb_2 [label="0 <- Use(const core::option::Option<&pinocchio::account_info::AccountInfo>)\lGoto\l"];
    X69f80c161df389cb_3 [label="Return\l"];
  }
  subgraph cluster_188 {
    label="core::slice::<impl \n[core::mem::MaybeUninit<p\ninocchio::account_info::A\nccountInfo>]>::as_ptr";
    style="filled";
    color=lightgray;
    node_189 [label="LOCALS\l0 = *const core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l1 = &[core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l2 = *const [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l", style="filled", color=palegreen3];
    Xd96a92a3093bb3ff_0 [label="Storage Live _2\l2 <- &raw (*1)\l0 <- Cast-PtrToPtr mv(2)\lStorage Dead _2\lReturn\l"];
  }
  subgraph cluster_190 {
    label="core::slice::<impl \n[u8]>::as_ptr";
    style="filled";
    color=lightgray;
    node_191 [label="LOCALS\l0 = *const u8\l1 = &[u8]\l2 = *const [u8]\l", style="filled", color=palegreen3];
    X5e85acfe8a19755e_0 [label="Storage Live _2\l2 <- &raw (*1)\l0 <- Cast-PtrToPtr mv(2)\lStorage Dead _2\lReturn\l"];
  }
  subgraph cluster_192 {
    label="core::slice::from_raw_par\nts::<'_, \npinocchio::account_info::\nAccountInfo>";
    style="filled";
    color=lightgray;
    node_193 [label="LOCALS\l0 = &[pinocchio::account_info::AccountInfo]\l1 = *const pinocchio::account_info::AccountInfo\l2 = usize\l3 = bool\l4 = ()\l5 = *mut ()\l6 = usize\l7 = usize\l8 = *const [pinocchio::account_info::AccountInfo]\l", style="filled", color=palegreen3];
    X990394bf3cfa52c4_0 -> X990394bf3cfa52c4_3 [label="0"];
    X990394bf3cfa52c4_0 -> X990394bf3cfa52c4_1 [label="other"];
    X990394bf3cfa52c4_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    X990394bf3cfa52c4_1 -> X990394bf3cfa52c4_2 [label="4"];
    X990394bf3cfa52c4_1 [label="Storage Live _5\l5 <- Cast-PtrToPtr cp(1)\lStorage Live _6\l6 <- SizeOf :: pinocchio::account_info::AccountInfo\lStorage Live _7\l7 <- AlignOf :: pinocchio::account_info::AccountInfo\lCall\l"];
    X990394bf3cfa52c4_2 -> X990394bf3cfa52c4_3;
    X990394bf3cfa52c4_2 [label="Storage Dead _7\lStorage Dead _6\lStorage Dead _5\lGoto\l"];
    X990394bf3cfa52c4_3 [label="Storage Dead _3\lStorage Live _8\l8 <- *([pinocchio::account_info::AccountInfo]) (cp(1), cp(2))\l0 <- & (*8)\lStorage Dead _8\lReturn\l"];
  }
  X990394bf3cfa52c4_1 -> X9e3bdfa64cf2efd4_0 [label="mv(5),mv(6),mv(7),cp(2)"];
  subgraph cluster_194 {
    label="core::slice::from_raw_par\nts::precondition_check";
    style="filled";
    color=lightgray;
    node_195 [label="LOCALS\l0 = ()\l1 = *mut ()\l2 = usize\l3 = usize\l4 = usize\l5 = bool\l6 = *const ()\l7 = bool\l8 = !\l9 = bool\l10 = !\l11 = core::fmt::Arguments<'_>\l12 = usize\l13 = usize\l14 = usize\l15 = u32\l16 = &[&str]\l17 = &[core::fmt::rt::Argument<'_>]\l18 = *const u8\l19 = usize\l20 = bool\l21 = usize\l", style="filled", color=palegreen3];
    X9e3bdfa64cf2efd4_0 -> X9e3bdfa64cf2efd4_10 [label="15"];
    X9e3bdfa64cf2efd4_0 [label="Storage Live _5\lStorage Live _6\l6 <- Cast-PtrToPtr cp(1)\lStorage Live _13\lStorage Live _15\lCall\l"];
    X9e3bdfa64cf2efd4_1 -> X9e3bdfa64cf2efd4_11 [label="0"];
    X9e3bdfa64cf2efd4_1 -> X9e3bdfa64cf2efd4_12 [label="other"];
    X9e3bdfa64cf2efd4_1 [label="Storage Dead _6\lStorage Live _7\lStorage Live _20\lStorage Live _19\l20 <- Eq(cp(2), const ?_usize)\lSwitchInt cp(2)\l"];
    X9e3bdfa64cf2efd4_2 [label="Storage Dead _7\lStorage Dead _5\lReturn\l"];
    X9e3bdfa64cf2efd4_3 -> X9e3bdfa64cf2efd4_5;
    X9e3bdfa64cf2efd4_3 [label="Goto\l"];
    X9e3bdfa64cf2efd4_4 -> X9e3bdfa64cf2efd4_5;
    X9e3bdfa64cf2efd4_4 [label="Storage Dead _6\lGoto\l"];
    X9e3bdfa64cf2efd4_5 [label="Call\l"];
    X9e3bdfa64cf2efd4_6 -> X9e3bdfa64cf2efd4_4 [label="0"];
    X9e3bdfa64cf2efd4_6 -> X9e3bdfa64cf2efd4_1 [label="other"];
    X9e3bdfa64cf2efd4_6 [label="Storage Dead _12\lStorage Live _9\lStorage Live _18\l18 <- Cast-PtrToPtr cp(1)\l9 <- Eq(cp(13), const ?_usize)\lStorage Dead _18\l5 <- Not(mv(9))\lStorage Dead _9\lStorage Dead _13\lSwitchInt mv(5)\l"];
    X9e3bdfa64cf2efd4_7 -> X9e3bdfa64cf2efd4_4;
    X9e3bdfa64cf2efd4_7 [label="Storage Dead _12\lStorage Dead _13\lGoto\l"];
    X9e3bdfa64cf2efd4_8 -> X9e3bdfa64cf2efd4_6 [label="0"];
    X9e3bdfa64cf2efd4_8 -> X9e3bdfa64cf2efd4_7 [label="other"];
    X9e3bdfa64cf2efd4_8 [label="Storage Dead _15\lStorage Live _12\l13 <- Cast-Transmute cp(1)\lStorage Live _14\l14 <- Sub(cp(3), const ?_usize)\l12 <- BitAnd(cp(13), mv(14))\lStorage Dead _14\lSwitchInt mv(12)\l"];
    X9e3bdfa64cf2efd4_9 [label="Storage Dead _15\lStorage Live _11\lStorage Live _16\l16 <- Cast-PointerCoercion(Unsize) const &[&str; 1]\lStorage Live _17\l17 <- Cast-PointerCoercion(Unsize) const &[core::fmt::rt::Argument<'_>; 0]\l11 <- Adt{0} (mv(16), const core::option::Option<&[core::fmt::rt::Placeholder]>, mv(17))\lStorage Dead _17\lStorage Dead _16\lCall\l"];
    X9e3bdfa64cf2efd4_10 -> X9e3bdfa64cf2efd4_8 [label="1"];
    X9e3bdfa64cf2efd4_10 -> X9e3bdfa64cf2efd4_9 [label="other"];
    X9e3bdfa64cf2efd4_10 [label="SwitchInt mv(15)\l"];
    X9e3bdfa64cf2efd4_11 -> X9e3bdfa64cf2efd4_14;
    X9e3bdfa64cf2efd4_11 [label="19 <- Use(const ?_usize)\lGoto\l"];
    X9e3bdfa64cf2efd4_12 -> X9e3bdfa64cf2efd4_13;
    X9e3bdfa64cf2efd4_12 [label="Assert cp(20) == false\l"];
    X9e3bdfa64cf2efd4_13 -> X9e3bdfa64cf2efd4_14;
    X9e3bdfa64cf2efd4_13 [label="19 <- Div(const ?_usize, cp(2))\lGoto\l"];
    X9e3bdfa64cf2efd4_14 -> X9e3bdfa64cf2efd4_3 [label="0"];
    X9e3bdfa64cf2efd4_14 -> X9e3bdfa64cf2efd4_2 [label="other"];
    X9e3bdfa64cf2efd4_14 [label="Storage Live _21\l21 <- Use(cp(19))\l7 <- Le(cp(4), mv(21))\lStorage Dead _21\lStorage Dead _19\lStorage Dead _20\lSwitchInt mv(7)\l"];
  }
  X9e3bdfa64cf2efd4_0 -> X5ea6c111b835a80f_0 [label="cp(3)"];
  X9e3bdfa64cf2efd4_5 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  X9e3bdfa64cf2efd4_9 -> Xfffaab11503b9894_0 [label="mv(11)"];
  subgraph cluster_196 {
    label="core::slice::index::<impl\n \ncore::ops::Index<core::op\ns::RangeFrom<usize>> \nfor \n[pinocchio::account_info:\n:AccountInfo]>::index";
    style="filled";
    color=lightgray;
    node_197 [label="LOCALS\l0 = &[pinocchio::account_info::AccountInfo]\l1 = &[pinocchio::account_info::AccountInfo]\l2 = core::ops::RangeFrom<usize>\l", style="filled", color=palegreen3];
    X7354e97359dec8c1_0 -> X7354e97359dec8c1_1 [label="0"];
    X7354e97359dec8c1_0 [label="Call\l"];
    X7354e97359dec8c1_1 [label="Return\l"];
  }
  X7354e97359dec8c1_0 -> Xb10705ddd1b146e2_0 [label="mv(2),mv(1)"];
  subgraph cluster_198 {
    label="core::slice::index::<impl\n \ncore::ops::Index<core::op\ns::RangeFrom<usize>> \nfor \n[u8]>::index";
    style="filled";
    color=lightgray;
    node_199 [label="LOCALS\l0 = &[u8]\l1 = &[u8]\l2 = core::ops::RangeFrom<usize>\l", style="filled", color=palegreen3];
    Xac6bf6e65b32d0d0_0 -> Xac6bf6e65b32d0d0_1 [label="0"];
    Xac6bf6e65b32d0d0_0 [label="Call\l"];
    Xac6bf6e65b32d0d0_1 [label="Return\l"];
  }
  Xac6bf6e65b32d0d0_0 -> Xdbbcf3965a56e3eb_0 [label="mv(2),mv(1)"];
  subgraph cluster_200 {
    label="core::option::Option::<&p\ninocchio::account_info::A\nccountInfo>::ok_or::<pino\ncchio::program_error::Pro\ngramError>";
    style="filled";
    color=lightgray;
    node_201 [label="LOCALS\l0 = core::result::Result<&pinocchio::account_info::AccountInfo, pinocchio::program_error::ProgramError>\l1 = core::option::Option<&pinocchio::account_info::AccountInfo>\l2 = pinocchio::program_error::ProgramError\l3 = isize\l4 = &pinocchio::account_info::AccountInfo\l5 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X347766f6d4a7a5dc_0 -> X347766f6d4a7a5dc_2 [label="0"];
    X347766f6d4a7a5dc_0 -> X347766f6d4a7a5dc_3 [label="1"];
    X347766f6d4a7a5dc_0 -> X347766f6d4a7a5dc_1 [label="other"];
    X347766f6d4a7a5dc_0 [label="3 <- Discriminant(1)\lSwitchInt mv(3)\l"];
    X347766f6d4a7a5dc_1 [label="Unreachable\l"];
    X347766f6d4a7a5dc_2 -> X347766f6d4a7a5dc_4;
    X347766f6d4a7a5dc_2 [label="Storage Live _5\l5 <- Use(mv(2))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    X347766f6d4a7a5dc_3 -> X347766f6d4a7a5dc_4;
    X347766f6d4a7a5dc_3 [label="4 <- Use(mv((1 as variant 1).0))\l0 <- Adt{0} (cp(4))\lDrop 2\l"];
    X347766f6d4a7a5dc_4 [label="Return\l"];
  }
  subgraph cluster_202 {
    label="core::option::Option::<&[\npinocchio::account_info::\nAccountInfo; \n4]>::unwrap";
    style="filled";
    color=lightgray;
    node_203 [label="LOCALS\l0 = &[pinocchio::account_info::AccountInfo; 4]\l1 = core::option::Option<&[pinocchio::account_info::AccountInfo; 4]>\l2 = isize\l3 = !\l", style="filled", color=palegreen3];
    X963747dca830d1cd_0 -> X963747dca830d1cd_2 [label="0"];
    X963747dca830d1cd_0 -> X963747dca830d1cd_3 [label="1"];
    X963747dca830d1cd_0 -> X963747dca830d1cd_1 [label="other"];
    X963747dca830d1cd_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X963747dca830d1cd_1 [label="Unreachable\l"];
    X963747dca830d1cd_2 [label="Call\l"];
    X963747dca830d1cd_3 [label="0 <- Use(mv((1 as variant 1).0))\lReturn\l"];
  }
  X963747dca830d1cd_2 -> X9b498145f7dc0efa_0 [label=""];
  subgraph cluster_204 {
    label="core::option::Option::<u6\n4>::unwrap";
    style="filled";
    color=lightgray;
    node_205 [label="LOCALS\l0 = u64\l1 = core::option::Option<u64>\l2 = isize\l3 = !\l", style="filled", color=palegreen3];
    X7d5c5735aaa5a26c_0 -> X7d5c5735aaa5a26c_2 [label="0"];
    X7d5c5735aaa5a26c_0 -> X7d5c5735aaa5a26c_3 [label="1"];
    X7d5c5735aaa5a26c_0 -> X7d5c5735aaa5a26c_1 [label="other"];
    X7d5c5735aaa5a26c_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X7d5c5735aaa5a26c_1 [label="Unreachable\l"];
    X7d5c5735aaa5a26c_2 [label="Call\l"];
    X7d5c5735aaa5a26c_3 [label="0 <- Use(mv((1 as variant 1).0))\lReturn\l"];
  }
  X7d5c5735aaa5a26c_2 -> X9b498145f7dc0efa_0 [label=""];
  subgraph cluster_206 {
    label="core::result::Result::<()\n, \npinocchio::program_error:\n:ProgramError>::inspect_e\nrr::<for<'a> \nfn(&'a \npinocchio::program_error:\n:ProgramError) \n{entrypoint::log_error}>";
    style="filled";
    color=lightgray;
    node_207 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = core::result::Result<(), pinocchio::program_error::ProgramError>\l2 = for<'a> fn(&'a pinocchio::program_error::ProgramError) {entrypoint::log_error}\l3 = isize\l4 = &pinocchio::program_error::ProgramError\l5 = ()\l6 = for<'a> fn(&'a pinocchio::program_error::ProgramError) {entrypoint::log_error}\l7 = (&pinocchio::program_error::ProgramError,)\l8 = bool\l9 = bool\l", style="filled", color=palegreen3];
    X960a47fdaee9926a_0 -> X960a47fdaee9926a_1 [label="1"];
    X960a47fdaee9926a_0 -> X960a47fdaee9926a_3 [label="0"];
    X960a47fdaee9926a_0 -> X960a47fdaee9926a_9 [label="other"];
    X960a47fdaee9926a_0 [label="9 <- Use(const bool)\l8 <- Use(const bool)\l3 <- Discriminant(1)\lSwitchInt mv(3)\l"];
    X960a47fdaee9926a_1 -> X960a47fdaee9926a_8 [label="Cleanup"];
    X960a47fdaee9926a_1 -> X960a47fdaee9926a_2 [label="5"];
    X960a47fdaee9926a_1 [label="4 <- & (1 as variant 1).0\lStorage Live _6\l6 <- Use(mv(2))\lStorage Live _7\l7 <- Tuple (cp(4))\lCall\l"];
    X960a47fdaee9926a_2 -> X960a47fdaee9926a_4;
    X960a47fdaee9926a_2 [label="Storage Dead _7\lStorage Dead _6\l0 <- Use(mv(1))\lGoto\l"];
    X960a47fdaee9926a_3 -> X960a47fdaee9926a_4 [label="0"];
    X960a47fdaee9926a_3 -> X960a47fdaee9926a_6 [label="other"];
    X960a47fdaee9926a_3 [label="9 <- Use(const bool)\l0 <- Use(mv(1))\lSwitchInt cp(8)\l"];
    X960a47fdaee9926a_4 [label="Return\l"];
    X960a47fdaee9926a_5 [label="Resume\l"];
    X960a47fdaee9926a_6 -> X960a47fdaee9926a_8 [label="Cleanup"];
    X960a47fdaee9926a_6 -> X960a47fdaee9926a_4;
    X960a47fdaee9926a_6 [label="Drop 2\l"];
    X960a47fdaee9926a_7 -> X960a47fdaee9926a_5;
    X960a47fdaee9926a_7 [label="Drop 1\l"];
    X960a47fdaee9926a_8 -> X960a47fdaee9926a_5 [label="0"];
    X960a47fdaee9926a_8 -> X960a47fdaee9926a_7 [label="other"];
    X960a47fdaee9926a_8 [label="SwitchInt cp(9)\l"];
    X960a47fdaee9926a_9 [label="Unreachable\l"];
  }
  X960a47fdaee9926a_1 -> Xf950bf27d0cf5c6c_0 [label="mv(6),mv(7)"];
  subgraph cluster_208 {
    label="core::result::Result::<sp\nl_token_interface::state:\n:account_state::AccountSt\nate, \npinocchio::program_error:\n:ProgramError>::map::<boo\nl, \n{closure@<spl_token_inter\nface::state::account::Acc\nount \nas \nspl_token_interface::stat\ne::Initializable>::is_ini\ntialized::{closure#0}}>";
    style="filled";
    color=lightgray;
    node_209 [label="LOCALS\l0 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l1 = core::result::Result<spl_token_interface::state::account_state::AccountState, pinocchio::program_error::ProgramError>\l2 = {closure@<spl_token_interface::state::account::Account as spl_token_interface::state::Initializable>::is_initialized::{closure#0}}\l3 = isize\l4 = spl_token_interface::state::account_state::AccountState\l5 = bool\l6 = {closure@<spl_token_interface::state::account::Account as spl_token_interface::state::Initializable>::is_initialized::{closure#0}}\l7 = (spl_token_interface::state::account_state::AccountState,)\l8 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X881c7a326c470b28_0 -> X881c7a326c470b28_3 [label="0"];
    X881c7a326c470b28_0 -> X881c7a326c470b28_2 [label="1"];
    X881c7a326c470b28_0 -> X881c7a326c470b28_1 [label="other"];
    X881c7a326c470b28_0 [label="3 <- Discriminant(1)\lSwitchInt mv(3)\l"];
    X881c7a326c470b28_1 [label="Unreachable\l"];
    X881c7a326c470b28_2 -> X881c7a326c470b28_5;
    X881c7a326c470b28_2 [label="8 <- Use(mv((1 as variant 1).0))\l0 <- Adt{1} (cp(8))\lDrop 2\l"];
    X881c7a326c470b28_3 -> X881c7a326c470b28_4 [label="5"];
    X881c7a326c470b28_3 [label="4 <- Use(mv((1 as variant 0).0))\lStorage Live _5\lStorage Live _6\l6 <- Use(mv(2))\lStorage Live _7\l7 <- Tuple (cp(4))\lCall\l"];
    X881c7a326c470b28_4 -> X881c7a326c470b28_5;
    X881c7a326c470b28_4 [label="Storage Dead _7\lStorage Dead _6\l0 <- Adt{0} (mv(5))\lStorage Dead _5\lGoto\l"];
    X881c7a326c470b28_5 [label="Return\l"];
  }
  X881c7a326c470b28_3 -> Xe8c8eaa619633971_0 [label="mv(6),mv(7)"];
  subgraph cluster_210 {
    label="core::result::Result::<()\n, \npinocchio::program_error:\n:ProgramError>::is_ok";
    style="filled";
    color=lightgray;
    node_211 [label="LOCALS\l0 = bool\l1 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l2 = isize\l", style="filled", color=palegreen3];
    X19e8b93c837642e3_0 -> X19e8b93c837642e3_2 [label="0"];
    X19e8b93c837642e3_0 -> X19e8b93c837642e3_1 [label="1"];
    X19e8b93c837642e3_0 -> X19e8b93c837642e3_4 [label="other"];
    X19e8b93c837642e3_0 [label="2 <- Discriminant((*1))\lSwitchInt mv(2)\l"];
    X19e8b93c837642e3_1 -> X19e8b93c837642e3_3;
    X19e8b93c837642e3_1 [label="0 <- Use(const bool)\lGoto\l"];
    X19e8b93c837642e3_2 -> X19e8b93c837642e3_3;
    X19e8b93c837642e3_2 [label="0 <- Use(const bool)\lGoto\l"];
    X19e8b93c837642e3_3 [label="Return\l"];
    X19e8b93c837642e3_4 [label="Unreachable\l"];
  }
  subgraph cluster_212 {
    label="core::result::Result::<sp\nl_token_interface::state:\n:account_state::AccountSt\nate, \npinocchio::program_error:\n:ProgramError>::unwrap";
    style="filled";
    color=lightgray;
    node_213 [label="LOCALS\l0 = spl_token_interface::state::account_state::AccountState\l1 = core::result::Result<spl_token_interface::state::account_state::AccountState, pinocchio::program_error::ProgramError>\l2 = isize\l3 = pinocchio::program_error::ProgramError\l4 = !\l5 = &dyn core::fmt::Debug\l6 = &pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    Xca79d860634e64da_0 -> Xca79d860634e64da_3 [label="0"];
    Xca79d860634e64da_0 -> Xca79d860634e64da_2 [label="1"];
    Xca79d860634e64da_0 -> Xca79d860634e64da_1 [label="other"];
    Xca79d860634e64da_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    Xca79d860634e64da_1 [label="Unreachable\l"];
    Xca79d860634e64da_2 -> Xca79d860634e64da_4 [label="Cleanup"];
    Xca79d860634e64da_2 [label="Storage Live _3\l3 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l6 <- & 3\l5 <- Cast-PointerCoercion(Unsize) cp(6)\lCall\l"];
    Xca79d860634e64da_3 [label="0 <- Use(mv((1 as variant 0).0))\lReturn\l"];
    Xca79d860634e64da_4 -> Xca79d860634e64da_5;
    Xca79d860634e64da_4 [label="Drop 3\l"];
    Xca79d860634e64da_5 [label="Resume\l"];
  }
  Xca79d860634e64da_2 -> Xdd778da4886cf626_0 [label="const &str,mv(5)"];
  subgraph cluster_214 {
    label="core::result::Result::<bo\nol, \npinocchio::program_error:\n:ProgramError>::unwrap";
    style="filled";
    color=lightgray;
    node_215 [label="LOCALS\l0 = bool\l1 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l2 = isize\l3 = pinocchio::program_error::ProgramError\l4 = !\l5 = &dyn core::fmt::Debug\l6 = &pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X89be5f95c133d42a_0 -> X89be5f95c133d42a_3 [label="0"];
    X89be5f95c133d42a_0 -> X89be5f95c133d42a_2 [label="1"];
    X89be5f95c133d42a_0 -> X89be5f95c133d42a_1 [label="other"];
    X89be5f95c133d42a_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X89be5f95c133d42a_1 [label="Unreachable\l"];
    X89be5f95c133d42a_2 -> X89be5f95c133d42a_4 [label="Cleanup"];
    X89be5f95c133d42a_2 [label="Storage Live _3\l3 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l6 <- & 3\l5 <- Cast-PointerCoercion(Unsize) cp(6)\lCall\l"];
    X89be5f95c133d42a_3 [label="0 <- Use(mv((1 as variant 0).0))\lReturn\l"];
    X89be5f95c133d42a_4 -> X89be5f95c133d42a_5;
    X89be5f95c133d42a_4 [label="Drop 3\l"];
    X89be5f95c133d42a_5 [label="Resume\l"];
  }
  X89be5f95c133d42a_2 -> Xdd778da4886cf626_0 [label="const &str,mv(5)"];
  subgraph cluster_216 {
    label="core::result::Result::<&s\npl_token_interface::state\n::mint::Mint, \npinocchio::program_error:\n:ProgramError>::map_err::\n<spl_token_interface::err\nor::TokenError, \n{closure@p-token/src/proc\nessor/shared/initialize_a\nccount.rs:79:69: \n79:72}>";
    style="filled";
    color=lightgray;
    node_217 [label="LOCALS\l0 = core::result::Result<&spl_token_interface::state::mint::Mint, spl_token_interface::error::TokenError>\l1 = core::result::Result<&spl_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l2 = {closure@p-token/src/processor/shared/initialize_account.rs:79:69: 79:72}\l3 = isize\l4 = &spl_token_interface::state::mint::Mint\l5 = pinocchio::program_error::ProgramError\l6 = spl_token_interface::error::TokenError\l7 = {closure@p-token/src/processor/shared/initialize_account.rs:79:69: 79:72}\l8 = (pinocchio::program_error::ProgramError,)\l", style="filled", color=palegreen3];
    X6225231dc09ec3e4_0 -> X6225231dc09ec3e4_3 [label="0"];
    X6225231dc09ec3e4_0 -> X6225231dc09ec3e4_2 [label="1"];
    X6225231dc09ec3e4_0 -> X6225231dc09ec3e4_1 [label="other"];
    X6225231dc09ec3e4_0 [label="3 <- Discriminant(1)\lSwitchInt mv(3)\l"];
    X6225231dc09ec3e4_1 [label="Unreachable\l"];
    X6225231dc09ec3e4_2 -> X6225231dc09ec3e4_4 [label="6"];
    X6225231dc09ec3e4_2 [label="5 <- Use(mv((1 as variant 1).0))\lStorage Live _6\lStorage Live _7\l7 <- Use(mv(2))\lStorage Live _8\l8 <- Tuple (cp(5))\lCall\l"];
    X6225231dc09ec3e4_3 -> X6225231dc09ec3e4_5;
    X6225231dc09ec3e4_3 [label="4 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(4))\lDrop 2\l"];
    X6225231dc09ec3e4_4 -> X6225231dc09ec3e4_5;
    X6225231dc09ec3e4_4 [label="Storage Dead _8\lStorage Dead _7\l0 <- Adt{1} (mv(6))\lStorage Dead _6\lGoto\l"];
    X6225231dc09ec3e4_5 [label="Return\l"];
  }
  X6225231dc09ec3e4_2 -> X804d5408d551cb97_0 [label="mv(7),mv(8)"];
  subgraph cluster_218 {
    label="core::result::Result::<&s\npl_token_interface::state\n::mint::Mint, \npinocchio::program_error:\n:ProgramError>::and_then:\n:<&spl_token_interface::s\ntate::mint::Mint, \n{closure@spl_token_interf\nace::state::load<spl_toke\nn_interface::state::mint:\n:Mint>::{closure#0}}>";
    style="filled";
    color=lightgray;
    node_219 [label="LOCALS\l0 = core::result::Result<&spl_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l1 = core::result::Result<&spl_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l2 = {closure@spl_token_interface::state::load<spl_token_interface::state::mint::Mint>::{closure#0}}\l3 = isize\l4 = &spl_token_interface::state::mint::Mint\l5 = {closure@spl_token_interface::state::load<spl_token_interface::state::mint::Mint>::{closure#0}}\l6 = (&spl_token_interface::state::mint::Mint,)\l7 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    Xdfbed971e20b497d_0 -> Xdfbed971e20b497d_3 [label="0"];
    Xdfbed971e20b497d_0 -> Xdfbed971e20b497d_2 [label="1"];
    Xdfbed971e20b497d_0 -> Xdfbed971e20b497d_1 [label="other"];
    Xdfbed971e20b497d_0 [label="3 <- Discriminant(1)\lSwitchInt mv(3)\l"];
    Xdfbed971e20b497d_1 [label="Unreachable\l"];
    Xdfbed971e20b497d_2 -> Xdfbed971e20b497d_5;
    Xdfbed971e20b497d_2 [label="7 <- Use(mv((1 as variant 1).0))\l0 <- Adt{1} (cp(7))\lDrop 2\l"];
    Xdfbed971e20b497d_3 -> Xdfbed971e20b497d_4 [label="0"];
    Xdfbed971e20b497d_3 [label="4 <- Use(mv((1 as variant 0).0))\lStorage Live _5\l5 <- Use(mv(2))\lStorage Live _6\l6 <- Tuple (cp(4))\lCall\l"];
    Xdfbed971e20b497d_4 -> Xdfbed971e20b497d_5;
    Xdfbed971e20b497d_4 [label="Storage Dead _6\lStorage Dead _5\lGoto\l"];
    Xdfbed971e20b497d_5 [label="Return\l"];
  }
  Xdfbed971e20b497d_3 -> Xd59e01ff537956ed_0 [label="mv(5),mv(6)"];
  subgraph cluster_220 {
    label="core::panicking::assert_f\nailed::<[u8; \n32], \n[u8; \n32]>";
    style="filled";
    color=lightgray;
    node_221 [label="LOCALS\l0 = !\l1 = core::panicking::AssertKind\l2 = &[u8; 32]\l3 = &[u8; 32]\l4 = core::option::Option<core::fmt::Arguments<'_>>\l5 = &dyn core::fmt::Debug\l6 = &&[u8; 32]\l7 = &dyn core::fmt::Debug\l8 = &&[u8; 32]\l", style="filled", color=palegreen3];
    X844355eb68dec65_0 [label="Storage Live _5\l6 <- & 2\l5 <- Cast-PointerCoercion(Unsize) cp(6)\lStorage Live _7\l8 <- & 3\l7 <- Cast-PointerCoercion(Unsize) cp(8)\lCall\l"];
  }
  X844355eb68dec65_0 -> X1eb9e8a223d962a5_0 [label="mv(1),mv(5),mv(7),mv(4)"];
  subgraph cluster_222 {
    label="core::panicking::assert_f\nailed::<core::result::Res\nult<(), \npinocchio::program_error:\n:ProgramError>, \ncore::result::Result<(), \npinocchio::program_error:\n:ProgramError>>";
    style="filled";
    color=lightgray;
    node_223 [label="LOCALS\l0 = !\l1 = core::panicking::AssertKind\l2 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l3 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l4 = core::option::Option<core::fmt::Arguments<'_>>\l5 = &dyn core::fmt::Debug\l6 = &&core::result::Result<(), pinocchio::program_error::ProgramError>\l7 = &dyn core::fmt::Debug\l8 = &&core::result::Result<(), pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    X1badff0345f2ca99_0 [label="Storage Live _5\l6 <- & 2\l5 <- Cast-PointerCoercion(Unsize) cp(6)\lStorage Live _7\l8 <- & 3\l7 <- Cast-PointerCoercion(Unsize) cp(8)\lCall\l"];
  }
  X1badff0345f2ca99_0 -> X1eb9e8a223d962a5_0 [label="mv(1),mv(5),mv(7),mv(4)"];
  subgraph cluster_224 {
    label="core::panicking::assert_f\nailed::<spl_token_interfa\nce::state::account_state:\n:AccountState, \nspl_token_interface::stat\ne::account_state::Account\nState>";
    style="filled";
    color=lightgray;
    node_225 [label="LOCALS\l0 = !\l1 = core::panicking::AssertKind\l2 = &spl_token_interface::state::account_state::AccountState\l3 = &spl_token_interface::state::account_state::AccountState\l4 = core::option::Option<core::fmt::Arguments<'_>>\l5 = &dyn core::fmt::Debug\l6 = &&spl_token_interface::state::account_state::AccountState\l7 = &dyn core::fmt::Debug\l8 = &&spl_token_interface::state::account_state::AccountState\l", style="filled", color=palegreen3];
    X8dbb979e53789c78_0 [label="Storage Live _5\l6 <- & 2\l5 <- Cast-PointerCoercion(Unsize) cp(6)\lStorage Live _7\l8 <- & 3\l7 <- Cast-PointerCoercion(Unsize) cp(8)\lCall\l"];
  }
  X8dbb979e53789c78_0 -> X1eb9e8a223d962a5_0 [label="mv(1),mv(5),mv(7),mv(4)"];
  subgraph cluster_226 {
    label="<pinocchio::program_error\n::ProgramError \nas \ncore::convert::From<pinoc\nchio::program_error::Prog\nramError>>::from";
    style="filled";
    color=lightgray;
    node_227 [label="LOCALS\l0 = pinocchio::program_error::ProgramError\l1 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X6ab29abaf30a0fd0_0 [label="0 <- Use(mv(1))\lReturn\l"];
  }
  subgraph cluster_228 {
    label="<pinocchio::program_error\n::ProgramError \nas \ncore::convert::Into<u64>>\n::into";
    style="filled";
    color=lightgray;
    node_229 [label="LOCALS\l0 = u64\l1 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X9b7d50e3fbab8ea3_0 -> X9b7d50e3fbab8ea3_1 [label="0"];
    X9b7d50e3fbab8ea3_0 [label="Call\l"];
    X9b7d50e3fbab8ea3_1 [label="Return\l"];
  }
  X9b7d50e3fbab8ea3_0 -> X7a4a77babfb83a53_0 [label="mv(1)"];
  subgraph cluster_230 {
    label="<core::slice::Iter<'_, \nu8> \nas \ncore::iter::IntoIterator>\n::into_iter";
    style="filled";
    color=lightgray;
    node_231 [label="LOCALS\l0 = core::slice::Iter<'_, u8>\l1 = core::slice::Iter<'_, u8>\l", style="filled", color=palegreen3];
    X9125598ebc1c3df8_0 [label="0 <- Use(mv(1))\lReturn\l"];
  }
  subgraph cluster_232 {
    label="<core::ops::Range<usize> \nas \ncore::iter::IntoIterator>\n::into_iter";
    style="filled";
    color=lightgray;
    node_233 [label="LOCALS\l0 = core::ops::Range<usize>\l1 = core::ops::Range<usize>\l", style="filled", color=palegreen3];
    Xe9e3ff72e55a5f27_0 [label="0 <- Use(mv(1))\lReturn\l"];
  }
  subgraph cluster_234 {
    label="<u8 \nas \ncore::array::equality::Sp\necArrayEq<u8, \n32>>::spec_eq";
    style="filled";
    color=lightgray;
    node_235 [label="LOCALS\l0 = bool\l1 = &[u8; 32]\l2 = &[u8; 32]\l3 = &[u8; 32]\l", style="filled", color=palegreen3];
    Xb51f0a1884dba91f_0 -> Xb51f0a1884dba91f_1 [label="0"];
    Xb51f0a1884dba91f_0 [label="Storage Live _3\l3 <- Cast-Transmute cp(2)\lCall\l"];
    Xb51f0a1884dba91f_1 [label="Storage Dead _3\lReturn\l"];
  }
  Xb51f0a1884dba91f_0 -> X43ad75e732d0e131_0 [label="mv(1),mv(3)"];
  subgraph cluster_236 {
    label="<u8 \nas \ncore::array::equality::Sp\necArrayEq<u8, \n32>>::spec_ne";
    style="filled";
    color=lightgray;
    node_237 [label="LOCALS\l0 = bool\l1 = &[u8; 32]\l2 = &[u8; 32]\l3 = bool\l4 = &[u8; 32]\l", style="filled", color=palegreen3];
    Xf0a84b1dfc729bb8_0 -> Xf0a84b1dfc729bb8_1 [label="3"];
    Xf0a84b1dfc729bb8_0 [label="Storage Live _3\lStorage Live _4\l4 <- Cast-Transmute cp(2)\lCall\l"];
    Xf0a84b1dfc729bb8_1 [label="Storage Dead _4\l0 <- Not(mv(3))\lStorage Dead _3\lReturn\l"];
  }
  Xf0a84b1dfc729bb8_0 -> X43ad75e732d0e131_0 [label="mv(1),mv(4)"];
  subgraph cluster_238 {
    label="<core::result::Result<(),\n \npinocchio::program_error:\n:ProgramError> \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_239 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l2 = &mut core::fmt::Formatter<'_>\l3 = isize\l4 = &()\l5 = &dyn core::fmt::Debug\l6 = &&()\l7 = &pinocchio::program_error::ProgramError\l8 = &dyn core::fmt::Debug\l9 = &&pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X43f71b6e2d20bf4b_0 -> X43f71b6e2d20bf4b_3 [label="0"];
    X43f71b6e2d20bf4b_0 -> X43f71b6e2d20bf4b_2 [label="1"];
    X43f71b6e2d20bf4b_0 -> X43f71b6e2d20bf4b_1 [label="other"];
    X43f71b6e2d20bf4b_0 [label="3 <- Discriminant((*1))\lSwitchInt mv(3)\l"];
    X43f71b6e2d20bf4b_1 [label="Unreachable\l"];
    X43f71b6e2d20bf4b_2 -> X43f71b6e2d20bf4b_5 [label="0"];
    X43f71b6e2d20bf4b_2 [label="Storage Live _7\l7 <- & ((*1) as variant 1).0\lStorage Live _8\l9 <- & 7\l8 <- Cast-PointerCoercion(Unsize) cp(9)\lCall\l"];
    X43f71b6e2d20bf4b_3 -> X43f71b6e2d20bf4b_4 [label="0"];
    X43f71b6e2d20bf4b_3 [label="Storage Live _4\l4 <- & ((*1) as variant 0).0\lStorage Live _5\l6 <- & 4\l5 <- Cast-PointerCoercion(Unsize) cp(6)\lCall\l"];
    X43f71b6e2d20bf4b_4 -> X43f71b6e2d20bf4b_6;
    X43f71b6e2d20bf4b_4 [label="Storage Dead _5\lStorage Dead _4\lGoto\l"];
    X43f71b6e2d20bf4b_5 -> X43f71b6e2d20bf4b_6;
    X43f71b6e2d20bf4b_5 [label="Storage Dead _8\lStorage Dead _7\lGoto\l"];
    X43f71b6e2d20bf4b_6 [label="Return\l"];
  }
  X43f71b6e2d20bf4b_2 -> X85724fedaf4a5444_0 [label="mv(2),const &str,mv(8)"];
  X43f71b6e2d20bf4b_3 -> X85724fedaf4a5444_0 [label="mv(2),const &str,mv(5)"];
  subgraph cluster_240 {
    label="<core::result::Result<(),\n \npinocchio::program_error:\n:ProgramError> \nas \ncore::cmp::PartialEq>::eq";
    style="filled";
    color=lightgray;
    node_241 [label="LOCALS\l0 = bool\l1 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l2 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l3 = isize\l4 = isize\l5 = bool\l6 = isize\l7 = isize\l8 = isize\l9 = &()\l10 = &()\l11 = &&()\l12 = &&()\l13 = &pinocchio::program_error::ProgramError\l14 = &pinocchio::program_error::ProgramError\l15 = &&pinocchio::program_error::ProgramError\l16 = &&pinocchio::program_error::ProgramError\l17 = bool\l18 = bool\l", style="filled", color=palegreen3];
    X9d133aa780502b33_0 -> X9d133aa780502b33_2 [label="0"];
    X9d133aa780502b33_0 -> X9d133aa780502b33_1 [label="other"];
    X9d133aa780502b33_0 [label="3 <- Discriminant((*1))\l4 <- Discriminant((*2))\lStorage Live _5\l5 <- Eq(cp(3), cp(4))\lSwitchInt mv(5)\l"];
    X9d133aa780502b33_1 -> X9d133aa780502b33_3 [label="0"];
    X9d133aa780502b33_1 -> X9d133aa780502b33_4 [label="1"];
    X9d133aa780502b33_1 -> X9d133aa780502b33_8 [label="other"];
    X9d133aa780502b33_1 [label="8 <- Discriminant((*1))\lSwitchInt mv(8)\l"];
    X9d133aa780502b33_2 -> X9d133aa780502b33_5;
    X9d133aa780502b33_2 [label="0 <- Use(const bool)\lGoto\l"];
    X9d133aa780502b33_3 -> X9d133aa780502b33_7 [label="0"];
    X9d133aa780502b33_3 [label="6 <- Discriminant((*2))\l18 <- Eq(cp(6), const ?_isize)\lIntr: Assume mv(18)\l9 <- & ((*1) as variant 0).0\l10 <- & ((*2) as variant 0).0\lStorage Live _11\l11 <- & 9\lStorage Live _12\l12 <- & 10\lCall\l"];
    X9d133aa780502b33_4 -> X9d133aa780502b33_6 [label="0"];
    X9d133aa780502b33_4 [label="7 <- Discriminant((*2))\l17 <- Eq(cp(7), const ?_isize)\lIntr: Assume mv(17)\l13 <- & ((*1) as variant 1).0\l14 <- & ((*2) as variant 1).0\lStorage Live _15\l15 <- & 13\lStorage Live _16\l16 <- & 14\lCall\l"];
    X9d133aa780502b33_5 [label="Storage Dead _5\lReturn\l"];
    X9d133aa780502b33_6 -> X9d133aa780502b33_5;
    X9d133aa780502b33_6 [label="Storage Dead _16\lStorage Dead _15\lGoto\l"];
    X9d133aa780502b33_7 -> X9d133aa780502b33_5;
    X9d133aa780502b33_7 [label="Storage Dead _12\lStorage Dead _11\lGoto\l"];
    X9d133aa780502b33_8 [label="Unreachable\l"];
  }
  X9d133aa780502b33_3 -> Xd7393c030c57f210_0 [label="cp(9),cp(10)"];
  X9d133aa780502b33_4 -> Xb4e4aaf53eb6efb_0 [label="cp(13),cp(14)"];
  subgraph cluster_242 {
    label="<pinocchio::account_info:\n:AccountInfo \nas \ncore::clone::Clone>::clon\ne";
    style="filled";
    color=lightgray;
    node_243 [label="LOCALS\l0 = pinocchio::account_info::AccountInfo\l1 = &pinocchio::account_info::AccountInfo\l2 = *mut pinocchio::account_info::Account\l3 = &*mut pinocchio::account_info::Account\l", style="filled", color=palegreen3];
    Xdf6433a5e6c64a8f_0 [label="3 <- & (*1).0\l2 <- Use(cp((*3)))\l0 <- Adt{0} (mv(2))\lReturn\l"];
  }
  subgraph cluster_244 {
    label="<pinocchio::program_error\n::ProgramError \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_245 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &pinocchio::program_error::ProgramError\l2 = &mut core::fmt::Formatter<'_>\l3 = isize\l4 = &u32\l5 = &str\l6 = &dyn core::fmt::Debug\l7 = &&u32\l8 = &str\l9 = &str\l10 = &str\l11 = &str\l12 = &str\l13 = &str\l14 = &str\l15 = &str\l16 = &str\l17 = &str\l18 = &str\l19 = &str\l20 = &str\l21 = &str\l22 = &str\l23 = &str\l24 = &str\l25 = &str\l26 = &str\l27 = &str\l28 = &str\l29 = &str\l30 = &str\l31 = &str\l32 = &str\l", style="filled", color=palegreen3];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_27 [label="0"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_26 [label="1"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_25 [label="2"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_24 [label="3"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_23 [label="4"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_22 [label="5"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_21 [label="6"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_20 [label="7"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_19 [label="8"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_18 [label="9"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_17 [label="10"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_16 [label="11"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_15 [label="12"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_14 [label="13"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_13 [label="14"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_12 [label="15"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_11 [label="16"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_10 [label="17"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_9 [label="18"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_8 [label="19"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_7 [label="20"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_6 [label="21"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_5 [label="22"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_4 [label="23"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_3 [label="24"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_2 [label="25"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_1 [label="other"];
    X4d96ea5120bb9c65_0 [label="3 <- Discriminant((*1))\lSwitchInt mv(3)\l"];
    X4d96ea5120bb9c65_1 [label="Unreachable\l"];
    X4d96ea5120bb9c65_2 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_2 [label="32 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_3 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_3 [label="31 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_4 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_4 [label="30 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_5 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_5 [label="29 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_6 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_6 [label="28 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_7 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_7 [label="27 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_8 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_8 [label="26 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_9 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_9 [label="25 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_10 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_10 [label="24 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_11 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_11 [label="23 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_12 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_12 [label="22 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_13 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_13 [label="21 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_14 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_14 [label="20 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_15 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_15 [label="19 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_16 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_16 [label="18 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_17 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_17 [label="17 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_18 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_18 [label="16 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_19 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_19 [label="15 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_20 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_20 [label="14 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_21 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_21 [label="13 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_22 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_22 [label="12 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_23 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_23 [label="11 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_24 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_24 [label="10 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_25 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_25 [label="9 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_26 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_26 [label="8 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_27 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_27 [label="4 <- & ((*1) as variant 0).0\l5 <- Use(const &str)\l7 <- & 4\l6 <- Cast-PointerCoercion(Unsize) cp(7)\lCall\l"];
    X4d96ea5120bb9c65_28 [label="Return\l"];
  }
  X4d96ea5120bb9c65_2 -> Xb93f0288e0006b54_0 [label="cp(2),mv(32)"];
  X4d96ea5120bb9c65_3 -> Xb93f0288e0006b54_0 [label="cp(2),mv(31)"];
  X4d96ea5120bb9c65_4 -> Xb93f0288e0006b54_0 [label="cp(2),mv(30)"];
  X4d96ea5120bb9c65_5 -> Xb93f0288e0006b54_0 [label="cp(2),mv(29)"];
  X4d96ea5120bb9c65_6 -> Xb93f0288e0006b54_0 [label="cp(2),mv(28)"];
  X4d96ea5120bb9c65_7 -> Xb93f0288e0006b54_0 [label="cp(2),mv(27)"];
  X4d96ea5120bb9c65_8 -> Xb93f0288e0006b54_0 [label="cp(2),mv(26)"];
  X4d96ea5120bb9c65_9 -> Xb93f0288e0006b54_0 [label="cp(2),mv(25)"];
  X4d96ea5120bb9c65_10 -> Xb93f0288e0006b54_0 [label="cp(2),mv(24)"];
  X4d96ea5120bb9c65_11 -> Xb93f0288e0006b54_0 [label="cp(2),mv(23)"];
  X4d96ea5120bb9c65_12 -> Xb93f0288e0006b54_0 [label="cp(2),mv(22)"];
  X4d96ea5120bb9c65_13 -> Xb93f0288e0006b54_0 [label="cp(2),mv(21)"];
  X4d96ea5120bb9c65_14 -> Xb93f0288e0006b54_0 [label="cp(2),mv(20)"];
  X4d96ea5120bb9c65_15 -> Xb93f0288e0006b54_0 [label="cp(2),mv(19)"];
  X4d96ea5120bb9c65_16 -> Xb93f0288e0006b54_0 [label="cp(2),mv(18)"];
  X4d96ea5120bb9c65_17 -> Xb93f0288e0006b54_0 [label="cp(2),mv(17)"];
  X4d96ea5120bb9c65_18 -> Xb93f0288e0006b54_0 [label="cp(2),mv(16)"];
  X4d96ea5120bb9c65_19 -> Xb93f0288e0006b54_0 [label="cp(2),mv(15)"];
  X4d96ea5120bb9c65_20 -> Xb93f0288e0006b54_0 [label="cp(2),mv(14)"];
  X4d96ea5120bb9c65_21 -> Xb93f0288e0006b54_0 [label="cp(2),mv(13)"];
  X4d96ea5120bb9c65_22 -> Xb93f0288e0006b54_0 [label="cp(2),mv(12)"];
  X4d96ea5120bb9c65_23 -> Xb93f0288e0006b54_0 [label="cp(2),mv(11)"];
  X4d96ea5120bb9c65_24 -> Xb93f0288e0006b54_0 [label="cp(2),mv(10)"];
  X4d96ea5120bb9c65_25 -> Xb93f0288e0006b54_0 [label="cp(2),mv(9)"];
  X4d96ea5120bb9c65_26 -> Xb93f0288e0006b54_0 [label="cp(2),mv(8)"];
  X4d96ea5120bb9c65_27 -> X85724fedaf4a5444_0 [label="cp(2),mv(5),mv(6)"];
  subgraph cluster_246 {
    label="<usize \nas \ncore::slice::SliceIndex<[\ncore::mem::MaybeUninit<pi\nnocchio::account_info::Ac\ncountInfo>]>>::get_unchec\nked";
    style="filled";
    color=lightgray;
    node_247 [label="LOCALS\l0 = *const core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l1 = usize\l2 = *const [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l3 = bool\l4 = ()\l5 = usize\l6 = bool\l7 = usize\l8 = *const core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l", style="filled", color=palegreen3];
    Xf7c0e3c61151eb20_0 -> Xf7c0e3c61151eb20_3 [label="0"];
    Xf7c0e3c61151eb20_0 -> Xf7c0e3c61151eb20_1 [label="other"];
    Xf7c0e3c61151eb20_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    Xf7c0e3c61151eb20_1 -> Xf7c0e3c61151eb20_2 [label="4"];
    Xf7c0e3c61151eb20_1 [label="Storage Live _5\l5 <- PtrMetadata(cp(2))\lCall\l"];
    Xf7c0e3c61151eb20_2 -> Xf7c0e3c61151eb20_3;
    Xf7c0e3c61151eb20_2 [label="Storage Dead _5\lGoto\l"];
    Xf7c0e3c61151eb20_3 [label="Storage Dead _3\lStorage Live _6\lStorage Live _7\l7 <- PtrMetadata(cp(2))\l6 <- Lt(cp(1), mv(7))\lStorage Dead _7\lIntr: Assume mv(6)\lStorage Dead _6\lStorage Live _8\l8 <- Cast-PtrToPtr cp(2)\l0 <- Offset(cp(8), cp(1))\lStorage Dead _8\lReturn\l"];
  }
  Xf7c0e3c61151eb20_1 -> Xfa2081497ee34a_0 [label="cp(1),mv(5)"];
  subgraph cluster_248 {
    label="<usize \nas \ncore::slice::SliceIndex<[\nu8]>>::get_unchecked";
    style="filled";
    color=lightgray;
    node_249 [label="LOCALS\l0 = *const u8\l1 = usize\l2 = *const [u8]\l3 = bool\l4 = ()\l5 = usize\l6 = bool\l7 = usize\l8 = *const u8\l", style="filled", color=palegreen3];
    X7bd4403f8d22bbb7_0 -> X7bd4403f8d22bbb7_3 [label="0"];
    X7bd4403f8d22bbb7_0 -> X7bd4403f8d22bbb7_1 [label="other"];
    X7bd4403f8d22bbb7_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    X7bd4403f8d22bbb7_1 -> X7bd4403f8d22bbb7_2 [label="4"];
    X7bd4403f8d22bbb7_1 [label="Storage Live _5\l5 <- PtrMetadata(cp(2))\lCall\l"];
    X7bd4403f8d22bbb7_2 -> X7bd4403f8d22bbb7_3;
    X7bd4403f8d22bbb7_2 [label="Storage Dead _5\lGoto\l"];
    X7bd4403f8d22bbb7_3 [label="Storage Dead _3\lStorage Live _6\lStorage Live _7\l7 <- PtrMetadata(cp(2))\l6 <- Lt(cp(1), mv(7))\lStorage Dead _7\lIntr: Assume mv(6)\lStorage Dead _6\lStorage Live _8\l8 <- Cast-PtrToPtr cp(2)\l0 <- Offset(cp(8), cp(1))\lStorage Dead _8\lReturn\l"];
  }
  X7bd4403f8d22bbb7_1 -> Xfa2081497ee34a_0 [label="cp(1),mv(5)"];
  subgraph cluster_250 {
    label="<usize \nas \ncore::slice::SliceIndex<[\nT]>>::get_unchecked::prec\nondition_check";
    style="filled";
    color=lightgray;
    node_251 [label="LOCALS\l0 = ()\l1 = usize\l2 = usize\l3 = bool\l4 = !\l", style="filled", color=palegreen3];
    Xfa2081497ee34a_0 -> Xfa2081497ee34a_2 [label="0"];
    Xfa2081497ee34a_0 -> Xfa2081497ee34a_1 [label="other"];
    Xfa2081497ee34a_0 [label="Storage Live _3\l3 <- Lt(cp(1), cp(2))\lSwitchInt mv(3)\l"];
    Xfa2081497ee34a_1 [label="Storage Dead _3\lReturn\l"];
    Xfa2081497ee34a_2 [label="Call\l"];
  }
  Xfa2081497ee34a_2 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_252 {
    label="<core::result::Result<&mu\nt \nspl_token_interface::stat\ne::account::Account, \npinocchio::program_error:\n:ProgramError> \nas \ncore::ops::Try>::branch";
    style="filled";
    color=lightgray;
    node_253 [label="LOCALS\l0 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, &mut spl_token_interface::state::account::Account>\l1 = core::result::Result<&mut spl_token_interface::state::account::Account, pinocchio::program_error::ProgramError>\l2 = isize\l3 = &mut spl_token_interface::state::account::Account\l4 = pinocchio::program_error::ProgramError\l5 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    X4bab5789df6a8cfa_0 -> X4bab5789df6a8cfa_3 [label="0"];
    X4bab5789df6a8cfa_0 -> X4bab5789df6a8cfa_2 [label="1"];
    X4bab5789df6a8cfa_0 -> X4bab5789df6a8cfa_1 [label="other"];
    X4bab5789df6a8cfa_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X4bab5789df6a8cfa_1 [label="Unreachable\l"];
    X4bab5789df6a8cfa_2 -> X4bab5789df6a8cfa_4;
    X4bab5789df6a8cfa_2 [label="4 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l5 <- Adt{1} (cp(4))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    X4bab5789df6a8cfa_3 -> X4bab5789df6a8cfa_4;
    X4bab5789df6a8cfa_3 [label="3 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(3))\lGoto\l"];
    X4bab5789df6a8cfa_4 [label="Return\l"];
  }
  subgraph cluster_254 {
    label="<core::result::Result<boo\nl, \npinocchio::program_error:\n:ProgramError> \nas \ncore::ops::Try>::branch";
    style="filled";
    color=lightgray;
    node_255 [label="LOCALS\l0 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, bool>\l1 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l2 = isize\l3 = bool\l4 = pinocchio::program_error::ProgramError\l5 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    X94faba497d3a8d24_0 -> X94faba497d3a8d24_3 [label="0"];
    X94faba497d3a8d24_0 -> X94faba497d3a8d24_2 [label="1"];
    X94faba497d3a8d24_0 -> X94faba497d3a8d24_1 [label="other"];
    X94faba497d3a8d24_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X94faba497d3a8d24_1 [label="Unreachable\l"];
    X94faba497d3a8d24_2 -> X94faba497d3a8d24_4;
    X94faba497d3a8d24_2 [label="4 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l5 <- Adt{1} (cp(4))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    X94faba497d3a8d24_3 -> X94faba497d3a8d24_4;
    X94faba497d3a8d24_3 [label="3 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(3))\lGoto\l"];
    X94faba497d3a8d24_4 [label="Return\l"];
  }
  subgraph cluster_256 {
    label="<core::result::Result<&pi\nnocchio::account_info::Ac\ncountInfo, \npinocchio::program_error:\n:ProgramError> \nas \ncore::ops::Try>::branch";
    style="filled";
    color=lightgray;
    node_257 [label="LOCALS\l0 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, &pinocchio::account_info::AccountInfo>\l1 = core::result::Result<&pinocchio::account_info::AccountInfo, pinocchio::program_error::ProgramError>\l2 = isize\l3 = &pinocchio::account_info::AccountInfo\l4 = pinocchio::program_error::ProgramError\l5 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    X45a9509fc036d935_0 -> X45a9509fc036d935_3 [label="0"];
    X45a9509fc036d935_0 -> X45a9509fc036d935_2 [label="1"];
    X45a9509fc036d935_0 -> X45a9509fc036d935_1 [label="other"];
    X45a9509fc036d935_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X45a9509fc036d935_1 [label="Unreachable\l"];
    X45a9509fc036d935_2 -> X45a9509fc036d935_4;
    X45a9509fc036d935_2 [label="4 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l5 <- Adt{1} (cp(4))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    X45a9509fc036d935_3 -> X45a9509fc036d935_4;
    X45a9509fc036d935_3 [label="3 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(3))\lGoto\l"];
    X45a9509fc036d935_4 [label="Return\l"];
  }
  subgraph cluster_258 {
    label="<core::result::Result<pin\nocchio::sysvars::rent::Re\nnt, \npinocchio::program_error:\n:ProgramError> \nas \ncore::ops::Try>::branch";
    style="filled";
    color=lightgray;
    node_259 [label="LOCALS\l0 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, pinocchio::sysvars::rent::Rent>\l1 = core::result::Result<pinocchio::sysvars::rent::Rent, pinocchio::program_error::ProgramError>\l2 = isize\l3 = pinocchio::sysvars::rent::Rent\l4 = pinocchio::program_error::ProgramError\l5 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    Xf4d730ffcb43b968_0 -> Xf4d730ffcb43b968_3 [label="0"];
    Xf4d730ffcb43b968_0 -> Xf4d730ffcb43b968_2 [label="1"];
    Xf4d730ffcb43b968_0 -> Xf4d730ffcb43b968_1 [label="other"];
    Xf4d730ffcb43b968_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    Xf4d730ffcb43b968_1 [label="Unreachable\l"];
    Xf4d730ffcb43b968_2 -> Xf4d730ffcb43b968_4;
    Xf4d730ffcb43b968_2 [label="4 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l5 <- Adt{1} (cp(4))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    Xf4d730ffcb43b968_3 -> Xf4d730ffcb43b968_4;
    Xf4d730ffcb43b968_3 [label="3 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(3))\lGoto\l"];
    Xf4d730ffcb43b968_4 [label="Return\l"];
  }
  subgraph cluster_260 {
    label="<core::result::Result<&pi\nnocchio::sysvars::rent::R\nent, \npinocchio::program_error:\n:ProgramError> \nas \ncore::ops::Try>::branch";
    style="filled";
    color=lightgray;
    node_261 [label="LOCALS\l0 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, &pinocchio::sysvars::rent::Rent>\l1 = core::result::Result<&pinocchio::sysvars::rent::Rent, pinocchio::program_error::ProgramError>\l2 = isize\l3 = &pinocchio::sysvars::rent::Rent\l4 = pinocchio::program_error::ProgramError\l5 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    X2b904375dbbb0af7_0 -> X2b904375dbbb0af7_3 [label="0"];
    X2b904375dbbb0af7_0 -> X2b904375dbbb0af7_2 [label="1"];
    X2b904375dbbb0af7_0 -> X2b904375dbbb0af7_1 [label="other"];
    X2b904375dbbb0af7_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X2b904375dbbb0af7_1 [label="Unreachable\l"];
    X2b904375dbbb0af7_2 -> X2b904375dbbb0af7_4;
    X2b904375dbbb0af7_2 [label="4 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l5 <- Adt{1} (cp(4))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    X2b904375dbbb0af7_3 -> X2b904375dbbb0af7_4;
    X2b904375dbbb0af7_3 [label="3 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(3))\lGoto\l"];
    X2b904375dbbb0af7_4 [label="Return\l"];
  }
  subgraph cluster_262 {
    label="<core::result::Result<&sp\nl_token_interface::state:\n:mint::Mint, \nspl_token_interface::erro\nr::TokenError> \nas \ncore::ops::Try>::branch";
    style="filled";
    color=lightgray;
    node_263 [label="LOCALS\l0 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, spl_token_interface::error::TokenError>, &spl_token_interface::state::mint::Mint>\l1 = core::result::Result<&spl_token_interface::state::mint::Mint, spl_token_interface::error::TokenError>\l2 = isize\l3 = &spl_token_interface::state::mint::Mint\l4 = spl_token_interface::error::TokenError\l5 = core::result::Result<core::convert::Infallible, spl_token_interface::error::TokenError>\l", style="filled", color=palegreen3];
    X7d4b65c566a6f4e_0 -> X7d4b65c566a6f4e_3 [label="0"];
    X7d4b65c566a6f4e_0 -> X7d4b65c566a6f4e_2 [label="1"];
    X7d4b65c566a6f4e_0 -> X7d4b65c566a6f4e_1 [label="other"];
    X7d4b65c566a6f4e_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X7d4b65c566a6f4e_1 [label="Unreachable\l"];
    X7d4b65c566a6f4e_2 -> X7d4b65c566a6f4e_4;
    X7d4b65c566a6f4e_2 [label="4 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l5 <- Adt{1} (cp(4))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    X7d4b65c566a6f4e_3 -> X7d4b65c566a6f4e_4;
    X7d4b65c566a6f4e_3 [label="3 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(3))\lGoto\l"];
    X7d4b65c566a6f4e_4 [label="Return\l"];
  }
  subgraph cluster_264 {
    label="<pinocchio::program_error\n::ProgramError \nas \ncore::cmp::PartialEq>::eq";
    style="filled";
    color=lightgray;
    node_265 [label="LOCALS\l0 = bool\l1 = &pinocchio::program_error::ProgramError\l2 = &pinocchio::program_error::ProgramError\l3 = isize\l4 = isize\l5 = bool\l6 = (&pinocchio::program_error::ProgramError, &pinocchio::program_error::ProgramError)\l7 = isize\l8 = isize\l9 = &u32\l10 = &u32\l11 = &&u32\l12 = &&u32\l13 = &pinocchio::program_error::ProgramError\l14 = &pinocchio::program_error::ProgramError\l15 = &pinocchio::program_error::ProgramError\l16 = &pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    Xb4e4aaf53eb6efb_0 -> Xb4e4aaf53eb6efb_2 [label="0"];
    Xb4e4aaf53eb6efb_0 -> Xb4e4aaf53eb6efb_1 [label="other"];
    Xb4e4aaf53eb6efb_0 [label="3 <- Discriminant((*1))\l4 <- Discriminant((*2))\l5 <- Eq(cp(3), cp(4))\lSwitchInt mv(5)\l"];
    Xb4e4aaf53eb6efb_1 -> Xb4e4aaf53eb6efb_4 [label="0"];
    Xb4e4aaf53eb6efb_1 -> Xb4e4aaf53eb6efb_3 [label="other"];
    Xb4e4aaf53eb6efb_1 [label="6 <- Tuple (cp(1), cp(2))\l13 <- CopyForDeref(6.0)\l8 <- Discriminant((*13))\lSwitchInt mv(8)\l"];
    Xb4e4aaf53eb6efb_2 -> Xb4e4aaf53eb6efb_6;
    Xb4e4aaf53eb6efb_2 [label="0 <- Use(const bool)\lGoto\l"];
    Xb4e4aaf53eb6efb_3 -> Xb4e4aaf53eb6efb_6;
    Xb4e4aaf53eb6efb_3 [label="0 <- Use(const bool)\lGoto\l"];
    Xb4e4aaf53eb6efb_4 -> Xb4e4aaf53eb6efb_5 [label="0"];
    Xb4e4aaf53eb6efb_4 -> Xb4e4aaf53eb6efb_3 [label="other"];
    Xb4e4aaf53eb6efb_4 [label="14 <- CopyForDeref(6.1)\l7 <- Discriminant((*14))\lSwitchInt mv(7)\l"];
    Xb4e4aaf53eb6efb_5 -> Xb4e4aaf53eb6efb_6 [label="0"];
    Xb4e4aaf53eb6efb_5 [label="15 <- CopyForDeref(6.0)\l9 <- & ((*15) as variant 0).0\l16 <- CopyForDeref(6.1)\l10 <- & ((*16) as variant 0).0\l11 <- & 9\l12 <- & 10\lCall\l"];
    Xb4e4aaf53eb6efb_6 [label="Return\l"];
  }
  Xb4e4aaf53eb6efb_5 -> X1db5e3317e89911b_0 [label="mv(11),mv(12)"];
  subgraph cluster_266 {
    label="<core::ops::Range<usize> \nas \ncore::iter::range::RangeI\nteratorImpl>::spec_next";
    style="filled";
    color=lightgray;
    node_267 [label="LOCALS\l0 = core::option::Option<usize>\l1 = &mut core::ops::Range<usize>\l2 = bool\l3 = &usize\l4 = &usize\l5 = usize\l6 = usize\l", style="filled", color=palegreen3];
    X76d9451f9bf287e8_0 -> X76d9451f9bf287e8_1 [label="2"];
    X76d9451f9bf287e8_0 [label="Storage Live _2\lStorage Live _3\l3 <- & (*1).0\lStorage Live _4\l4 <- & (*1).1\lCall\l"];
    X76d9451f9bf287e8_1 -> X76d9451f9bf287e8_4 [label="0"];
    X76d9451f9bf287e8_1 -> X76d9451f9bf287e8_2 [label="other"];
    X76d9451f9bf287e8_1 [label="SwitchInt mv(2)\l"];
    X76d9451f9bf287e8_2 -> X76d9451f9bf287e8_3 [label="6"];
    X76d9451f9bf287e8_2 [label="Storage Dead _4\lStorage Dead _3\l5 <- Use(cp((*1).0))\lStorage Live _6\lCall\l"];
    X76d9451f9bf287e8_3 -> X76d9451f9bf287e8_5;
    X76d9451f9bf287e8_3 [label="(*1).0 <- Use(mv(6))\lStorage Dead _6\l0 <- Adt{1} (cp(5))\lGoto\l"];
    X76d9451f9bf287e8_4 -> X76d9451f9bf287e8_5;
    X76d9451f9bf287e8_4 [label="Storage Dead _4\lStorage Dead _3\l0 <- Adt{0} ()\lGoto\l"];
    X76d9451f9bf287e8_5 [label="Storage Dead _2\lReturn\l"];
  }
  X76d9451f9bf287e8_0 -> Xb4d458fe7af2393d_0 [label="mv(3),mv(4)"];
  X76d9451f9bf287e8_2 -> Xf98c0f07694c6176_0 [label="cp(5),const ?_usize"];
  subgraph cluster_268 {
    label="<pinocchio::program_error\n::ProgramError \nas \npinocchio::program_error:\n:ToStr>::to_str::<spl_tok\nen_interface::error::Toke\nnError>";
    style="filled";
    color=lightgray;
    node_269 [label="LOCALS\l0 = &str\l1 = &pinocchio::program_error::ProgramError\l2 = isize\l3 = &u32\l4 = core::result::Result<spl_token_interface::error::TokenError, pinocchio::program_error::ProgramError>\l5 = u32\l6 = isize\l7 = spl_token_interface::error::TokenError\l8 = &spl_token_interface::error::TokenError\l9 = bool\l10 = isize\l11 = isize\l", style="filled", color=palegreen3];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_27 [label="0"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_26 [label="1"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_25 [label="2"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_24 [label="3"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_23 [label="4"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_22 [label="5"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_21 [label="6"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_20 [label="7"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_19 [label="8"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_18 [label="9"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_17 [label="10"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_16 [label="11"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_15 [label="12"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_14 [label="13"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_13 [label="14"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_12 [label="15"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_11 [label="16"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_10 [label="17"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_9 [label="18"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_8 [label="19"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_7 [label="20"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_6 [label="21"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_5 [label="22"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_4 [label="23"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_3 [label="24"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_2 [label="25"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_1 [label="other"];
    X5de8bd844887fb1f_0 [label="9 <- Use(const bool)\l2 <- Discriminant((*1))\lSwitchInt mv(2)\l"];
    X5de8bd844887fb1f_1 [label="Unreachable\l"];
    X5de8bd844887fb1f_2 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_2 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_3 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_3 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_4 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_4 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_5 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_5 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_6 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_6 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_7 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_7 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_8 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_8 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_9 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_9 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_10 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_10 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_11 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_11 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_12 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_12 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_13 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_13 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_14 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_14 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_15 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_15 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_16 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_16 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_17 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_17 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_18 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_18 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_19 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_19 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_20 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_20 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_21 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_21 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_22 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_22 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_23 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_23 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_24 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_24 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_25 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_25 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_26 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_26 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_27 -> X5de8bd844887fb1f_28 [label="4"];
    X5de8bd844887fb1f_27 [label="3 <- & ((*1) as variant 0).0\l5 <- Use(cp((*3)))\l9 <- Use(const bool)\lCall\l"];
    X5de8bd844887fb1f_28 -> X5de8bd844887fb1f_29 [label="0"];
    X5de8bd844887fb1f_28 -> X5de8bd844887fb1f_31 [label="1"];
    X5de8bd844887fb1f_28 -> X5de8bd844887fb1f_1 [label="other"];
    X5de8bd844887fb1f_28 [label="6 <- Discriminant(4)\lSwitchInt mv(6)\l"];
    X5de8bd844887fb1f_29 -> X5de8bd844887fb1f_33 [label="Cleanup"];
    X5de8bd844887fb1f_29 -> X5de8bd844887fb1f_30 [label="0"];
    X5de8bd844887fb1f_29 [label="9 <- Use(const bool)\l7 <- Use(mv((4 as variant 0).0))\l8 <- & 7\lCall\l"];
    X5de8bd844887fb1f_30 -> X5de8bd844887fb1f_41 [label="Cleanup"];
    X5de8bd844887fb1f_30 -> X5de8bd844887fb1f_39;
    X5de8bd844887fb1f_30 [label="Drop 7\l"];
    X5de8bd844887fb1f_31 -> X5de8bd844887fb1f_39;
    X5de8bd844887fb1f_31 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_32 [label="Return\l"];
    X5de8bd844887fb1f_33 -> X5de8bd844887fb1f_41;
    X5de8bd844887fb1f_33 [label="Drop 7\l"];
    X5de8bd844887fb1f_34 [label="Resume\l"];
    X5de8bd844887fb1f_35 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_35 [label="9 <- Use(const bool)\lGoto\l"];
    X5de8bd844887fb1f_36 -> X5de8bd844887fb1f_35 [label="0"];
    X5de8bd844887fb1f_36 -> X5de8bd844887fb1f_37 [label="other"];
    X5de8bd844887fb1f_36 [label="SwitchInt cp(9)\l"];
    X5de8bd844887fb1f_37 -> X5de8bd844887fb1f_35;
    X5de8bd844887fb1f_37 [label="Drop (4 as variant 0).0\l"];
    X5de8bd844887fb1f_38 -> X5de8bd844887fb1f_35;
    X5de8bd844887fb1f_38 [label="Drop 4\l"];
    X5de8bd844887fb1f_39 -> X5de8bd844887fb1f_36 [label="0"];
    X5de8bd844887fb1f_39 -> X5de8bd844887fb1f_38 [label="1"];
    X5de8bd844887fb1f_39 -> X5de8bd844887fb1f_1 [label="other"];
    X5de8bd844887fb1f_39 [label="10 <- Discriminant(4)\lSwitchInt mv(10)\l"];
    X5de8bd844887fb1f_40 -> X5de8bd844887fb1f_34;
    X5de8bd844887fb1f_40 [label="Drop 4\l"];
    X5de8bd844887fb1f_41 -> X5de8bd844887fb1f_34 [label="0"];
    X5de8bd844887fb1f_41 -> X5de8bd844887fb1f_40 [label="other"];
    X5de8bd844887fb1f_41 [label="11 <- Discriminant(4)\lSwitchInt mv(11)\l"];
  }
  X5de8bd844887fb1f_27 -> Xd6b56047a80c2f44_0 [label="mv(5)"];
  X5de8bd844887fb1f_29 -> Xd6b5cc134d800e1_0 [label="mv(8)"];
  subgraph cluster_270 {
    label="<spl_token_interface::err\nor::TokenError \nas \npinocchio::program_error:\n:ToStr>::to_str::<spl_tok\nen_interface::error::Toke\nnError>";
    style="filled";
    color=lightgray;
    node_271 [label="LOCALS\l0 = &str\l1 = &spl_token_interface::error::TokenError\l2 = isize\l", style="filled", color=palegreen3];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_21 [label="0"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_20 [label="1"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_19 [label="2"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_18 [label="3"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_17 [label="4"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_16 [label="5"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_15 [label="6"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_14 [label="7"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_13 [label="8"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_12 [label="9"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_11 [label="10"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_10 [label="11"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_9 [label="12"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_8 [label="13"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_7 [label="14"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_6 [label="15"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_5 [label="16"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_4 [label="17"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_3 [label="18"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_2 [label="19"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_1 [label="other"];
    Xd6b5cc134d800e1_0 [label="2 <- Discriminant((*1))\lSwitchInt mv(2)\l"];
    Xd6b5cc134d800e1_1 [label="Unreachable\l"];
    Xd6b5cc134d800e1_2 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_2 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_3 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_3 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_4 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_4 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_5 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_5 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_6 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_6 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_7 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_7 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_8 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_8 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_9 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_9 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_10 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_10 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_11 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_11 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_12 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_12 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_13 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_13 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_14 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_14 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_15 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_15 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_16 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_16 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_17 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_17 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_18 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_18 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_19 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_19 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_20 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_20 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_21 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_21 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_22 [label="Return\l"];
  }
  subgraph cluster_272 {
    label="<spl_token_interface::sta\nte::account_state::Accoun\ntState \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_273 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &spl_token_interface::state::account_state::AccountState\l2 = &mut core::fmt::Formatter<'_>\l3 = &str\l4 = u8\l", style="filled", color=palegreen3];
    X8a50bfb91d05238f_0 -> X8a50bfb91d05238f_4 [label="0"];
    X8a50bfb91d05238f_0 -> X8a50bfb91d05238f_3 [label="1"];
    X8a50bfb91d05238f_0 -> X8a50bfb91d05238f_2 [label="2"];
    X8a50bfb91d05238f_0 -> X8a50bfb91d05238f_1 [label="other"];
    X8a50bfb91d05238f_0 [label="4 <- Discriminant((*1))\lSwitchInt mv(4)\l"];
    X8a50bfb91d05238f_1 [label="Unreachable\l"];
    X8a50bfb91d05238f_2 -> X8a50bfb91d05238f_5;
    X8a50bfb91d05238f_2 [label="3 <- Use(const &str)\lGoto\l"];
    X8a50bfb91d05238f_3 -> X8a50bfb91d05238f_5;
    X8a50bfb91d05238f_3 [label="3 <- Use(const &str)\lGoto\l"];
    X8a50bfb91d05238f_4 -> X8a50bfb91d05238f_5;
    X8a50bfb91d05238f_4 [label="3 <- Use(const &str)\lGoto\l"];
    X8a50bfb91d05238f_5 -> X8a50bfb91d05238f_6 [label="0"];
    X8a50bfb91d05238f_5 [label="Call\l"];
    X8a50bfb91d05238f_6 [label="Return\l"];
  }
  X8a50bfb91d05238f_5 -> Xb93f0288e0006b54_0 [label="cp(2),mv(3)"];
  subgraph cluster_274 {
    label="<spl_token_interface::sta\nte::account_state::Accoun\ntState \nas \ncore::cmp::PartialEq>::eq";
    style="filled";
    color=lightgray;
    node_275 [label="LOCALS\l0 = bool\l1 = &spl_token_interface::state::account_state::AccountState\l2 = &spl_token_interface::state::account_state::AccountState\l3 = u8\l4 = u8\l", style="filled", color=palegreen3];
    X92c90d3df5004379_0 [label="3 <- Discriminant((*1))\l4 <- Discriminant((*2))\l0 <- Eq(cp(3), cp(4))\lReturn\l"];
  }
  subgraph cluster_276 {
    label="pinocchio::entrypoint::de\nserialize::<'_, \n128>";
    style="filled";
    color=lightgray;
    node_277 [label="LOCALS\l0 = (&[u8; 32], usize, &[u8])\l1 = *mut u8\l2 = &mut [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l3 = usize\l4 = usize\l5 = u64\l6 = *const u64\l7 = *mut u8\l8 = usize\l9 = usize\l10 = (usize, bool)\l11 = usize\l12 = bool\l13 = usize\l14 = core::ops::Range<usize>\l15 = core::ops::Range<usize>\l16 = core::ops::Range<usize>\l17 = core::option::Option<usize>\l18 = &mut core::ops::Range<usize>\l19 = isize\l20 = usize\l21 = *mut pinocchio::account_info::Account\l22 = *mut u8\l23 = usize\l24 = bool\l25 = u8\l26 = usize\l27 = (usize, bool)\l28 = usize\l29 = u64\l30 = (usize, bool)\l31 = (usize, bool)\l32 = usize\l33 = *const u8\l34 = usize\l35 = (usize, bool)\l36 = usize\l37 = (usize, bool)\l38 = &mut pinocchio::account_info::AccountInfo\l39 = &mut core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l40 = usize\l41 = bool\l42 = pinocchio::account_info::AccountInfo\l43 = usize\l44 = (usize, bool)\l45 = &mut pinocchio::account_info::AccountInfo\l46 = &mut core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l47 = usize\l48 = bool\l49 = pinocchio::account_info::AccountInfo\l50 = &pinocchio::account_info::AccountInfo\l51 = &core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l52 = &[core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l53 = usize\l54 = u8\l55 = core::ops::Range<usize>\l56 = core::ops::Range<usize>\l57 = core::ops::Range<usize>\l58 = core::option::Option<usize>\l59 = &mut core::ops::Range<usize>\l60 = isize\l61 = *mut pinocchio::account_info::Account\l62 = *mut u8\l63 = usize\l64 = bool\l65 = u8\l66 = usize\l67 = (usize, bool)\l68 = usize\l69 = u64\l70 = (usize, bool)\l71 = (usize, bool)\l72 = usize\l73 = *const u8\l74 = usize\l75 = (usize, bool)\l76 = usize\l77 = (usize, bool)\l78 = usize\l79 = (usize, bool)\l80 = usize\l81 = u64\l82 = *const u64\l83 = *mut u8\l84 = usize\l85 = usize\l86 = (usize, bool)\l87 = &[u8]\l88 = *const u8\l89 = *mut u8\l90 = usize\l91 = (usize, bool)\l92 = &[u8; 32]\l93 = *const [u8; 32]\l94 = *mut u8\l95 = usize\l96 = usize\l", style="filled", color=palegreen3];
    Xed53fe106f15d44b_0 -> Xed53fe106f15d44b_1 [label="7"];
    Xed53fe106f15d44b_0 [label="3 <- Use(const ?_usize)\l8 <- Use(cp(3))\lCall\l"];
    Xed53fe106f15d44b_1 -> Xed53fe106f15d44b_2 [label="9"];
    Xed53fe106f15d44b_1 [label="6 <- Cast-PtrToPtr mv(7)\l5 <- Use(cp((*6)))\l4 <- Cast-IntToInt mv(5)\lCall\l"];
    Xed53fe106f15d44b_2 -> Xed53fe106f15d44b_3;
    Xed53fe106f15d44b_2 [label="10 <- chkd-Add(cp(3), cp(9))\lAssert mv(10.1) == false\l"];
    Xed53fe106f15d44b_3 -> Xed53fe106f15d44b_48 [label="0"];
    Xed53fe106f15d44b_3 -> Xed53fe106f15d44b_4 [label="other"];
    Xed53fe106f15d44b_3 [label="3 <- Use(mv(10.0))\l12 <- Gt(cp(4), const ?_usize)\lSwitchInt mv(12)\l"];
    Xed53fe106f15d44b_4 -> Xed53fe106f15d44b_5 [label="13"];
    Xed53fe106f15d44b_4 [label="Call\l"];
    Xed53fe106f15d44b_5 -> Xed53fe106f15d44b_6 [label="14"];
    Xed53fe106f15d44b_5 [label="15 <- Adt{0} (const ?_usize, cp(13))\lCall\l"];
    Xed53fe106f15d44b_6 -> Xed53fe106f15d44b_7;
    Xed53fe106f15d44b_6 [label="16 <- Use(mv(14))\lGoto\l"];
    Xed53fe106f15d44b_7 -> Xed53fe106f15d44b_8 [label="17"];
    Xed53fe106f15d44b_7 [label="18 <- &mut 16\lCall\l"];
    Xed53fe106f15d44b_8 -> Xed53fe106f15d44b_11 [label="0"];
    Xed53fe106f15d44b_8 -> Xed53fe106f15d44b_10 [label="1"];
    Xed53fe106f15d44b_8 -> Xed53fe106f15d44b_9 [label="other"];
    Xed53fe106f15d44b_8 [label="19 <- Discriminant(17)\lSwitchInt mv(19)\l"];
    Xed53fe106f15d44b_9 [label="Unreachable\l"];
    Xed53fe106f15d44b_10 -> Xed53fe106f15d44b_12 [label="22"];
    Xed53fe106f15d44b_10 [label="20 <- Use(cp((17 as variant 1).0))\l23 <- Use(cp(3))\lCall\l"];
    Xed53fe106f15d44b_11 -> Xed53fe106f15d44b_30 [label="55"];
    Xed53fe106f15d44b_11 [label="56 <- Adt{0} (cp(13), cp(4))\lCall\l"];
    Xed53fe106f15d44b_12 -> Xed53fe106f15d44b_23 [label="0"];
    Xed53fe106f15d44b_12 -> Xed53fe106f15d44b_13 [label="other"];
    Xed53fe106f15d44b_12 [label="21 <- Cast-PtrToPtr mv(22)\l25 <- Use(cp((*21).0))\l24 <- Eq(mv(25), const ?_u8)\lSwitchInt mv(24)\l"];
    Xed53fe106f15d44b_13 -> Xed53fe106f15d44b_14 [label="26"];
    Xed53fe106f15d44b_13 [label="(*21).0 <- Use(const ?_u8)\lCall\l"];
    Xed53fe106f15d44b_14 -> Xed53fe106f15d44b_15;
    Xed53fe106f15d44b_14 [label="27 <- chkd-Add(cp(3), cp(26))\lAssert mv(27.1) == false\l"];
    Xed53fe106f15d44b_15 -> Xed53fe106f15d44b_16;
    Xed53fe106f15d44b_15 [label="3 <- Use(mv(27.0))\l29 <- Use(cp((*21).8))\l28 <- Cast-IntToInt mv(29)\l30 <- chkd-Add(cp(3), cp(28))\lAssert mv(30.1) == false\l"];
    Xed53fe106f15d44b_16 -> Xed53fe106f15d44b_17;
    Xed53fe106f15d44b_16 [label="3 <- Use(mv(30.0))\l31 <- chkd-Add(cp(3), const ?_usize)\lAssert mv(31.1) == false\l"];
    Xed53fe106f15d44b_17 -> Xed53fe106f15d44b_18 [label="32"];
    Xed53fe106f15d44b_17 [label="3 <- Use(mv(31.0))\l34 <- Use(cp(3))\l33 <- Cast-PointerWithExposedProvenance mv(34)\lCall\l"];
    Xed53fe106f15d44b_18 -> Xed53fe106f15d44b_19;
    Xed53fe106f15d44b_18 [label="35 <- chkd-Add(cp(3), cp(32))\lAssert mv(35.1) == false\l"];
    Xed53fe106f15d44b_19 -> Xed53fe106f15d44b_20 [label="36"];
    Xed53fe106f15d44b_19 [label="3 <- Use(mv(35.0))\lCall\l"];
    Xed53fe106f15d44b_20 -> Xed53fe106f15d44b_21;
    Xed53fe106f15d44b_20 [label="37 <- chkd-Add(cp(3), cp(36))\lAssert mv(37.1) == false\l"];
    Xed53fe106f15d44b_21 -> Xed53fe106f15d44b_22;
    Xed53fe106f15d44b_21 [label="3 <- Use(mv(37.0))\l40 <- Len((*2))\l41 <- Lt(cp(20), cp(40))\lAssert mv(41) == true\l"];
    Xed53fe106f15d44b_22 -> Xed53fe106f15d44b_7 [label="38"];
    Xed53fe106f15d44b_22 [label="39 <- &mut (*2)[_20]\l42 <- Adt{0} (cp(21))\lCall\l"];
    Xed53fe106f15d44b_23 -> Xed53fe106f15d44b_24 [label="43"];
    Xed53fe106f15d44b_23 [label="Call\l"];
    Xed53fe106f15d44b_24 -> Xed53fe106f15d44b_25;
    Xed53fe106f15d44b_24 [label="44 <- chkd-Add(cp(3), cp(43))\lAssert mv(44.1) == false\l"];
    Xed53fe106f15d44b_25 -> Xed53fe106f15d44b_26;
    Xed53fe106f15d44b_25 [label="3 <- Use(mv(44.0))\l47 <- Len((*2))\l48 <- Lt(cp(20), cp(47))\lAssert mv(48) == true\l"];
    Xed53fe106f15d44b_26 -> Xed53fe106f15d44b_27 [label="51"];
    Xed53fe106f15d44b_26 [label="46 <- &mut (*2)[_20]\l52 <- & (*2)\l54 <- Use(cp((*21).0))\l53 <- Cast-IntToInt mv(54)\lCall\l"];
    Xed53fe106f15d44b_27 -> Xed53fe106f15d44b_28 [label="50"];
    Xed53fe106f15d44b_27 [label="Call\l"];
    Xed53fe106f15d44b_28 -> Xed53fe106f15d44b_29 [label="49"];
    Xed53fe106f15d44b_28 [label="Call\l"];
    Xed53fe106f15d44b_29 -> Xed53fe106f15d44b_7 [label="45"];
    Xed53fe106f15d44b_29 [label="Call\l"];
    Xed53fe106f15d44b_30 -> Xed53fe106f15d44b_31;
    Xed53fe106f15d44b_30 [label="57 <- Use(mv(55))\lGoto\l"];
    Xed53fe106f15d44b_31 -> Xed53fe106f15d44b_32 [label="58"];
    Xed53fe106f15d44b_31 [label="59 <- &mut 57\lCall\l"];
    Xed53fe106f15d44b_32 -> Xed53fe106f15d44b_34 [label="0"];
    Xed53fe106f15d44b_32 -> Xed53fe106f15d44b_33 [label="1"];
    Xed53fe106f15d44b_32 -> Xed53fe106f15d44b_9 [label="other"];
    Xed53fe106f15d44b_32 [label="60 <- Discriminant(58)\lSwitchInt mv(60)\l"];
    Xed53fe106f15d44b_33 -> Xed53fe106f15d44b_35 [label="62"];
    Xed53fe106f15d44b_33 [label="63 <- Use(cp(3))\lCall\l"];
    Xed53fe106f15d44b_34 -> Xed53fe106f15d44b_49;
    Xed53fe106f15d44b_34 [label="11 <- Use(cp(13))\lGoto\l"];
    Xed53fe106f15d44b_35 -> Xed53fe106f15d44b_45 [label="0"];
    Xed53fe106f15d44b_35 -> Xed53fe106f15d44b_36 [label="other"];
    Xed53fe106f15d44b_35 [label="61 <- Cast-PtrToPtr mv(62)\l65 <- Use(cp((*61).0))\l64 <- Eq(mv(65), const ?_u8)\lSwitchInt mv(64)\l"];
    Xed53fe106f15d44b_36 -> Xed53fe106f15d44b_37 [label="66"];
    Xed53fe106f15d44b_36 [label="Call\l"];
    Xed53fe106f15d44b_37 -> Xed53fe106f15d44b_38;
    Xed53fe106f15d44b_37 [label="67 <- chkd-Add(cp(3), cp(66))\lAssert mv(67.1) == false\l"];
    Xed53fe106f15d44b_38 -> Xed53fe106f15d44b_39;
    Xed53fe106f15d44b_38 [label="3 <- Use(mv(67.0))\l69 <- Use(cp((*61).8))\l68 <- Cast-IntToInt mv(69)\l70 <- chkd-Add(cp(3), cp(68))\lAssert mv(70.1) == false\l"];
    Xed53fe106f15d44b_39 -> Xed53fe106f15d44b_40;
    Xed53fe106f15d44b_39 [label="3 <- Use(mv(70.0))\l71 <- chkd-Add(cp(3), const ?_usize)\lAssert mv(71.1) == false\l"];
    Xed53fe106f15d44b_40 -> Xed53fe106f15d44b_41 [label="72"];
    Xed53fe106f15d44b_40 [label="3 <- Use(mv(71.0))\l74 <- Use(cp(3))\l73 <- Cast-PointerWithExposedProvenance mv(74)\lCall\l"];
    Xed53fe106f15d44b_41 -> Xed53fe106f15d44b_42;
    Xed53fe106f15d44b_41 [label="75 <- chkd-Add(cp(3), cp(72))\lAssert mv(75.1) == false\l"];
    Xed53fe106f15d44b_42 -> Xed53fe106f15d44b_43 [label="76"];
    Xed53fe106f15d44b_42 [label="3 <- Use(mv(75.0))\lCall\l"];
    Xed53fe106f15d44b_43 -> Xed53fe106f15d44b_44;
    Xed53fe106f15d44b_43 [label="77 <- chkd-Add(cp(3), cp(76))\lAssert mv(77.1) == false\l"];
    Xed53fe106f15d44b_44 -> Xed53fe106f15d44b_31;
    Xed53fe106f15d44b_44 [label="3 <- Use(mv(77.0))\lGoto\l"];
    Xed53fe106f15d44b_45 -> Xed53fe106f15d44b_46 [label="78"];
    Xed53fe106f15d44b_45 [label="Call\l"];
    Xed53fe106f15d44b_46 -> Xed53fe106f15d44b_47;
    Xed53fe106f15d44b_46 [label="79 <- chkd-Add(cp(3), cp(78))\lAssert mv(79.1) == false\l"];
    Xed53fe106f15d44b_47 -> Xed53fe106f15d44b_31;
    Xed53fe106f15d44b_47 [label="3 <- Use(mv(79.0))\lGoto\l"];
    Xed53fe106f15d44b_48 -> Xed53fe106f15d44b_49;
    Xed53fe106f15d44b_48 [label="11 <- Use(const ?_usize)\lGoto\l"];
    Xed53fe106f15d44b_49 -> Xed53fe106f15d44b_50 [label="83"];
    Xed53fe106f15d44b_49 [label="84 <- Use(cp(3))\lCall\l"];
    Xed53fe106f15d44b_50 -> Xed53fe106f15d44b_51 [label="85"];
    Xed53fe106f15d44b_50 [label="82 <- Cast-PtrToPtr mv(83)\l81 <- Use(cp((*82)))\l80 <- Cast-IntToInt mv(81)\lCall\l"];
    Xed53fe106f15d44b_51 -> Xed53fe106f15d44b_52;
    Xed53fe106f15d44b_51 [label="86 <- chkd-Add(cp(3), cp(85))\lAssert mv(86.1) == false\l"];
    Xed53fe106f15d44b_52 -> Xed53fe106f15d44b_53 [label="89"];
    Xed53fe106f15d44b_52 [label="3 <- Use(mv(86.0))\l90 <- Use(cp(3))\lCall\l"];
    Xed53fe106f15d44b_53 -> Xed53fe106f15d44b_54 [label="87"];
    Xed53fe106f15d44b_53 [label="88 <- Cast-PtrToPtr mv(89)\lCall\l"];
    Xed53fe106f15d44b_54 -> Xed53fe106f15d44b_55;
    Xed53fe106f15d44b_54 [label="91 <- chkd-Add(cp(3), cp(80))\lAssert mv(91.1) == false\l"];
    Xed53fe106f15d44b_55 -> Xed53fe106f15d44b_56 [label="94"];
    Xed53fe106f15d44b_55 [label="3 <- Use(mv(91.0))\l95 <- Use(cp(3))\lCall\l"];
    Xed53fe106f15d44b_56 [label="93 <- Cast-PtrToPtr mv(94)\l92 <- & (*93)\l96 <- Use(cp(11))\l0 <- Tuple (cp(92), mv(96), cp(87))\lReturn\l"];
  }
  Xed53fe106f15d44b_0 -> Xf7c0564bc7b3306b_0 [label="cp(1),mv(8)"];
  Xed53fe106f15d44b_1 -> Xc400e100fe1b1e46_0 [label=""];
  Xed53fe106f15d44b_4 -> Xd4c8399dbe49afd_0 [label="cp(4),const ?_usize"];
  Xed53fe106f15d44b_5 -> Xe9e3ff72e55a5f27_0 [label="mv(15)"];
  Xed53fe106f15d44b_7 -> X1f9e69c6b415d93e_0 [label="cp(18)"];
  Xed53fe106f15d44b_10 -> Xf7c0564bc7b3306b_0 [label="cp(1),mv(23)"];
  Xed53fe106f15d44b_11 -> Xe9e3ff72e55a5f27_0 [label="mv(56)"];
  Xed53fe106f15d44b_13 -> Xdcc6cca97078e0a0_0 [label=""];
  Xed53fe106f15d44b_17 -> X1016b8be58aff39a_0 [label="mv(33),const ?_usize"];
  Xed53fe106f15d44b_19 -> Xc400e100fe1b1e46_0 [label=""];
  Xed53fe106f15d44b_22 -> X3e61e2a565de7318_0 [label="mv(39),mv(42)"];
  Xed53fe106f15d44b_23 -> Xc400e100fe1b1e46_0 [label=""];
  Xed53fe106f15d44b_26 -> X5fd8469768ca93e7_0 [label="mv(52),mv(53)"];
  Xed53fe106f15d44b_27 -> Xa243b99d87ed4046_0 [label="cp(51)"];
  Xed53fe106f15d44b_28 -> Xdf6433a5e6c64a8f_0 [label="cp(50)"];
  Xed53fe106f15d44b_29 -> X3e61e2a565de7318_0 [label="mv(46),mv(49)"];
  Xed53fe106f15d44b_31 -> X1f9e69c6b415d93e_0 [label="cp(59)"];
  Xed53fe106f15d44b_33 -> Xf7c0564bc7b3306b_0 [label="cp(1),mv(63)"];
  Xed53fe106f15d44b_36 -> Xdcc6cca97078e0a0_0 [label=""];
  Xed53fe106f15d44b_40 -> X1016b8be58aff39a_0 [label="mv(73),const ?_usize"];
  Xed53fe106f15d44b_42 -> Xc400e100fe1b1e46_0 [label=""];
  Xed53fe106f15d44b_45 -> Xc400e100fe1b1e46_0 [label=""];
  Xed53fe106f15d44b_49 -> Xf7c0564bc7b3306b_0 [label="cp(1),mv(84)"];
  Xed53fe106f15d44b_50 -> Xc400e100fe1b1e46_0 [label=""];
  Xed53fe106f15d44b_52 -> Xf7c0564bc7b3306b_0 [label="cp(1),mv(90)"];
  Xed53fe106f15d44b_53 -> X445ab3f2d45ff97a_0 [label="mv(88),cp(80)"];
  Xed53fe106f15d44b_55 -> Xf7c0564bc7b3306b_0 [label="cp(1),mv(95)"];
  subgraph cluster_278 {
    label="pinocchio::account_info::\nAccountInfo::is_owned_by";
    style="filled";
    color=lightgray;
    node_279 [label="LOCALS\l0 = bool\l1 = &pinocchio::account_info::AccountInfo\l2 = &[u8; 32]\l3 = &&[u8; 32]\l4 = &[u8; 32]\l5 = &&[u8; 32]\l6 = *mut pinocchio::account_info::Account\l", style="filled", color=palegreen3];
    X8f13c009139e5cec_0 -> X8f13c009139e5cec_1 [label="0"];
    X8f13c009139e5cec_0 [label="6 <- CopyForDeref((*1).0)\l4 <- & (*6).6\l3 <- & 4\l5 <- & 2\lCall\l"];
    X8f13c009139e5cec_1 [label="Return\l"];
  }
  X8f13c009139e5cec_0 -> X62e1ca1dfa9f1ff9_0 [label="mv(3),mv(5)"];
  subgraph cluster_280 {
    label="pinocchio::account_info::\nAccountInfo::borrow_data_\nunchecked";
    style="filled";
    color=lightgray;
    node_281 [label="LOCALS\l0 = &[u8]\l1 = &pinocchio::account_info::AccountInfo\l2 = *const u8\l3 = *mut u8\l4 = usize\l", style="filled", color=palegreen3];
    Xd87d8e0f8c4953f_0 -> Xd87d8e0f8c4953f_1 [label="3"];
    Xd87d8e0f8c4953f_0 [label="Call\l"];
    Xd87d8e0f8c4953f_1 -> Xd87d8e0f8c4953f_2 [label="4"];
    Xd87d8e0f8c4953f_1 [label="2 <- Cast-PtrToPtr mv(3)\lCall\l"];
    Xd87d8e0f8c4953f_2 -> Xd87d8e0f8c4953f_3 [label="0"];
    Xd87d8e0f8c4953f_2 [label="Call\l"];
    Xd87d8e0f8c4953f_3 [label="Return\l"];
  }
  Xd87d8e0f8c4953f_0 -> X5487d67c18c92abd_0 [label="cp(1)"];
  Xd87d8e0f8c4953f_1 -> X499a64bd2ee6dafa_0 [label="cp(1)"];
  Xd87d8e0f8c4953f_2 -> X445ab3f2d45ff97a_0 [label="mv(2),mv(4)"];
  subgraph cluster_282 {
    label="pinocchio::account_info::\nAccountInfo::borrow_mut_d\nata_unchecked";
    style="filled";
    color=lightgray;
    node_283 [label="LOCALS\l0 = &mut [u8]\l1 = &pinocchio::account_info::AccountInfo\l2 = *mut u8\l3 = usize\l", style="filled", color=palegreen3];
    X5492146546091aad_0 -> X5492146546091aad_1 [label="2"];
    X5492146546091aad_0 [label="Call\l"];
    X5492146546091aad_1 -> X5492146546091aad_2 [label="3"];
    X5492146546091aad_1 [label="Call\l"];
    X5492146546091aad_2 -> X5492146546091aad_3 [label="0"];
    X5492146546091aad_2 [label="Call\l"];
    X5492146546091aad_3 [label="Return\l"];
  }
  X5492146546091aad_0 -> X5487d67c18c92abd_0 [label="cp(1)"];
  X5492146546091aad_1 -> X499a64bd2ee6dafa_0 [label="cp(1)"];
  X5492146546091aad_2 -> Xd45e0829bd9b8685_0 [label="mv(2),mv(3)"];
  subgraph cluster_284 {
    label="pinocchio::account_info::\nAccountInfo::key";
    style="filled";
    color=lightgray;
    node_285 [label="LOCALS\l0 = &[u8; 32]\l1 = &pinocchio::account_info::AccountInfo\l2 = *mut pinocchio::account_info::Account\l", style="filled", color=palegreen3];
    X8817de218f598320_0 [label="2 <- CopyForDeref((*1).0)\l0 <- & (*2).5\lReturn\l"];
  }
  subgraph cluster_286 {
    label="pinocchio::account_info::\nAccountInfo::owner";
    style="filled";
    color=lightgray;
    node_287 [label="LOCALS\l0 = &[u8; 32]\l1 = &pinocchio::account_info::AccountInfo\l2 = *mut pinocchio::account_info::Account\l", style="filled", color=palegreen3];
    X63a66dd16cbd53fd_0 [label="2 <- CopyForDeref((*1).0)\l0 <- & (*2).6\lReturn\l"];
  }
  subgraph cluster_288 {
    label="pinocchio::account_info::\nAccountInfo::data_len";
    style="filled";
    color=lightgray;
    node_289 [label="LOCALS\l0 = usize\l1 = &pinocchio::account_info::AccountInfo\l2 = u64\l3 = *mut pinocchio::account_info::Account\l", style="filled", color=palegreen3];
    X499a64bd2ee6dafa_0 [label="3 <- CopyForDeref((*1).0)\l2 <- Use(cp((*3).8))\l0 <- Cast-IntToInt mv(2)\lReturn\l"];
  }
  subgraph cluster_290 {
    label="pinocchio::account_info::\nAccountInfo::lamports";
    style="filled";
    color=lightgray;
    node_291 [label="LOCALS\l0 = u64\l1 = &pinocchio::account_info::AccountInfo\l2 = *mut pinocchio::account_info::Account\l", style="filled", color=palegreen3];
    X91937cb3b305cbc5_0 [label="2 <- CopyForDeref((*1).0)\l0 <- Use(cp((*2).7))\lReturn\l"];
  }
  subgraph cluster_292 {
    label="pinocchio::log::sol_log";
    style="filled";
    color=lightgray;
    node_293 [label="LOCALS\l0 = ()\l1 = &str\l2 = &str\l", style="filled", color=palegreen3];
    X3a0ccd4589f66f55_0 -> X3a0ccd4589f66f55_1 [label="2"];
    X3a0ccd4589f66f55_0 [label="Call\l"];
    X3a0ccd4589f66f55_1 [label="Return\l"];
  }
  X3a0ccd4589f66f55_0 -> X1f8937e70182e85e_0 [label="cp(1)"];
  subgraph cluster_294 {
    label="pinocchio::sysvars::rent:\n:Rent::minimum_balance";
    style="filled";
    color=lightgray;
    node_295 [label="LOCALS\l0 = u64\l1 = &pinocchio::sysvars::rent::Rent\l2 = usize\l3 = u64\l4 = bool\l5 = u64\l6 = u64\l7 = (u64, bool)\l8 = u64\l9 = (u64, bool)\l10 = (u64, bool)\l11 = f64\l12 = f64\l13 = u64\l14 = u64\l15 = (u64, bool)\l16 = u64\l17 = (u64, bool)\l18 = f64\l", style="filled", color=palegreen3];
    X3036df73713f23cc_0 -> X3036df73713f23cc_1 [label="4"];
    X3036df73713f23cc_0 [label="3 <- Cast-IntToInt cp(2)\lCall\l"];
    X3036df73713f23cc_1 -> X3036df73713f23cc_6 [label="0"];
    X3036df73713f23cc_1 -> X3036df73713f23cc_2 [label="other"];
    X3036df73713f23cc_1 [label="SwitchInt mv(4)\l"];
    X3036df73713f23cc_2 -> X3036df73713f23cc_3;
    X3036df73713f23cc_2 [label="7 <- chkd-Add(const ?_u64, cp(3))\lAssert mv(7.1) == false\l"];
    X3036df73713f23cc_3 -> X3036df73713f23cc_4;
    X3036df73713f23cc_3 [label="6 <- Use(mv(7.0))\l8 <- Use(cp((*1).0))\l9 <- chkd-Mul(cp(6), cp(8))\lAssert mv(9.1) == false\l"];
    X3036df73713f23cc_4 -> X3036df73713f23cc_5;
    X3036df73713f23cc_4 [label="5 <- Use(mv(9.0))\l10 <- chkd-Mul(cp(5), const ?_u64)\lAssert mv(10.1) == false\l"];
    X3036df73713f23cc_5 -> X3036df73713f23cc_9;
    X3036df73713f23cc_5 [label="0 <- Use(mv(10.0))\lGoto\l"];
    X3036df73713f23cc_6 -> X3036df73713f23cc_7;
    X3036df73713f23cc_6 [label="15 <- chkd-Add(const ?_u64, cp(3))\lAssert mv(15.1) == false\l"];
    X3036df73713f23cc_7 -> X3036df73713f23cc_8;
    X3036df73713f23cc_7 [label="14 <- Use(mv(15.0))\l16 <- Use(cp((*1).0))\l17 <- chkd-Mul(cp(14), cp(16))\lAssert mv(17.1) == false\l"];
    X3036df73713f23cc_8 -> X3036df73713f23cc_9;
    X3036df73713f23cc_8 [label="13 <- Use(mv(17.0))\l12 <- Cast-IntToFloat mv(13)\l18 <- Use(cp((*1).1))\l11 <- Mul(mv(12), mv(18))\l0 <- Cast-FloatToInt mv(11)\lGoto\l"];
    X3036df73713f23cc_9 [label="Return\l"];
  }
  X3036df73713f23cc_0 -> X1351ef5c71268340_0 [label="cp(1)"];
  subgraph cluster_296 {
    label="pinocchio::sysvars::rent:\n:Rent::from_bytes_uncheck\ned";
    style="filled";
    color=lightgray;
    node_297 [label="LOCALS\l0 = &pinocchio::sysvars::rent::Rent\l1 = &[u8]\l2 = *const pinocchio::sysvars::rent::Rent\l3 = *const u8\l", style="filled", color=palegreen3];
    Xc3348c6747a1f406_0 -> Xc3348c6747a1f406_1 [label="3"];
    Xc3348c6747a1f406_0 [label="Call\l"];
    Xc3348c6747a1f406_1 [label="2 <- Cast-PtrToPtr mv(3)\l0 <- & (*2)\lReturn\l"];
  }
  Xc3348c6747a1f406_0 -> X5e85acfe8a19755e_0 [label="cp(1)"];
  subgraph cluster_298 {
    label="pinocchio::sysvars::rent:\n:Rent::is_default_rent_th\nreshold";
    style="filled";
    color=lightgray;
    node_299 [label="LOCALS\l0 = bool\l1 = &pinocchio::sysvars::rent::Rent\l2 = u64\l3 = [u8; 8]\l4 = f64\l", style="filled", color=palegreen3];
    X1351ef5c71268340_0 -> X1351ef5c71268340_1 [label="3"];
    X1351ef5c71268340_0 [label="4 <- Use(cp((*1).1))\lCall\l"];
    X1351ef5c71268340_1 -> X1351ef5c71268340_2 [label="2"];
    X1351ef5c71268340_1 [label="Call\l"];
    X1351ef5c71268340_2 [label="0 <- Eq(mv(2), const ?_u64)\lReturn\l"];
  }
  X1351ef5c71268340_0 -> Xb7233195f5e48779_0 [label="mv(4)"];
  X1351ef5c71268340_1 -> X4b040c9530995baf_0 [label="mv(3)"];
  subgraph cluster_300 {
    label="pinocchio::sysvars::rent:\n:Rent::from_account_info_\nunchecked";
    style="filled";
    color=lightgray;
    node_301 [label="LOCALS\l0 = core::result::Result<&pinocchio::sysvars::rent::Rent, pinocchio::program_error::ProgramError>\l1 = &pinocchio::account_info::AccountInfo\l2 = bool\l3 = &&[u8; 32]\l4 = &[u8; 32]\l5 = &&[u8; 32]\l6 = pinocchio::program_error::ProgramError\l7 = &pinocchio::sysvars::rent::Rent\l8 = &[u8]\l", style="filled", color=palegreen3];
    Xfaf06a046c4d2f42_0 -> Xfaf06a046c4d2f42_1 [label="4"];
    Xfaf06a046c4d2f42_0 [label="Call\l"];
    Xfaf06a046c4d2f42_1 -> Xfaf06a046c4d2f42_2 [label="2"];
    Xfaf06a046c4d2f42_1 [label="3 <- & 4\l5 <- Use(const &&[u8; 32])\lCall\l"];
    Xfaf06a046c4d2f42_2 -> Xfaf06a046c4d2f42_4 [label="0"];
    Xfaf06a046c4d2f42_2 -> Xfaf06a046c4d2f42_3 [label="other"];
    Xfaf06a046c4d2f42_2 [label="SwitchInt mv(2)\l"];
    Xfaf06a046c4d2f42_3 -> Xfaf06a046c4d2f42_7;
    Xfaf06a046c4d2f42_3 [label="6 <- Adt{1} ()\l0 <- Adt{1} (mv(6))\lGoto\l"];
    Xfaf06a046c4d2f42_4 -> Xfaf06a046c4d2f42_5 [label="8"];
    Xfaf06a046c4d2f42_4 [label="Call\l"];
    Xfaf06a046c4d2f42_5 -> Xfaf06a046c4d2f42_6 [label="7"];
    Xfaf06a046c4d2f42_5 [label="Call\l"];
    Xfaf06a046c4d2f42_6 -> Xfaf06a046c4d2f42_7;
    Xfaf06a046c4d2f42_6 [label="0 <- Adt{0} (cp(7))\lGoto\l"];
    Xfaf06a046c4d2f42_7 [label="Return\l"];
  }
  Xfaf06a046c4d2f42_0 -> X8817de218f598320_0 [label="cp(1)"];
  Xfaf06a046c4d2f42_1 -> X5d6c1de00eb04104_0 [label="mv(3),mv(5)"];
  Xfaf06a046c4d2f42_4 -> Xd87d8e0f8c4953f_0 [label="cp(1)"];
  Xfaf06a046c4d2f42_5 -> Xc3348c6747a1f406_0 [label="cp(8)"];
  subgraph cluster_302 {
    label="entrypoint::entrypoint";
    style="filled";
    color=lightgray;
    node_303 [label="LOCALS\l0 = u64\l1 = *mut u8\l2 = [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>; 128]\l3 = &[u8; 32]\l4 = usize\l5 = &[u8]\l6 = (&[u8; 32], usize, &[u8])\l7 = &mut [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l8 = &mut [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>; 128]\l9 = core::result::Result<(), pinocchio::program_error::ProgramError>\l10 = &&[u8; 32]\l11 = &[pinocchio::account_info::AccountInfo]\l12 = *const pinocchio::account_info::AccountInfo\l13 = *const core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l14 = &[core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l15 = &[core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>; 128]\l16 = &&[u8]\l17 = isize\l18 = pinocchio::program_error::ProgramError\l19 = &[u8; 32]\l20 = &[u8]\l", style="filled", color=palegreen3];
    X35727d23baa70bc_0 -> X35727d23baa70bc_1 [label="6"];
    X35727d23baa70bc_0 [label="2 <- Repeat const core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l8 <- &mut 2\l7 <- Cast-PointerCoercion(Unsize) cp(8)\lCall\l"];
    X35727d23baa70bc_1 -> X35727d23baa70bc_2 [label="13"];
    X35727d23baa70bc_1 [label="3 <- Use(cp(6.0))\l4 <- Use(cp(6.1))\l5 <- Use(cp(6.2))\l10 <- & 3\l19 <- CopyForDeref((*10))\l15 <- & 2\l14 <- Cast-PointerCoercion(Unsize) mv(15)\lCall\l"];
    X35727d23baa70bc_2 -> X35727d23baa70bc_3 [label="11"];
    X35727d23baa70bc_2 [label="12 <- Cast-PtrToPtr mv(13)\lCall\l"];
    X35727d23baa70bc_3 -> X35727d23baa70bc_4 [label="9"];
    X35727d23baa70bc_3 [label="16 <- & 5\l20 <- CopyForDeref((*16))\lCall\l"];
    X35727d23baa70bc_4 -> X35727d23baa70bc_7 [label="0"];
    X35727d23baa70bc_4 -> X35727d23baa70bc_6 [label="1"];
    X35727d23baa70bc_4 -> X35727d23baa70bc_5 [label="other"];
    X35727d23baa70bc_4 [label="17 <- Discriminant(9)\lSwitchInt mv(17)\l"];
    X35727d23baa70bc_5 [label="Unreachable\l"];
    X35727d23baa70bc_6 -> X35727d23baa70bc_9 [label="0"];
    X35727d23baa70bc_6 [label="18 <- Use(mv((9 as variant 1).0))\lCall\l"];
    X35727d23baa70bc_7 -> X35727d23baa70bc_8;
    X35727d23baa70bc_7 [label="0 <- Use(const ?_u64)\lGoto\l"];
    X35727d23baa70bc_8 [label="Return\l"];
    X35727d23baa70bc_9 -> X35727d23baa70bc_8;
    X35727d23baa70bc_9 [label="Goto\l"];
  }
  X35727d23baa70bc_0 -> Xed53fe106f15d44b_0 [label="cp(1),mv(7)"];
  X35727d23baa70bc_1 -> Xd96a92a3093bb3ff_0 [label="mv(14)"];
  X35727d23baa70bc_2 -> X990394bf3cfa52c4_0 [label="cp(12),cp(4)"];
  X35727d23baa70bc_3 -> Xf71ee158856918bf_0 [label="cp(19),cp(11),cp(20)"];
  X35727d23baa70bc_6 -> X9b7d50e3fbab8ea3_0 [label="mv(18)"];
}
