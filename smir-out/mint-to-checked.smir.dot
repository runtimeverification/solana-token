digraph {
  label="pinocchio_token_program";
  node [shape=rectangle];
  X3d825c4445d1baca_0 [label="_ZN4core5slice5index22sli\nce_index_order_fail17h640\n68df90ca47128E", color=red];
  X1f8937e70182e85e_0 [label="_ZN4core4hint9black_box17\nhaee43377622d8965E", color=red];
  X7a4a77babfb83a53_0 [label="_ZN9pinocchio13program_er\nror99_$LT$impl$u20$core..\nconvert..From$LT$pinocchi\no..program_error..Program\nError$GT$$u20$for$u20$u64\n$GT$4from17h3cde40cb61358\n316E", color=red];
  X310df8f1c672aeb_0 [label="Intr: \ncttz_nonzero", color=red];
  Xdd778da4886cf626_0 [label="_ZN4core6result13unwrap_f\nailed17h698bf754bc36b600E", color=red];
  Xfffaab11503b9894_0 [label="_ZN4core9panicking9panic_\nfmt17h3df1a4d3dd80ed56E", color=red];
  X5487d67c18c92abd_0 [label="_ZN9pinocchio12account_in\nfo11AccountInfo8data_ptr1\n7hb6e9e0a8aa5bfc73E", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  Xab38848ab7f87cef_0 [label="Intr: \nexact_div", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X83c8e82412404978_0 [label="Intr: \nassert_inhabited", color=red];
  Xca95a9d6f7061805_0 [label="_ZN4core3fmt3num53_$LT$im\npl$u20$core..fmt..UpperHe\nx$u20$for$u20$u32$GT$3fmt\n17h7baa47f3e5cbe44cE", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  Xac08878333d72e42_0 [label="_ZN4core9panicking5panic1\n7h941160ead03e2d54E", color=red];
  X85724fedaf4a5444_0 [label="_ZN4core3fmt9Formatter25d\nebug_tuple_field1_finish1\n7h9a57a6e5dd04f319E", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X1d0677a8f15bd47_0 [label="_ZN4core3fmt3num53_$LT$im\npl$u20$core..fmt..LowerHe\nx$u20$for$u20$u32$GT$3fmt\n17hb987357f13dc6cc8E", color=red];
  X2b52c3b21b79df6c_0 [label="_ZN19spl_token_interface5\nerror134_$LT$impl$u20$cor\ne..convert..From$LT$spl_t\noken_interface..error..To\nkenError$GT$$u20$for$u20$\npinocchio..program_error.\n.ProgramError$GT$4from17h\nc6e0c76c2379dcb8E", color=red];
  X43ad75e732d0e131_0 [label="Intr: \nraw_eq", color=red];
  Xb7bf8399f7d46827_0 [label="_ZN4core5slice5index26sli\nce_start_index_len_fail17\nhc3d07dac3414cccaE", color=red];
  X8fc2060ad58510d8_0 [label="Intr: \ncold_path", color=red];
  X9b498145f7dc0efa_0 [label="_ZN4core6option13unwrap_f\nailed17hb0fa9493deab9974E", color=red];
  X13437086877d9cb7_0 [label="_ZN4core5slice5index24sli\nce_end_index_len_fail17h7\ne6f2137e7855a34E", color=red];
  X38c69241c4d95178_0 [label="_ZN4core9panicking13asser\nt_failed17h384d2134aae20a\n09E", color=red];
  X1eb9e8a223d962a5_0 [label="_ZN4core9panicking19asser\nt_failed_inner17h1d286061\nca0adfe7E", color=red];
  Xd6b56047a80c2f44_0 [label="_ZN92_$LT$spl_token_inter\nface..error..TokenError$u\n20$as$u20$core..convert..\nTryFrom$LT$u32$GT$$GT$8tr\ny_from17hb4b287096064e78e\nE", color=red];
  X5ea6c111b835a80f_0 [label="Intr: \nctpop", color=red];
  X94eaa304226c0157_0 [label="_ZN91_$LT$core..slice..it\ner..Iter$LT$T$GT$$u20$as$\nu20$core..iter..traits..i\nterator..Iterator$GT$4nex\nt17h7a9a099dd8733889E", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  Xd45e0829bd9b8685_0 [label="_ZN4core5slice3raw18from_\nraw_parts_mut17hd39020404\n1394ebaE", color=red];
  X4b8cc26a7ce3fb77_0 [label="_ZN4core5slice29_$LT$impl\n$u20$$u5b$T$u5d$$GT$4iter\n17h26b4af592fa45b44E", color=red];
  X2272e127fe823423_0 [label="_ZN79_$LT$core..result..R\nesult$LT$T$C$E$GT$$u20$as\n$u20$core..ops..try_trait\n..Try$GT$6branch17he25507\n9ee625a107E", color=red];
  X5adbeff4b5cb293e_0 [label="_ZN153_$LT$core..result..\nResult$LT$T$C$F$GT$$u20$a\ns$u20$core..ops..try_trai\nt..FromResidual$LT$core..\nresult..Result$LT$core..c\nonvert..Infallible$C$E$GT\n$$GT$$GT$13from_residual1\n7h88ee5a672840db5aE", color=red];
  X5b44578fd65a3909_0 [label="_ZN4core3fmt9Formatter3pa\nd17hc1359c14f299250aE", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X67d151235d77b301_0 [label="_ZN4core3fmt3num3imp52_$L\nT$impl$u20$core..fmt..Dis\nplay$u20$for$u20$u32$GT$3\nfmt17hec74c53b91325b16E", color=red];
  X445ab3f2d45ff97a_0 [label="_ZN4core5slice3raw14from_\nraw_parts17h1e564b97e5995\n981E", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  Xcfb99dd5dbeb355e_0 [label="_ZN4core9panicking14panic\n_nounwind17h3a5ca15c20002\n51eE", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X3e3db5977da52381_0 [label="_ZN50_$LT$T$u20$as$u20$co\nre..convert..Into$LT$U$GT\n$$GT$4into17hecca773eb6e4\n642eE", color=red];
  Xb93f0288e0006b54_0 [label="_ZN4core3fmt9Formatter9wr\nite_str17h79222ac07baf2d9\n8E", color=red];
  subgraph cluster_0 {
    label="<spl_token_interface::sta\nte::mint::Mint \nas \nspl_token_interface::stat\ne::Initializable>::is_ini\ntialized";
    style="filled";
    color=lightgray;
    node_1 [label="LOCALS\l0 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l1 = &spl_token_interface::state::mint::Mint\l2 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    Xfda868f8ceb54b0b_0 -> Xfda868f8ceb54b0b_3 [label="0"];
    Xfda868f8ceb54b0b_0 -> Xfda868f8ceb54b0b_2 [label="1"];
    Xfda868f8ceb54b0b_0 -> Xfda868f8ceb54b0b_1 [label="other"];
    Xfda868f8ceb54b0b_0 [label="SwitchInt cp((*1).3)\l"];
    Xfda868f8ceb54b0b_1 -> Xfda868f8ceb54b0b_4;
    Xfda868f8ceb54b0b_1 [label="2 <- Adt{3} ()\l0 <- Adt{1} (mv(2))\lGoto\l"];
    Xfda868f8ceb54b0b_2 -> Xfda868f8ceb54b0b_4;
    Xfda868f8ceb54b0b_2 [label="0 <- Adt{0} (const bool)\lGoto\l"];
    Xfda868f8ceb54b0b_3 -> Xfda868f8ceb54b0b_4;
    Xfda868f8ceb54b0b_3 [label="0 <- Adt{0} (const bool)\lGoto\l"];
    Xfda868f8ceb54b0b_4 [label="Return\l"];
  }
  subgraph cluster_2 {
    label="<core::ops::Range<usize> \nas \ncore::slice::SliceIndex<[\npinocchio::account_info::\nAccountInfo]>>::get_unche\ncked";
    style="filled";
    color=lightgray;
    node_3 [label="LOCALS\l0 = *const [pinocchio::account_info::AccountInfo]\l1 = core::ops::Range<usize>\l2 = *const [pinocchio::account_info::AccountInfo]\l3 = bool\l4 = ()\l5 = usize\l6 = usize\l7 = usize\l8 = usize\l9 = usize\l10 = usize\l11 = *const pinocchio::account_info::AccountInfo\l12 = *const pinocchio::account_info::AccountInfo\l", style="filled", color=palegreen3];
    X35636d3a007cb3bc_0 -> X35636d3a007cb3bc_3 [label="0"];
    X35636d3a007cb3bc_0 -> X35636d3a007cb3bc_1 [label="other"];
    X35636d3a007cb3bc_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    X35636d3a007cb3bc_1 -> X35636d3a007cb3bc_2 [label="4"];
    X35636d3a007cb3bc_1 [label="Storage Live _5\l5 <- Use(cp(1.0))\lStorage Live _6\l6 <- Use(cp(1.1))\lStorage Live _7\l7 <- PtrMetadata(cp(2))\lCall\l"];
    X35636d3a007cb3bc_2 -> X35636d3a007cb3bc_3;
    X35636d3a007cb3bc_2 [label="Storage Dead _7\lStorage Dead _6\lStorage Dead _5\lGoto\l"];
    X35636d3a007cb3bc_3 [label="Storage Dead _3\lStorage Live _9\l9 <- Use(cp(1.1))\l10 <- Use(cp(1.0))\l8 <- SubUnchecked(mv(9), cp(10))\lStorage Dead _9\lStorage Live _11\lStorage Live _12\l12 <- Cast-PtrToPtr cp(2)\l11 <- Offset(cp(12), cp(10))\lStorage Dead _12\l0 <- *([pinocchio::account_info::AccountInfo]) (cp(11), cp(8))\lStorage Dead _11\lReturn\l"];
  }
  X35636d3a007cb3bc_1 -> X9ee05f346622e41_0 [label="mv(5),mv(6),mv(7)"];
  subgraph cluster_4 {
    label="<core::ops::Range<usize> \nas \ncore::slice::SliceIndex<[\nu8]>>::get_unchecked";
    style="filled";
    color=lightgray;
    node_5 [label="LOCALS\l0 = *const [u8]\l1 = core::ops::Range<usize>\l2 = *const [u8]\l3 = bool\l4 = ()\l5 = usize\l6 = usize\l7 = usize\l8 = usize\l9 = usize\l10 = usize\l11 = *const u8\l12 = *const u8\l", style="filled", color=palegreen3];
    Xa5745fda7f573cf5_0 -> Xa5745fda7f573cf5_3 [label="0"];
    Xa5745fda7f573cf5_0 -> Xa5745fda7f573cf5_1 [label="other"];
    Xa5745fda7f573cf5_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    Xa5745fda7f573cf5_1 -> Xa5745fda7f573cf5_2 [label="4"];
    Xa5745fda7f573cf5_1 [label="Storage Live _5\l5 <- Use(cp(1.0))\lStorage Live _6\l6 <- Use(cp(1.1))\lStorage Live _7\l7 <- PtrMetadata(cp(2))\lCall\l"];
    Xa5745fda7f573cf5_2 -> Xa5745fda7f573cf5_3;
    Xa5745fda7f573cf5_2 [label="Storage Dead _7\lStorage Dead _6\lStorage Dead _5\lGoto\l"];
    Xa5745fda7f573cf5_3 [label="Storage Dead _3\lStorage Live _9\l9 <- Use(cp(1.1))\l10 <- Use(cp(1.0))\l8 <- SubUnchecked(mv(9), cp(10))\lStorage Dead _9\lStorage Live _11\lStorage Live _12\l12 <- Cast-PtrToPtr cp(2)\l11 <- Offset(cp(12), cp(10))\lStorage Dead _12\l0 <- *([u8]) (cp(11), cp(8))\lStorage Dead _11\lReturn\l"];
  }
  Xa5745fda7f573cf5_1 -> X9ee05f346622e41_0 [label="mv(5),mv(6),mv(7)"];
  subgraph cluster_6 {
    label="<core::ops::Range<usize> \nas \ncore::slice::SliceIndex<[\nT]>>::get_unchecked::prec\nondition_check";
    style="filled";
    color=lightgray;
    node_7 [label="LOCALS\l0 = ()\l1 = usize\l2 = usize\l3 = usize\l4 = bool\l5 = bool\l6 = !\l", style="filled", color=palegreen3];
    X9ee05f346622e41_0 -> X9ee05f346622e41_3 [label="0"];
    X9ee05f346622e41_0 -> X9ee05f346622e41_1 [label="other"];
    X9ee05f346622e41_0 [label="Storage Live _4\l4 <- Ge(cp(2), cp(1))\lSwitchInt mv(4)\l"];
    X9ee05f346622e41_1 -> X9ee05f346622e41_3 [label="0"];
    X9ee05f346622e41_1 -> X9ee05f346622e41_2 [label="other"];
    X9ee05f346622e41_1 [label="Storage Live _5\l5 <- Le(cp(2), cp(3))\lSwitchInt mv(5)\l"];
    X9ee05f346622e41_2 [label="Storage Dead _5\lStorage Dead _4\lReturn\l"];
    X9ee05f346622e41_3 [label="Call\l"];
  }
  X9ee05f346622e41_3 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_8 {
    label="<core::ops::Range<usize> \nas \ncore::slice::SliceIndex<[\n[u8; \n32]]>>::index";
    style="filled";
    color=lightgray;
    node_9 [label="LOCALS\l0 = &[[u8; 32]]\l1 = core::ops::Range<usize>\l2 = &[[u8; 32]]\l3 = !\l4 = usize\l5 = core::option::Option<usize>\l6 = usize\l7 = usize\l8 = bool\l9 = usize\l10 = !\l11 = *const [[u8; 32]]\l12 = *const [[u8; 32]]\l13 = bool\l14 = usize\l15 = *const [u8; 32]\l16 = *const [u8; 32]\l", style="filled", color=palegreen3];
    X320c076b468c7006_0 -> X320c076b468c7006_4 [label="0"];
    X320c076b468c7006_0 -> X320c076b468c7006_3 [label="other"];
    X320c076b468c7006_0 [label="Storage Live _5\l6 <- Use(cp(1.1))\l7 <- Use(cp(1.0))\lStorage Live _13\l13 <- Lt(cp(6), cp(7))\lSwitchInt mv(13)\l"];
    X320c076b468c7006_1 [label="Call\l"];
    X320c076b468c7006_2 [label="Storage Dead _8\lStorage Live _11\lStorage Live _12\l12 <- &raw (*2)\lStorage Live _15\lStorage Live _16\l16 <- Cast-PtrToPtr cp(12)\l15 <- Offset(cp(16), cp(7))\lStorage Dead _16\l11 <- *([[u8; 32]]) (cp(15), cp(4))\lStorage Dead _15\lStorage Dead _12\l0 <- & (*11)\lStorage Dead _11\lReturn\l"];
    X320c076b468c7006_3 [label="Storage Dead _13\lStorage Dead _5\lCall\l"];
    X320c076b468c7006_4 -> X320c076b468c7006_2 [label="0"];
    X320c076b468c7006_4 -> X320c076b468c7006_1 [label="other"];
    X320c076b468c7006_4 [label="Storage Live _14\l14 <- SubUnchecked(cp(6), cp(7))\l5 <- Adt{1} (mv(14))\lStorage Dead _14\lStorage Dead _13\l4 <- Use(cp((5 as variant 1).0))\lStorage Dead _5\lStorage Live _8\l9 <- PtrMetadata(cp(2))\l8 <- Gt(cp(6), cp(9))\lSwitchInt mv(8)\l"];
  }
  X320c076b468c7006_1 -> X13437086877d9cb7_0 [label="mv(6),mv(9)"];
  X320c076b468c7006_3 -> X3d825c4445d1baca_0 [label="mv(7),mv(6)"];
  subgraph cluster_10 {
    label="<spl_token_interface::sta\nte::account::Account \nas \nspl_token_interface::stat\ne::Initializable>::is_ini\ntialized";
    style="filled";
    color=lightgray;
    node_11 [label="LOCALS\l0 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l1 = &spl_token_interface::state::account::Account\l2 = core::result::Result<spl_token_interface::state::account_state::AccountState, pinocchio::program_error::ProgramError>\l3 = u8\l", style="filled", color=palegreen3];
    X51b146e3c692f3b3_0 -> X51b146e3c692f3b3_1 [label="2"];
    X51b146e3c692f3b3_0 [label="3 <- Use(cp((*1).4))\lCall\l"];
    X51b146e3c692f3b3_1 -> X51b146e3c692f3b3_2 [label="0"];
    X51b146e3c692f3b3_1 [label="Call\l"];
    X51b146e3c692f3b3_2 [label="Return\l"];
  }
  X51b146e3c692f3b3_0 -> Xebdcabd9f1c41329_0 [label="mv(3)"];
  X51b146e3c692f3b3_1 -> X881c7a326c470b28_0 [label="mv(2),const {closure@<spl_token_interface::state::account::Account as spl_token_interface::state::Initializable>::is_initialized::{closure#0}}"];
  subgraph cluster_12 {
    label="<spl_token_interface::sta\nte::account::Account \nas \nspl_token_interface::stat\ne::Initializable>::is_ini\ntialized::{closure#0}";
    style="filled";
    color=lightgray;
    node_13 [label="LOCALS\l0 = bool\l1 = {closure@<spl_token_interface::state::account::Account as spl_token_interface::state::Initializable>::is_initialized::{closure#0}}\l2 = spl_token_interface::state::account_state::AccountState\l3 = &spl_token_interface::state::account_state::AccountState\l4 = &spl_token_interface::state::account_state::AccountState\l", style="filled", color=palegreen3];
    Xe8c8eaa619633971_0 -> Xe8c8eaa619633971_1 [label="0"];
    Xe8c8eaa619633971_0 [label="3 <- & 2\l4 <- Use(const &spl_token_interface::state::account_state::AccountState)\lCall\l"];
    Xe8c8eaa619633971_1 [label="Return\l"];
  }
  Xe8c8eaa619633971_0 -> Xd5b4a5747e6ff805_0 [label="mv(3),mv(4)"];
  subgraph cluster_14 {
    label="<core::ops::RangeTo<usize\n> \nas \ncore::slice::SliceIndex<[\npinocchio::account_info::\nAccountInfo]>>::get_unche\ncked";
    style="filled";
    color=lightgray;
    node_15 [label="LOCALS\l0 = *const [pinocchio::account_info::AccountInfo]\l1 = core::ops::RangeTo<usize>\l2 = *const [pinocchio::account_info::AccountInfo]\l3 = core::ops::Range<usize>\l4 = usize\l", style="filled", color=palegreen3];
    X547eb5d0a2c4568_0 -> X547eb5d0a2c4568_1 [label="0"];
    X547eb5d0a2c4568_0 [label="Storage Live _3\lStorage Live _4\l4 <- Use(cp(1.0))\l3 <- Adt{0} (const ?_usize, mv(4))\lStorage Dead _4\lCall\l"];
    X547eb5d0a2c4568_1 [label="Storage Dead _3\lReturn\l"];
  }
  X547eb5d0a2c4568_0 -> X35636d3a007cb3bc_0 [label="mv(3),mv(2)"];
  subgraph cluster_16 {
    label="<spl_token_interface::sta\nte::account_state::Accoun\ntState \nas \ncore::convert::TryFrom<u8\n>>::try_from";
    style="filled";
    color=lightgray;
    node_17 [label="LOCALS\l0 = core::result::Result<spl_token_interface::state::account_state::AccountState, pinocchio::program_error::ProgramError>\l1 = u8\l2 = bool\l3 = bool\l4 = spl_token_interface::state::account_state::AccountState\l5 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    Xebdcabd9f1c41329_0 -> Xebdcabd9f1c41329_1 [label="0"];
    Xebdcabd9f1c41329_0 -> Xebdcabd9f1c41329_3 [label="other"];
    Xebdcabd9f1c41329_0 [label="2 <- Le(const ?_u8, cp(1))\lSwitchInt mv(2)\l"];
    Xebdcabd9f1c41329_1 -> Xebdcabd9f1c41329_4;
    Xebdcabd9f1c41329_1 [label="5 <- Adt{3} ()\l0 <- Adt{1} (mv(5))\lGoto\l"];
    Xebdcabd9f1c41329_2 -> Xebdcabd9f1c41329_4;
    Xebdcabd9f1c41329_2 [label="4 <- Cast-Transmute cp(1)\l0 <- Adt{0} (mv(4))\lGoto\l"];
    Xebdcabd9f1c41329_3 -> Xebdcabd9f1c41329_1 [label="0"];
    Xebdcabd9f1c41329_3 -> Xebdcabd9f1c41329_2 [label="other"];
    Xebdcabd9f1c41329_3 [label="3 <- Le(cp(1), const ?_u8)\lSwitchInt mv(3)\l"];
    Xebdcabd9f1c41329_4 [label="Return\l"];
  }
  subgraph cluster_18 {
    label="<spl_token_interface::sta\nte::multisig::Multisig \nas \nspl_token_interface::stat\ne::Initializable>::is_ini\ntialized";
    style="filled";
    color=lightgray;
    node_19 [label="LOCALS\l0 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l1 = &spl_token_interface::state::multisig::Multisig\l2 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    Xc0a20ec803e63886_0 -> Xc0a20ec803e63886_3 [label="0"];
    Xc0a20ec803e63886_0 -> Xc0a20ec803e63886_2 [label="1"];
    Xc0a20ec803e63886_0 -> Xc0a20ec803e63886_1 [label="other"];
    Xc0a20ec803e63886_0 [label="SwitchInt cp((*1).2)\l"];
    Xc0a20ec803e63886_1 -> Xc0a20ec803e63886_4;
    Xc0a20ec803e63886_1 [label="2 <- Adt{3} ()\l0 <- Adt{1} (mv(2))\lGoto\l"];
    Xc0a20ec803e63886_2 -> Xc0a20ec803e63886_4;
    Xc0a20ec803e63886_2 [label="0 <- Adt{0} (const bool)\lGoto\l"];
    Xc0a20ec803e63886_3 -> Xc0a20ec803e63886_4;
    Xc0a20ec803e63886_3 [label="0 <- Adt{0} (const bool)\lGoto\l"];
    Xc0a20ec803e63886_4 [label="Return\l"];
  }
  subgraph cluster_20 {
    label="<core::iter::Enumerate<co\nre::slice::Iter<'_, \n[u8; \n32]>> \nas \ncore::iter::Iterator>::ne\nxt";
    style="filled";
    color=lightgray;
    node_21 [label="LOCALS\l0 = core::option::Option<(usize, &[u8; 32])>\l1 = &mut core::iter::Enumerate<core::slice::Iter<'_, [u8; 32]>>\l2 = &[u8; 32]\l3 = core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, &[u8; 32]>\l4 = core::option::Option<&[u8; 32]>\l5 = &mut core::slice::Iter<'_, [u8; 32]>\l6 = &[u8; 32]\l7 = usize\l8 = (usize, bool)\l9 = (usize, &[u8; 32])\l10 = &[u8; 32]\l11 = isize\l12 = &[u8; 32]\l", style="filled", color=palegreen3];
    Xd25aa876b3cae8ac_0 -> Xd25aa876b3cae8ac_1 [label="4"];
    Xd25aa876b3cae8ac_0 [label="Storage Live _2\lStorage Live _3\lStorage Live _4\lStorage Live _5\l5 <- &mut (*1).0\lCall\l"];
    Xd25aa876b3cae8ac_1 -> Xd25aa876b3cae8ac_7 [label="0"];
    Xd25aa876b3cae8ac_1 -> Xd25aa876b3cae8ac_8 [label="1"];
    Xd25aa876b3cae8ac_1 -> Xd25aa876b3cae8ac_2 [label="other"];
    Xd25aa876b3cae8ac_1 [label="Storage Dead _5\lStorage Live _11\lStorage Live _12\l11 <- Discriminant(4)\lSwitchInt mv(11)\l"];
    Xd25aa876b3cae8ac_2 [label="Unreachable\l"];
    Xd25aa876b3cae8ac_3 -> Xd25aa876b3cae8ac_4;
    Xd25aa876b3cae8ac_3 [label="(*1).1 <- Use(mv(8.0))\lStorage Live _9\lStorage Live _10\l10 <- Use(mv(2))\l9 <- Tuple (cp(7), mv(10))\lStorage Dead _10\l0 <- Adt{1} (mv(9))\lStorage Dead _9\lStorage Dead _2\lGoto\l"];
    Xd25aa876b3cae8ac_4 [label="Return\l"];
    Xd25aa876b3cae8ac_5 -> Xd25aa876b3cae8ac_6;
    Xd25aa876b3cae8ac_5 [label="Drop 2\l"];
    Xd25aa876b3cae8ac_6 [label="Resume\l"];
    Xd25aa876b3cae8ac_7 -> Xd25aa876b3cae8ac_4;
    Xd25aa876b3cae8ac_7 [label="Storage Dead _12\lStorage Dead _11\lStorage Dead _4\l0 <- Adt{0} ()\lStorage Dead _3\lStorage Dead _2\lGoto\l"];
    Xd25aa876b3cae8ac_8 -> Xd25aa876b3cae8ac_5 [label="Cleanup"];
    Xd25aa876b3cae8ac_8 -> Xd25aa876b3cae8ac_3;
    Xd25aa876b3cae8ac_8 [label="12 <- Use(mv((4 as variant 1).0))\l3 <- Adt{0} (cp(12))\lStorage Dead _12\lStorage Dead _11\lStorage Dead _4\lStorage Live _6\l6 <- Use(mv((3 as variant 0).0))\l2 <- Use(mv(6))\lStorage Dead _6\lStorage Dead _3\l7 <- Use(cp((*1).1))\l8 <- chkd-Add(cp((*1).1), const ?_usize)\lAssert mv(8.1) == false\l"];
  }
  Xd25aa876b3cae8ac_0 -> Xc0eec84b93d252df_0 [label="mv(5)"];
  subgraph cluster_22 {
    label="<core::ops::RangeFrom<usi\nze> \nas \ncore::slice::SliceIndex<[\npinocchio::account_info::\nAccountInfo]>>::index";
    style="filled";
    color=lightgray;
    node_23 [label="LOCALS\l0 = &[pinocchio::account_info::AccountInfo]\l1 = core::ops::RangeFrom<usize>\l2 = &[pinocchio::account_info::AccountInfo]\l3 = bool\l4 = usize\l5 = usize\l6 = !\l7 = *const [pinocchio::account_info::AccountInfo]\l8 = *const [pinocchio::account_info::AccountInfo]\l9 = bool\l10 = ()\l11 = usize\l12 = *const pinocchio::account_info::AccountInfo\l13 = *const pinocchio::account_info::AccountInfo\l", style="filled", color=palegreen3];
    Xb10705ddd1b146e2_0 -> Xb10705ddd1b146e2_2 [label="0"];
    Xb10705ddd1b146e2_0 -> Xb10705ddd1b146e2_1 [label="other"];
    Xb10705ddd1b146e2_0 [label="Storage Live _3\l4 <- Use(cp(1.0))\l5 <- PtrMetadata(cp(2))\l3 <- Gt(cp(4), cp(5))\lSwitchInt mv(3)\l"];
    Xb10705ddd1b146e2_1 [label="Call\l"];
    Xb10705ddd1b146e2_2 -> Xb10705ddd1b146e2_4 [label="0"];
    Xb10705ddd1b146e2_2 -> Xb10705ddd1b146e2_3 [label="other"];
    Xb10705ddd1b146e2_2 [label="Storage Dead _3\lStorage Live _7\lStorage Live _8\l8 <- &raw (*2)\lStorage Live _11\lStorage Live _9\l9 <- UbChecks :: bool\lSwitchInt mv(9)\l"];
    Xb10705ddd1b146e2_3 -> Xb10705ddd1b146e2_4 [label="10"];
    Xb10705ddd1b146e2_3 [label="Call\l"];
    Xb10705ddd1b146e2_4 [label="Storage Dead _9\l11 <- SubUnchecked(cp(5), cp(4))\lStorage Live _12\lStorage Live _13\l13 <- Cast-PtrToPtr cp(8)\l12 <- Offset(cp(13), cp(4))\lStorage Dead _13\l7 <- *([pinocchio::account_info::AccountInfo]) (cp(12), cp(11))\lStorage Dead _12\lStorage Dead _11\lStorage Dead _8\l0 <- & (*7)\lStorage Dead _7\lReturn\l"];
  }
  Xb10705ddd1b146e2_1 -> Xb7bf8399f7d46827_0 [label="mv(4),mv(5)"];
  Xb10705ddd1b146e2_3 -> X9ee05f346622e41_0 [label="cp(4),cp(5),cp(5)"];
  subgraph cluster_24 {
    label="<core::ops::RangeFrom<usi\nze> \nas \ncore::slice::SliceIndex<[\nu8]>>::index";
    style="filled";
    color=lightgray;
    node_25 [label="LOCALS\l0 = &[u8]\l1 = core::ops::RangeFrom<usize>\l2 = &[u8]\l3 = bool\l4 = usize\l5 = usize\l6 = !\l7 = *const [u8]\l8 = *const [u8]\l9 = bool\l10 = ()\l11 = usize\l12 = *const u8\l13 = *const u8\l", style="filled", color=palegreen3];
    Xdbbcf3965a56e3eb_0 -> Xdbbcf3965a56e3eb_2 [label="0"];
    Xdbbcf3965a56e3eb_0 -> Xdbbcf3965a56e3eb_1 [label="other"];
    Xdbbcf3965a56e3eb_0 [label="Storage Live _3\l4 <- Use(cp(1.0))\l5 <- PtrMetadata(cp(2))\l3 <- Gt(cp(4), cp(5))\lSwitchInt mv(3)\l"];
    Xdbbcf3965a56e3eb_1 [label="Call\l"];
    Xdbbcf3965a56e3eb_2 -> Xdbbcf3965a56e3eb_4 [label="0"];
    Xdbbcf3965a56e3eb_2 -> Xdbbcf3965a56e3eb_3 [label="other"];
    Xdbbcf3965a56e3eb_2 [label="Storage Dead _3\lStorage Live _7\lStorage Live _8\l8 <- &raw (*2)\lStorage Live _11\lStorage Live _9\l9 <- UbChecks :: bool\lSwitchInt mv(9)\l"];
    Xdbbcf3965a56e3eb_3 -> Xdbbcf3965a56e3eb_4 [label="10"];
    Xdbbcf3965a56e3eb_3 [label="Call\l"];
    Xdbbcf3965a56e3eb_4 [label="Storage Dead _9\l11 <- SubUnchecked(cp(5), cp(4))\lStorage Live _12\lStorage Live _13\l13 <- Cast-PtrToPtr cp(8)\l12 <- Offset(cp(13), cp(4))\lStorage Dead _13\l7 <- *([u8]) (cp(12), cp(11))\lStorage Dead _12\lStorage Dead _11\lStorage Dead _8\l0 <- & (*7)\lStorage Dead _7\lReturn\l"];
  }
  Xdbbcf3965a56e3eb_1 -> Xb7bf8399f7d46827_0 [label="mv(4),mv(5)"];
  Xdbbcf3965a56e3eb_3 -> X9ee05f346622e41_0 [label="cp(4),cp(5),cp(5)"];
  subgraph cluster_26 {
    label="<core::result::Result<&mu\nt \nspl_token_interface::stat\ne::account::Account, \npinocchio::program_error:\n:ProgramError> \nas \ncore::ops::FromResidual<c\nore::result::Result<core:\n:convert::Infallible, \npinocchio::program_error:\n:ProgramError>>>::from_re\nsidual";
    style="filled";
    color=lightgray;
    node_27 [label="LOCALS\l0 = core::result::Result<&mut spl_token_interface::state::account::Account, pinocchio::program_error::ProgramError>\l1 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l2 = pinocchio::program_error::ProgramError\l3 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X9ee7585b68fa4be9_0 -> X9ee7585b68fa4be9_1 [label="3"];
    X9ee7585b68fa4be9_0 [label="2 <- Use(mv((1 as variant 1).0))\lStorage Live _3\lCall\l"];
    X9ee7585b68fa4be9_1 [label="0 <- Adt{1} (mv(3))\lStorage Dead _3\lReturn\l"];
  }
  X9ee7585b68fa4be9_0 -> X6ab29abaf30a0fd0_0 [label="mv(2)"];
  subgraph cluster_28 {
    label="<core::result::Result<&mu\nt \nspl_token_interface::stat\ne::mint::Mint, \npinocchio::program_error:\n:ProgramError> \nas \ncore::ops::FromResidual<c\nore::result::Result<core:\n:convert::Infallible, \npinocchio::program_error:\n:ProgramError>>>::from_re\nsidual";
    style="filled";
    color=lightgray;
    node_29 [label="LOCALS\l0 = core::result::Result<&mut spl_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l1 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l2 = pinocchio::program_error::ProgramError\l3 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X835b10b485beba29_0 -> X835b10b485beba29_1 [label="3"];
    X835b10b485beba29_0 [label="2 <- Use(mv((1 as variant 1).0))\lStorage Live _3\lCall\l"];
    X835b10b485beba29_1 [label="0 <- Adt{1} (mv(3))\lStorage Dead _3\lReturn\l"];
  }
  X835b10b485beba29_0 -> X6ab29abaf30a0fd0_0 [label="mv(2)"];
  subgraph cluster_30 {
    label="<core::result::Result<&sp\nl_token_interface::state:\n:multisig::Multisig, \npinocchio::program_error:\n:ProgramError> \nas \ncore::ops::FromResidual<c\nore::result::Result<core:\n:convert::Infallible, \npinocchio::program_error:\n:ProgramError>>>::from_re\nsidual";
    style="filled";
    color=lightgray;
    node_31 [label="LOCALS\l0 = core::result::Result<&spl_token_interface::state::multisig::Multisig, pinocchio::program_error::ProgramError>\l1 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l2 = pinocchio::program_error::ProgramError\l3 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X9bfcfc31088730ea_0 -> X9bfcfc31088730ea_1 [label="3"];
    X9bfcfc31088730ea_0 [label="2 <- Use(mv((1 as variant 1).0))\lStorage Live _3\lCall\l"];
    X9bfcfc31088730ea_1 [label="0 <- Adt{1} (mv(3))\lStorage Dead _3\lReturn\l"];
  }
  X9bfcfc31088730ea_0 -> X6ab29abaf30a0fd0_0 [label="mv(2)"];
  subgraph cluster_32 {
    label="<core::result::Result<(),\n \npinocchio::program_error:\n:ProgramError> \nas \ncore::ops::FromResidual<c\nore::result::Result<core:\n:convert::Infallible, \nspl_token_interface::erro\nr::TokenError>>>::from_re\nsidual";
    style="filled";
    color=lightgray;
    node_33 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = core::result::Result<core::convert::Infallible, spl_token_interface::error::TokenError>\l2 = spl_token_interface::error::TokenError\l3 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X619ee3ba0019d783_0 -> X619ee3ba0019d783_1 [label="3"];
    X619ee3ba0019d783_0 [label="2 <- Use(mv((1 as variant 1).0))\lStorage Live _3\lCall\l"];
    X619ee3ba0019d783_1 [label="0 <- Adt{1} (mv(3))\lStorage Dead _3\lReturn\l"];
  }
  X619ee3ba0019d783_0 -> X2b52c3b21b79df6c_0 [label="mv(2)"];
  subgraph cluster_34 {
    label="spl_token_interface::stat\ne::load_unchecked::<spl_t\noken_interface::state::mu\nltisig::Multisig>";
    style="filled";
    color=lightgray;
    node_35 [label="LOCALS\l0 = core::result::Result<&spl_token_interface::state::multisig::Multisig, pinocchio::program_error::ProgramError>\l1 = &[u8]\l2 = bool\l3 = usize\l4 = pinocchio::program_error::ProgramError\l5 = &spl_token_interface::state::multisig::Multisig\l6 = *const spl_token_interface::state::multisig::Multisig\l7 = *const u8\l", style="filled", color=palegreen3];
    Xd5f84bc5573efcb_0 -> Xd5f84bc5573efcb_2 [label="0"];
    Xd5f84bc5573efcb_0 -> Xd5f84bc5573efcb_1 [label="other"];
    Xd5f84bc5573efcb_0 [label="3 <- PtrMetadata(cp(1))\l2 <- Ne(mv(3), const ?_usize)\lSwitchInt mv(2)\l"];
    Xd5f84bc5573efcb_1 -> Xd5f84bc5573efcb_4;
    Xd5f84bc5573efcb_1 [label="4 <- Adt{3} ()\l0 <- Adt{1} (mv(4))\lGoto\l"];
    Xd5f84bc5573efcb_2 -> Xd5f84bc5573efcb_3 [label="7"];
    Xd5f84bc5573efcb_2 [label="Call\l"];
    Xd5f84bc5573efcb_3 -> Xd5f84bc5573efcb_4;
    Xd5f84bc5573efcb_3 [label="6 <- Cast-PtrToPtr mv(7)\l5 <- & (*6)\l0 <- Adt{0} (cp(5))\lGoto\l"];
    Xd5f84bc5573efcb_4 [label="Return\l"];
  }
  Xd5f84bc5573efcb_2 -> X5e85acfe8a19755e_0 [label="cp(1)"];
  subgraph cluster_36 {
    label="spl_token_interface::stat\ne::load_mut_unchecked::<s\npl_token_interface::state\n::account::Account>";
    style="filled";
    color=lightgray;
    node_37 [label="LOCALS\l0 = core::result::Result<&mut spl_token_interface::state::account::Account, pinocchio::program_error::ProgramError>\l1 = &mut [u8]\l2 = bool\l3 = usize\l4 = &[u8]\l5 = pinocchio::program_error::ProgramError\l6 = &mut spl_token_interface::state::account::Account\l7 = *mut spl_token_interface::state::account::Account\l8 = *mut u8\l", style="filled", color=palegreen3];
    X49a43113cd3c5d44_0 -> X49a43113cd3c5d44_2 [label="0"];
    X49a43113cd3c5d44_0 -> X49a43113cd3c5d44_1 [label="other"];
    X49a43113cd3c5d44_0 [label="4 <- & (*1)\l3 <- PtrMetadata(mv(4))\l2 <- Ne(mv(3), const ?_usize)\lSwitchInt mv(2)\l"];
    X49a43113cd3c5d44_1 -> X49a43113cd3c5d44_4;
    X49a43113cd3c5d44_1 [label="5 <- Adt{3} ()\l0 <- Adt{1} (mv(5))\lGoto\l"];
    X49a43113cd3c5d44_2 -> X49a43113cd3c5d44_3 [label="8"];
    X49a43113cd3c5d44_2 [label="Call\l"];
    X49a43113cd3c5d44_3 -> X49a43113cd3c5d44_4;
    X49a43113cd3c5d44_3 [label="7 <- Cast-PtrToPtr mv(8)\l6 <- &mut (*7)\l0 <- Adt{0} (cp(6))\lGoto\l"];
    X49a43113cd3c5d44_4 [label="Return\l"];
  }
  X49a43113cd3c5d44_2 -> X8641c13e22843093_0 [label="cp(1)"];
  subgraph cluster_38 {
    label="spl_token_interface::stat\ne::load_mut_unchecked::<s\npl_token_interface::state\n::mint::Mint>";
    style="filled";
    color=lightgray;
    node_39 [label="LOCALS\l0 = core::result::Result<&mut spl_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l1 = &mut [u8]\l2 = bool\l3 = usize\l4 = &[u8]\l5 = pinocchio::program_error::ProgramError\l6 = &mut spl_token_interface::state::mint::Mint\l7 = *mut spl_token_interface::state::mint::Mint\l8 = *mut u8\l", style="filled", color=palegreen3];
    X8030af829a1040e9_0 -> X8030af829a1040e9_2 [label="0"];
    X8030af829a1040e9_0 -> X8030af829a1040e9_1 [label="other"];
    X8030af829a1040e9_0 [label="4 <- & (*1)\l3 <- PtrMetadata(mv(4))\l2 <- Ne(mv(3), const ?_usize)\lSwitchInt mv(2)\l"];
    X8030af829a1040e9_1 -> X8030af829a1040e9_4;
    X8030af829a1040e9_1 [label="5 <- Adt{3} ()\l0 <- Adt{1} (mv(5))\lGoto\l"];
    X8030af829a1040e9_2 -> X8030af829a1040e9_3 [label="8"];
    X8030af829a1040e9_2 [label="Call\l"];
    X8030af829a1040e9_3 -> X8030af829a1040e9_4;
    X8030af829a1040e9_3 [label="7 <- Cast-PtrToPtr mv(8)\l6 <- &mut (*7)\l0 <- Adt{0} (cp(6))\lGoto\l"];
    X8030af829a1040e9_4 [label="Return\l"];
  }
  X8030af829a1040e9_2 -> X8641c13e22843093_0 [label="cp(1)"];
  subgraph cluster_40 {
    label="spl_token_interface::stat\ne::load::<spl_token_inter\nface::state::multisig::Mu\nltisig>";
    style="filled";
    color=lightgray;
    node_41 [label="LOCALS\l0 = core::result::Result<&spl_token_interface::state::multisig::Multisig, pinocchio::program_error::ProgramError>\l1 = &[u8]\l2 = core::result::Result<&spl_token_interface::state::multisig::Multisig, pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    X63dfb24998957236_0 -> X63dfb24998957236_1 [label="2"];
    X63dfb24998957236_0 [label="Call\l"];
    X63dfb24998957236_1 -> X63dfb24998957236_2 [label="0"];
    X63dfb24998957236_1 [label="Call\l"];
    X63dfb24998957236_2 [label="Return\l"];
  }
  X63dfb24998957236_0 -> Xd5f84bc5573efcb_0 [label="cp(1)"];
  X63dfb24998957236_1 -> Xe169004e943718b6_0 [label="mv(2),const {closure@spl_token_interface::state::load<spl_token_interface::state::multisig::Multisig>::{closure#0}}"];
  subgraph cluster_42 {
    label="spl_token_interface::stat\ne::load::<spl_token_inter\nface::state::multisig::Mu\nltisig>::{closure#0}";
    style="filled";
    color=lightgray;
    node_43 [label="LOCALS\l0 = core::result::Result<&spl_token_interface::state::multisig::Multisig, pinocchio::program_error::ProgramError>\l1 = {closure@spl_token_interface::state::load<spl_token_interface::state::multisig::Multisig>::{closure#0}}\l2 = &spl_token_interface::state::multisig::Multisig\l3 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, bool>\l4 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l5 = isize\l6 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l7 = bool\l8 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X4bf3cf34b753f058_0 -> X4bf3cf34b753f058_1 [label="4"];
    X4bf3cf34b753f058_0 [label="Call\l"];
    X4bf3cf34b753f058_1 -> X4bf3cf34b753f058_2 [label="3"];
    X4bf3cf34b753f058_1 [label="Call\l"];
    X4bf3cf34b753f058_2 -> X4bf3cf34b753f058_4 [label="0"];
    X4bf3cf34b753f058_2 -> X4bf3cf34b753f058_5 [label="1"];
    X4bf3cf34b753f058_2 -> X4bf3cf34b753f058_3 [label="other"];
    X4bf3cf34b753f058_2 [label="5 <- Discriminant(3)\lSwitchInt mv(5)\l"];
    X4bf3cf34b753f058_3 [label="Unreachable\l"];
    X4bf3cf34b753f058_4 -> X4bf3cf34b753f058_7 [label="0"];
    X4bf3cf34b753f058_4 -> X4bf3cf34b753f058_6 [label="other"];
    X4bf3cf34b753f058_4 [label="7 <- Use(cp((3 as variant 0).0))\lSwitchInt cp(7)\l"];
    X4bf3cf34b753f058_5 -> X4bf3cf34b753f058_8 [label="0"];
    X4bf3cf34b753f058_5 [label="6 <- Use(mv((3 as variant 1).0))\lCall\l"];
    X4bf3cf34b753f058_6 -> X4bf3cf34b753f058_8;
    X4bf3cf34b753f058_6 [label="0 <- Adt{0} (cp(2))\lGoto\l"];
    X4bf3cf34b753f058_7 -> X4bf3cf34b753f058_8;
    X4bf3cf34b753f058_7 [label="8 <- Adt{9} ()\l0 <- Adt{1} (mv(8))\lGoto\l"];
    X4bf3cf34b753f058_8 [label="Return\l"];
  }
  X4bf3cf34b753f058_0 -> Xc0a20ec803e63886_0 [label="cp(2)"];
  X4bf3cf34b753f058_1 -> X94faba497d3a8d24_0 [label="mv(4)"];
  X4bf3cf34b753f058_5 -> X9bfcfc31088730ea_0 [label="mv(6)"];
  subgraph cluster_44 {
    label="spl_token_interface::stat\ne::mint::Mint::set_supply";
    style="filled";
    color=lightgray;
    node_45 [label="LOCALS\l0 = ()\l1 = &mut spl_token_interface::state::mint::Mint\l2 = u64\l3 = [u8; 8]\l", style="filled", color=palegreen3];
    X9072ae926fb28797_0 -> X9072ae926fb28797_1 [label="3"];
    X9072ae926fb28797_0 [label="Call\l"];
    X9072ae926fb28797_1 [label="(*1).1 <- Use(mv(3))\lReturn\l"];
  }
  X9072ae926fb28797_0 -> Xd9beafda37b4af63_0 [label="cp(2)"];
  subgraph cluster_46 {
    label="spl_token_interface::stat\ne::mint::Mint::mint_autho\nrity";
    style="filled";
    color=lightgray;
    node_47 [label="LOCALS\l0 = core::option::Option<&[u8; 32]>\l1 = &spl_token_interface::state::mint::Mint\l2 = u8\l3 = usize\l4 = usize\l5 = bool\l6 = &[u8; 32]\l", style="filled", color=palegreen3];
    Xed7a553ee817a9d7_0 -> Xed7a553ee817a9d7_1;
    Xed7a553ee817a9d7_0 [label="3 <- Use(const ?_usize)\l4 <- Use(const ?_usize)\l5 <- Lt(cp(3), cp(4))\lAssert mv(5) == true\l"];
    Xed7a553ee817a9d7_1 -> Xed7a553ee817a9d7_2 [label="1"];
    Xed7a553ee817a9d7_1 -> Xed7a553ee817a9d7_3 [label="other"];
    Xed7a553ee817a9d7_1 [label="2 <- Use(cp((*1).0.0[_3]))\lSwitchInt mv(2)\l"];
    Xed7a553ee817a9d7_2 -> Xed7a553ee817a9d7_4;
    Xed7a553ee817a9d7_2 [label="6 <- & (*1).0.1\l0 <- Adt{1} (cp(6))\lGoto\l"];
    Xed7a553ee817a9d7_3 -> Xed7a553ee817a9d7_4;
    Xed7a553ee817a9d7_3 [label="0 <- Adt{0} ()\lGoto\l"];
    Xed7a553ee817a9d7_4 [label="Return\l"];
  }
  subgraph cluster_48 {
    label="spl_token_interface::stat\ne::mint::Mint::supply";
    style="filled";
    color=lightgray;
    node_49 [label="LOCALS\l0 = u64\l1 = &spl_token_interface::state::mint::Mint\l2 = [u8; 8]\l", style="filled", color=palegreen3];
    Xb0f37d884f3a7efa_0 -> Xb0f37d884f3a7efa_1 [label="0"];
    Xb0f37d884f3a7efa_0 [label="2 <- Use(cp((*1).1))\lCall\l"];
    Xb0f37d884f3a7efa_1 [label="Return\l"];
  }
  Xb0f37d884f3a7efa_0 -> X4b040c9530995baf_0 [label="mv(2)"];
  subgraph cluster_50 {
    label="spl_token_interface::stat\ne::account::Account::set_\namount";
    style="filled";
    color=lightgray;
    node_51 [label="LOCALS\l0 = ()\l1 = &mut spl_token_interface::state::account::Account\l2 = u64\l3 = [u8; 8]\l", style="filled", color=palegreen3];
    X1c99c2b6b9095250_0 -> X1c99c2b6b9095250_1 [label="3"];
    X1c99c2b6b9095250_0 [label="Call\l"];
    X1c99c2b6b9095250_1 [label="(*1).2 <- Use(mv(3))\lReturn\l"];
  }
  X1c99c2b6b9095250_0 -> Xd9beafda37b4af63_0 [label="cp(2)"];
  subgraph cluster_52 {
    label="spl_token_interface::stat\ne::account::Account::acco\nunt_state";
    style="filled";
    color=lightgray;
    node_53 [label="LOCALS\l0 = core::result::Result<spl_token_interface::state::account_state::AccountState, pinocchio::program_error::ProgramError>\l1 = &spl_token_interface::state::account::Account\l2 = u8\l", style="filled", color=palegreen3];
    Xd5c95dfb9809593b_0 -> Xd5c95dfb9809593b_1 [label="0"];
    Xd5c95dfb9809593b_0 [label="2 <- Use(cp((*1).4))\lCall\l"];
    Xd5c95dfb9809593b_1 [label="Return\l"];
  }
  Xd5c95dfb9809593b_0 -> Xebdcabd9f1c41329_0 [label="mv(2)"];
  subgraph cluster_54 {
    label="spl_token_interface::stat\ne::account::Account::amou\nnt";
    style="filled";
    color=lightgray;
    node_55 [label="LOCALS\l0 = u64\l1 = &spl_token_interface::state::account::Account\l2 = [u8; 8]\l", style="filled", color=palegreen3];
    Xfeb9911cbc7a7b7a_0 -> Xfeb9911cbc7a7b7a_1 [label="0"];
    Xfeb9911cbc7a7b7a_0 [label="2 <- Use(cp((*1).2))\lCall\l"];
    Xfeb9911cbc7a7b7a_1 [label="Return\l"];
  }
  Xfeb9911cbc7a7b7a_0 -> X4b040c9530995baf_0 [label="mv(2)"];
  subgraph cluster_56 {
    label="spl_token_interface::stat\ne::account::Account::is_f\nrozen";
    style="filled";
    color=lightgray;
    node_57 [label="LOCALS\l0 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l1 = &spl_token_interface::state::account::Account\l2 = core::result::Result<spl_token_interface::state::account_state::AccountState, pinocchio::program_error::ProgramError>\l3 = u8\l", style="filled", color=palegreen3];
    X38533238a96500f8_0 -> X38533238a96500f8_1 [label="2"];
    X38533238a96500f8_0 [label="3 <- Use(cp((*1).4))\lCall\l"];
    X38533238a96500f8_1 -> X38533238a96500f8_2 [label="0"];
    X38533238a96500f8_1 [label="Call\l"];
    X38533238a96500f8_2 [label="Return\l"];
  }
  X38533238a96500f8_0 -> Xebdcabd9f1c41329_0 [label="mv(3)"];
  X38533238a96500f8_1 -> X84726243ee452bb7_0 [label="mv(2),const {closure@spl_token_interface::state::account::Account::is_frozen::{closure#0}}"];
  subgraph cluster_58 {
    label="spl_token_interface::stat\ne::account::Account::is_f\nrozen::{closure#0}";
    style="filled";
    color=lightgray;
    node_59 [label="LOCALS\l0 = bool\l1 = {closure@spl_token_interface::state::account::Account::is_frozen::{closure#0}}\l2 = spl_token_interface::state::account_state::AccountState\l3 = &spl_token_interface::state::account_state::AccountState\l4 = &spl_token_interface::state::account_state::AccountState\l", style="filled", color=palegreen3];
    X305495a33c194900_0 -> X305495a33c194900_1 [label="0"];
    X305495a33c194900_0 [label="3 <- & 2\l4 <- Use(const &spl_token_interface::state::account_state::AccountState)\lCall\l"];
    X305495a33c194900_1 [label="Return\l"];
  }
  X305495a33c194900_0 -> X92c90d3df5004379_0 [label="mv(3),mv(4)"];
  subgraph cluster_60 {
    label="spl_token_interface::stat\ne::account::Account::is_n\native";
    style="filled";
    color=lightgray;
    node_61 [label="LOCALS\l0 = bool\l1 = &spl_token_interface::state::account::Account\l2 = u8\l3 = usize\l4 = usize\l5 = bool\l", style="filled", color=palegreen3];
    X439fceefbd0e681_0 -> X439fceefbd0e681_1;
    X439fceefbd0e681_0 [label="3 <- Use(const ?_usize)\l4 <- Use(const ?_usize)\l5 <- Lt(cp(3), cp(4))\lAssert mv(5) == true\l"];
    X439fceefbd0e681_1 [label="2 <- Use(cp((*1).5[_3]))\l0 <- Eq(mv(2), const ?_u8)\lReturn\l"];
  }
  subgraph cluster_62 {
    label="spl_token_interface::stat\ne::load_mut::<spl_token_i\nnterface::state::account:\n:Account>";
    style="filled";
    color=lightgray;
    node_63 [label="LOCALS\l0 = core::result::Result<&mut spl_token_interface::state::account::Account, pinocchio::program_error::ProgramError>\l1 = &mut [u8]\l2 = core::result::Result<&mut spl_token_interface::state::account::Account, pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    X72b69cd7b34c68aa_0 -> X72b69cd7b34c68aa_1 [label="2"];
    X72b69cd7b34c68aa_0 [label="Call\l"];
    X72b69cd7b34c68aa_1 -> X72b69cd7b34c68aa_2 [label="0"];
    X72b69cd7b34c68aa_1 [label="Call\l"];
    X72b69cd7b34c68aa_2 [label="Return\l"];
  }
  X72b69cd7b34c68aa_0 -> X49a43113cd3c5d44_0 [label="cp(1)"];
  X72b69cd7b34c68aa_1 -> Xcceea671109cd764_0 [label="mv(2),const {closure@spl_token_interface::state::load_mut<spl_token_interface::state::account::Account>::{closure#0}}"];
  subgraph cluster_64 {
    label="spl_token_interface::stat\ne::load_mut::<spl_token_i\nnterface::state::mint::Mi\nnt>";
    style="filled";
    color=lightgray;
    node_65 [label="LOCALS\l0 = core::result::Result<&mut spl_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l1 = &mut [u8]\l2 = core::result::Result<&mut spl_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    Xf62c358491e2a13c_0 -> Xf62c358491e2a13c_1 [label="2"];
    Xf62c358491e2a13c_0 [label="Call\l"];
    Xf62c358491e2a13c_1 -> Xf62c358491e2a13c_2 [label="0"];
    Xf62c358491e2a13c_1 [label="Call\l"];
    Xf62c358491e2a13c_2 [label="Return\l"];
  }
  Xf62c358491e2a13c_0 -> X8030af829a1040e9_0 [label="cp(1)"];
  Xf62c358491e2a13c_1 -> Xf8b5baf5b068f398_0 [label="mv(2),const {closure@spl_token_interface::state::load_mut<spl_token_interface::state::mint::Mint>::{closure#0}}"];
  subgraph cluster_66 {
    label="spl_token_interface::stat\ne::load_mut::<spl_token_i\nnterface::state::account:\n:Account>::{closure#0}";
    style="filled";
    color=lightgray;
    node_67 [label="LOCALS\l0 = core::result::Result<&mut spl_token_interface::state::account::Account, pinocchio::program_error::ProgramError>\l1 = {closure@spl_token_interface::state::load_mut<spl_token_interface::state::account::Account>::{closure#0}}\l2 = &mut spl_token_interface::state::account::Account\l3 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, bool>\l4 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l5 = &spl_token_interface::state::account::Account\l6 = isize\l7 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l8 = bool\l9 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X17bee11f5c7b336b_0 -> X17bee11f5c7b336b_1 [label="4"];
    X17bee11f5c7b336b_0 [label="5 <- & (*2)\lCall\l"];
    X17bee11f5c7b336b_1 -> X17bee11f5c7b336b_2 [label="3"];
    X17bee11f5c7b336b_1 [label="Call\l"];
    X17bee11f5c7b336b_2 -> X17bee11f5c7b336b_4 [label="0"];
    X17bee11f5c7b336b_2 -> X17bee11f5c7b336b_5 [label="1"];
    X17bee11f5c7b336b_2 -> X17bee11f5c7b336b_3 [label="other"];
    X17bee11f5c7b336b_2 [label="6 <- Discriminant(3)\lSwitchInt mv(6)\l"];
    X17bee11f5c7b336b_3 [label="Unreachable\l"];
    X17bee11f5c7b336b_4 -> X17bee11f5c7b336b_7 [label="0"];
    X17bee11f5c7b336b_4 -> X17bee11f5c7b336b_6 [label="other"];
    X17bee11f5c7b336b_4 [label="8 <- Use(cp((3 as variant 0).0))\lSwitchInt cp(8)\l"];
    X17bee11f5c7b336b_5 -> X17bee11f5c7b336b_8 [label="0"];
    X17bee11f5c7b336b_5 [label="7 <- Use(mv((3 as variant 1).0))\lCall\l"];
    X17bee11f5c7b336b_6 -> X17bee11f5c7b336b_8;
    X17bee11f5c7b336b_6 [label="0 <- Adt{0} (mv(2))\lGoto\l"];
    X17bee11f5c7b336b_7 -> X17bee11f5c7b336b_8;
    X17bee11f5c7b336b_7 [label="9 <- Adt{9} ()\l0 <- Adt{1} (mv(9))\lGoto\l"];
    X17bee11f5c7b336b_8 [label="Return\l"];
  }
  X17bee11f5c7b336b_0 -> X51b146e3c692f3b3_0 [label="mv(5)"];
  X17bee11f5c7b336b_1 -> X94faba497d3a8d24_0 [label="mv(4)"];
  X17bee11f5c7b336b_5 -> X9ee7585b68fa4be9_0 [label="mv(7)"];
  subgraph cluster_68 {
    label="spl_token_interface::stat\ne::load_mut::<spl_token_i\nnterface::state::mint::Mi\nnt>::{closure#0}";
    style="filled";
    color=lightgray;
    node_69 [label="LOCALS\l0 = core::result::Result<&mut spl_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l1 = {closure@spl_token_interface::state::load_mut<spl_token_interface::state::mint::Mint>::{closure#0}}\l2 = &mut spl_token_interface::state::mint::Mint\l3 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, bool>\l4 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l5 = &spl_token_interface::state::mint::Mint\l6 = isize\l7 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l8 = bool\l9 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X738dd283b6e72ce8_0 -> X738dd283b6e72ce8_1 [label="4"];
    X738dd283b6e72ce8_0 [label="5 <- & (*2)\lCall\l"];
    X738dd283b6e72ce8_1 -> X738dd283b6e72ce8_2 [label="3"];
    X738dd283b6e72ce8_1 [label="Call\l"];
    X738dd283b6e72ce8_2 -> X738dd283b6e72ce8_4 [label="0"];
    X738dd283b6e72ce8_2 -> X738dd283b6e72ce8_5 [label="1"];
    X738dd283b6e72ce8_2 -> X738dd283b6e72ce8_3 [label="other"];
    X738dd283b6e72ce8_2 [label="6 <- Discriminant(3)\lSwitchInt mv(6)\l"];
    X738dd283b6e72ce8_3 [label="Unreachable\l"];
    X738dd283b6e72ce8_4 -> X738dd283b6e72ce8_7 [label="0"];
    X738dd283b6e72ce8_4 -> X738dd283b6e72ce8_6 [label="other"];
    X738dd283b6e72ce8_4 [label="8 <- Use(cp((3 as variant 0).0))\lSwitchInt cp(8)\l"];
    X738dd283b6e72ce8_5 -> X738dd283b6e72ce8_8 [label="0"];
    X738dd283b6e72ce8_5 [label="7 <- Use(mv((3 as variant 1).0))\lCall\l"];
    X738dd283b6e72ce8_6 -> X738dd283b6e72ce8_8;
    X738dd283b6e72ce8_6 [label="0 <- Adt{0} (mv(2))\lGoto\l"];
    X738dd283b6e72ce8_7 -> X738dd283b6e72ce8_8;
    X738dd283b6e72ce8_7 [label="9 <- Adt{9} ()\l0 <- Adt{1} (mv(9))\lGoto\l"];
    X738dd283b6e72ce8_8 [label="Return\l"];
  }
  X738dd283b6e72ce8_0 -> Xfda868f8ceb54b0b_0 [label="mv(5)"];
  X738dd283b6e72ce8_1 -> X94faba497d3a8d24_0 [label="mv(4)"];
  X738dd283b6e72ce8_5 -> X835b10b485beba29_0 [label="mv(7)"];
  subgraph cluster_70 {
    label="entrypoint::process_instr\nuction";
    style="filled";
    color=lightgray;
    node_71 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[u8; 32]\l2 = &[pinocchio::account_info::AccountInfo]\l3 = &[u8]\l4 = pinocchio::program_error::ProgramError\l5 = spl_token_interface::error::TokenError\l6 = &u8\l7 = &[u8]\l8 = usize\l9 = bool\l10 = core::result::Result<(), pinocchio::program_error::ProgramError>\l11 = u8\l12 = core::result::Result<(), pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    Xf71ee158856918bf_0 -> Xf71ee158856918bf_3 [label="0"];
    Xf71ee158856918bf_0 -> Xf71ee158856918bf_2 [label="other"];
    Xf71ee158856918bf_0 [label="8 <- Len((*3))\l9 <- Ge(mv(8), const ?_usize)\lSwitchInt mv(9)\l"];
    Xf71ee158856918bf_1 -> Xf71ee158856918bf_7;
    Xf71ee158856918bf_1 [label="0 <- Adt{1} (mv(4))\lGoto\l"];
    Xf71ee158856918bf_2 -> Xf71ee158856918bf_4 [label="255"];
    Xf71ee158856918bf_2 -> Xf71ee158856918bf_5 [label="other"];
    Xf71ee158856918bf_2 [label="6 <- & (*3)[0]\l7 <- & (*3)[1..-0]\l11 <- Use(cp((*6)))\lSwitchInt mv(11)\l"];
    Xf71ee158856918bf_3 -> Xf71ee158856918bf_1 [label="4"];
    Xf71ee158856918bf_3 [label="5 <- Adt{12} ()\lCall\l"];
    Xf71ee158856918bf_4 -> Xf71ee158856918bf_6 [label="10"];
    Xf71ee158856918bf_4 [label="Call\l"];
    Xf71ee158856918bf_5 -> Xf71ee158856918bf_6 [label="10"];
    Xf71ee158856918bf_5 [label="Call\l"];
    Xf71ee158856918bf_6 -> Xf71ee158856918bf_7 [label="0"];
    Xf71ee158856918bf_6 [label="12 <- Use(mv(10))\lCall\l"];
    Xf71ee158856918bf_7 [label="Return\l"];
  }
  Xf71ee158856918bf_3 -> X3e3db5977da52381_0 [label="mv(5)"];
  Xf71ee158856918bf_4 -> Xfd5a8332d4d69684_0 [label="cp(2),cp(7)"];
  Xf71ee158856918bf_5 -> Xdb069c516746123a_0 [label="cp(2),cp(3)"];
  Xf71ee158856918bf_6 -> X960a47fdaee9926a_0 [label="mv(12),const for<'a> fn(&'a pinocchio::program_error::ProgramError) {entrypoint::log_error}"];
  subgraph cluster_72 {
    label="entrypoint::inner_process\n_instruction";
    style="filled";
    color=lightgray;
    node_73 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[pinocchio::account_info::AccountInfo]\l2 = &[u8]\l3 = pinocchio::program_error::ProgramError\l4 = spl_token_interface::error::TokenError\l5 = &u8\l6 = &[u8]\l7 = usize\l8 = bool\l9 = u8\l", style="filled", color=palegreen3];
    Xdb069c516746123a_0 -> Xdb069c516746123a_3 [label="0"];
    Xdb069c516746123a_0 -> Xdb069c516746123a_2 [label="other"];
    Xdb069c516746123a_0 [label="7 <- Len((*2))\l8 <- Ge(mv(7), const ?_usize)\lSwitchInt mv(8)\l"];
    Xdb069c516746123a_1 -> Xdb069c516746123a_4;
    Xdb069c516746123a_1 [label="0 <- Adt{1} (mv(3))\lGoto\l"];
    Xdb069c516746123a_2 -> Xdb069c516746123a_4 [label="0"];
    Xdb069c516746123a_2 [label="5 <- & (*2)[0]\l6 <- & (*2)[1..-0]\l9 <- Use(cp((*5)))\lCall\l"];
    Xdb069c516746123a_3 -> Xdb069c516746123a_1 [label="3"];
    Xdb069c516746123a_3 [label="4 <- Adt{12} ()\lCall\l"];
    Xdb069c516746123a_4 [label="Return\l"];
  }
  Xdb069c516746123a_2 -> X2f381df63b2d4004_0 [label="cp(1),cp(6),cp(9)"];
  Xdb069c516746123a_3 -> X3e3db5977da52381_0 [label="mv(4)"];
  subgraph cluster_74 {
    label="entrypoint::test_process_\nmint_to_checked";
    style="filled";
    color=lightgray;
    node_75 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[pinocchio::account_info::AccountInfo; 3]\l2 = &[u8; 9]\l3 = {closure@p-token/src/entrypoint.rs:1220:23: 1220:51}\l4 = {closure@p-token/src/entrypoint.rs:1224:20: 1224:48}\l5 = u64\l6 = &spl_token_interface::state::mint::Mint\l7 = spl_token_interface::state::mint::Mint\l8 = &{closure@p-token/src/entrypoint.rs:1224:20: 1224:48}\l9 = (&pinocchio::account_info::AccountInfo,)\l10 = &pinocchio::account_info::AccountInfo\l11 = usize\l12 = usize\l13 = bool\l14 = u64\l15 = &spl_token_interface::state::account::Account\l16 = spl_token_interface::state::account::Account\l17 = &{closure@p-token/src/entrypoint.rs:1220:23: 1220:51}\l18 = (&pinocchio::account_info::AccountInfo,)\l19 = &pinocchio::account_info::AccountInfo\l20 = usize\l21 = usize\l22 = bool\l23 = core::result::Result<(), pinocchio::program_error::ProgramError>\l24 = &[pinocchio::account_info::AccountInfo]\l25 = &[u8]\l26 = bool\l27 = usize\l28 = &[u8]\l29 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l30 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l31 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l32 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l33 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l34 = bool\l35 = core::panicking::AssertKind\l36 = !\l37 = core::option::Option<core::fmt::Arguments<'_>>\l38 = bool\l39 = usize\l40 = &[pinocchio::account_info::AccountInfo]\l41 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l42 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l43 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l44 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l45 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l46 = bool\l47 = core::panicking::AssertKind\l48 = !\l49 = core::option::Option<core::fmt::Arguments<'_>>\l50 = bool\l51 = usize\l52 = &pinocchio::account_info::AccountInfo\l53 = usize\l54 = usize\l55 = bool\l56 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l57 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l58 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l59 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l60 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l61 = bool\l62 = core::panicking::AssertKind\l63 = !\l64 = core::option::Option<core::fmt::Arguments<'_>>\l65 = bool\l66 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l67 = &spl_token_interface::state::account::Account\l68 = spl_token_interface::state::account::Account\l69 = &{closure@p-token/src/entrypoint.rs:1220:23: 1220:51}\l70 = (&pinocchio::account_info::AccountInfo,)\l71 = &pinocchio::account_info::AccountInfo\l72 = usize\l73 = usize\l74 = bool\l75 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l76 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l77 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l78 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l79 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l80 = bool\l81 = core::panicking::AssertKind\l82 = !\l83 = core::option::Option<core::fmt::Arguments<'_>>\l84 = bool\l85 = &spl_token_interface::state::account_state::AccountState\l86 = spl_token_interface::state::account_state::AccountState\l87 = core::result::Result<spl_token_interface::state::account_state::AccountState, pinocchio::program_error::ProgramError>\l88 = &spl_token_interface::state::account::Account\l89 = spl_token_interface::state::account::Account\l90 = &{closure@p-token/src/entrypoint.rs:1220:23: 1220:51}\l91 = (&pinocchio::account_info::AccountInfo,)\l92 = &pinocchio::account_info::AccountInfo\l93 = usize\l94 = usize\l95 = bool\l96 = &spl_token_interface::state::account_state::AccountState\l97 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l98 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l99 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l100 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l101 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l102 = bool\l103 = core::panicking::AssertKind\l104 = !\l105 = core::option::Option<core::fmt::Arguments<'_>>\l106 = bool\l107 = &spl_token_interface::state::account::Account\l108 = spl_token_interface::state::account::Account\l109 = &{closure@p-token/src/entrypoint.rs:1220:23: 1220:51}\l110 = (&pinocchio::account_info::AccountInfo,)\l111 = &pinocchio::account_info::AccountInfo\l112 = usize\l113 = usize\l114 = bool\l115 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l116 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l117 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l118 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l119 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l120 = bool\l121 = core::panicking::AssertKind\l122 = !\l123 = core::option::Option<core::fmt::Arguments<'_>>\l124 = bool\l125 = &&[u8; 32]\l126 = &[u8; 32]\l127 = &pinocchio::account_info::AccountInfo\l128 = usize\l129 = usize\l130 = bool\l131 = &&[u8; 32]\l132 = &[u8; 32]\l133 = spl_token_interface::state::account::Account\l134 = &{closure@p-token/src/entrypoint.rs:1220:23: 1220:51}\l135 = (&pinocchio::account_info::AccountInfo,)\l136 = &pinocchio::account_info::AccountInfo\l137 = usize\l138 = usize\l139 = bool\l140 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l141 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l142 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l143 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l144 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l145 = bool\l146 = core::panicking::AssertKind\l147 = !\l148 = core::option::Option<core::fmt::Arguments<'_>>\l149 = bool\l150 = usize\l151 = &pinocchio::account_info::AccountInfo\l152 = usize\l153 = usize\l154 = bool\l155 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l156 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l157 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l158 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l159 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l160 = bool\l161 = core::panicking::AssertKind\l162 = !\l163 = core::option::Option<core::fmt::Arguments<'_>>\l164 = bool\l165 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l166 = &spl_token_interface::state::mint::Mint\l167 = spl_token_interface::state::mint::Mint\l168 = &{closure@p-token/src/entrypoint.rs:1224:20: 1224:48}\l169 = (&pinocchio::account_info::AccountInfo,)\l170 = &pinocchio::account_info::AccountInfo\l171 = usize\l172 = usize\l173 = bool\l174 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l175 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l176 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l177 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l178 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l179 = bool\l180 = core::panicking::AssertKind\l181 = !\l182 = core::option::Option<core::fmt::Arguments<'_>>\l183 = bool\l184 = u8\l185 = usize\l186 = usize\l187 = bool\l188 = u8\l189 = spl_token_interface::state::mint::Mint\l190 = &{closure@p-token/src/entrypoint.rs:1224:20: 1224:48}\l191 = (&pinocchio::account_info::AccountInfo,)\l192 = &pinocchio::account_info::AccountInfo\l193 = usize\l194 = usize\l195 = bool\l196 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l197 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l198 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l199 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l200 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l201 = bool\l202 = core::panicking::AssertKind\l203 = !\l204 = core::option::Option<core::fmt::Arguments<'_>>\l205 = bool\l206 = &core::option::Option<&[u8; 32]>\l207 = core::option::Option<&[u8; 32]>\l208 = &spl_token_interface::state::mint::Mint\l209 = spl_token_interface::state::mint::Mint\l210 = &{closure@p-token/src/entrypoint.rs:1224:20: 1224:48}\l211 = (&pinocchio::account_info::AccountInfo,)\l212 = &pinocchio::account_info::AccountInfo\l213 = usize\l214 = usize\l215 = bool\l216 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l217 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l218 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l219 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l220 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l221 = bool\l222 = core::panicking::AssertKind\l223 = !\l224 = core::option::Option<core::fmt::Arguments<'_>>\l225 = u64\l226 = [u8; 8]\l227 = *const [u8; 8]\l228 = *const u8\l229 = &[u8]\l230 = bool\l231 = &&[u8; 32]\l232 = &[u8; 32]\l233 = &pinocchio::account_info::AccountInfo\l234 = usize\l235 = usize\l236 = bool\l237 = &&[u8; 32]\l238 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l239 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l240 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l241 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l242 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l243 = bool\l244 = core::panicking::AssertKind\l245 = !\l246 = core::option::Option<core::fmt::Arguments<'_>>\l247 = bool\l248 = &&[u8; 32]\l249 = &[u8; 32]\l250 = &pinocchio::account_info::AccountInfo\l251 = usize\l252 = usize\l253 = bool\l254 = &&[u8; 32]\l255 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l256 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l257 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l258 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l259 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l260 = bool\l261 = core::panicking::AssertKind\l262 = !\l263 = core::option::Option<core::fmt::Arguments<'_>>\l264 = bool\l265 = u64\l266 = (u64, bool)\l267 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l268 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l269 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l270 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l271 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l272 = bool\l273 = core::panicking::AssertKind\l274 = !\l275 = core::option::Option<core::fmt::Arguments<'_>>\l276 = (&u64, &u64)\l277 = &u64\l278 = u64\l279 = &spl_token_interface::state::mint::Mint\l280 = spl_token_interface::state::mint::Mint\l281 = &{closure@p-token/src/entrypoint.rs:1224:20: 1224:48}\l282 = (&pinocchio::account_info::AccountInfo,)\l283 = &pinocchio::account_info::AccountInfo\l284 = usize\l285 = usize\l286 = bool\l287 = &u64\l288 = u64\l289 = (u64, bool)\l290 = &u64\l291 = &u64\l292 = bool\l293 = u64\l294 = u64\l295 = core::panicking::AssertKind\l296 = !\l297 = core::option::Option<core::fmt::Arguments<'_>>\l298 = (&u64, &u64)\l299 = &u64\l300 = u64\l301 = &spl_token_interface::state::account::Account\l302 = spl_token_interface::state::account::Account\l303 = &{closure@p-token/src/entrypoint.rs:1220:23: 1220:51}\l304 = (&pinocchio::account_info::AccountInfo,)\l305 = &pinocchio::account_info::AccountInfo\l306 = usize\l307 = usize\l308 = bool\l309 = &u64\l310 = u64\l311 = (u64, bool)\l312 = &u64\l313 = &u64\l314 = bool\l315 = u64\l316 = u64\l317 = core::panicking::AssertKind\l318 = !\l319 = core::option::Option<core::fmt::Arguments<'_>>\l320 = bool\l321 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l322 = !\l", style="filled", color=palegreen3];
    X894705e6e28dbe65_0 -> X894705e6e28dbe65_1;
    X894705e6e28dbe65_0 [label="8 <- & 4\l11 <- Use(const ?_usize)\l12 <- Use(const ?_usize)\l13 <- Lt(cp(11), cp(12))\lAssert mv(13) == true\l"];
    X894705e6e28dbe65_1 -> X894705e6e28dbe65_2 [label="7"];
    X894705e6e28dbe65_1 [label="10 <- & (*1)[_11]\l9 <- Tuple (cp(10))\lCall\l"];
    X894705e6e28dbe65_2 -> X894705e6e28dbe65_3 [label="5"];
    X894705e6e28dbe65_2 [label="6 <- & 7\lCall\l"];
    X894705e6e28dbe65_3 -> X894705e6e28dbe65_4;
    X894705e6e28dbe65_3 [label="17 <- & 3\l20 <- Use(const ?_usize)\l21 <- Use(const ?_usize)\l22 <- Lt(cp(20), cp(21))\lAssert mv(22) == true\l"];
    X894705e6e28dbe65_4 -> X894705e6e28dbe65_5 [label="16"];
    X894705e6e28dbe65_4 [label="19 <- & (*1)[_20]\l18 <- Tuple (cp(19))\lCall\l"];
    X894705e6e28dbe65_5 -> X894705e6e28dbe65_6 [label="14"];
    X894705e6e28dbe65_5 [label="15 <- & 16\lCall\l"];
    X894705e6e28dbe65_6 -> X894705e6e28dbe65_7 [label="23"];
    X894705e6e28dbe65_6 [label="24 <- Cast-PointerCoercion(Unsize) cp(1)\l25 <- Cast-PointerCoercion(Unsize) cp(2)\lCall\l"];
    X894705e6e28dbe65_7 -> X894705e6e28dbe65_11 [label="0"];
    X894705e6e28dbe65_7 -> X894705e6e28dbe65_8 [label="other"];
    X894705e6e28dbe65_7 [label="28 <- Cast-PointerCoercion(Unsize) cp(2)\l27 <- PtrMetadata(mv(28))\l26 <- Lt(mv(27), const ?_usize)\lSwitchInt mv(26)\l"];
    X894705e6e28dbe65_8 -> X894705e6e28dbe65_9 [label="34"];
    X894705e6e28dbe65_8 [label="30 <- & 23\l31 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l29 <- Tuple (mv(30), mv(31))\l32 <- Use(cp(29.0))\l33 <- Use(cp(29.1))\lCall\l"];
    X894705e6e28dbe65_9 -> X894705e6e28dbe65_10 [label="0"];
    X894705e6e28dbe65_9 -> X894705e6e28dbe65_122 [label="other"];
    X894705e6e28dbe65_9 [label="SwitchInt mv(34)\l"];
    X894705e6e28dbe65_10 [label="35 <- Adt{0} ()\l37 <- Adt{0} ()\lCall\l"];
    X894705e6e28dbe65_11 -> X894705e6e28dbe65_15 [label="0"];
    X894705e6e28dbe65_11 -> X894705e6e28dbe65_12 [label="other"];
    X894705e6e28dbe65_11 [label="40 <- Cast-PointerCoercion(Unsize) cp(1)\l39 <- PtrMetadata(mv(40))\l38 <- Lt(mv(39), const ?_usize)\lSwitchInt mv(38)\l"];
    X894705e6e28dbe65_12 -> X894705e6e28dbe65_13 [label="46"];
    X894705e6e28dbe65_12 [label="42 <- & 23\l43 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l41 <- Tuple (mv(42), mv(43))\l44 <- Use(cp(41.0))\l45 <- Use(cp(41.1))\lCall\l"];
    X894705e6e28dbe65_13 -> X894705e6e28dbe65_14 [label="0"];
    X894705e6e28dbe65_13 -> X894705e6e28dbe65_122 [label="other"];
    X894705e6e28dbe65_13 [label="SwitchInt mv(46)\l"];
    X894705e6e28dbe65_14 [label="47 <- Adt{0} ()\l49 <- Adt{0} ()\lCall\l"];
    X894705e6e28dbe65_15 -> X894705e6e28dbe65_16;
    X894705e6e28dbe65_15 [label="53 <- Use(const ?_usize)\l54 <- Use(const ?_usize)\l55 <- Lt(cp(53), cp(54))\lAssert mv(55) == true\l"];
    X894705e6e28dbe65_16 -> X894705e6e28dbe65_17 [label="51"];
    X894705e6e28dbe65_16 [label="52 <- & (*1)[_53]\lCall\l"];
    X894705e6e28dbe65_17 -> X894705e6e28dbe65_21 [label="0"];
    X894705e6e28dbe65_17 -> X894705e6e28dbe65_18 [label="other"];
    X894705e6e28dbe65_17 [label="50 <- Ne(mv(51), const ?_usize)\lSwitchInt mv(50)\l"];
    X894705e6e28dbe65_18 -> X894705e6e28dbe65_19 [label="61"];
    X894705e6e28dbe65_18 [label="57 <- & 23\l58 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l56 <- Tuple (mv(57), mv(58))\l59 <- Use(cp(56.0))\l60 <- Use(cp(56.1))\lCall\l"];
    X894705e6e28dbe65_19 -> X894705e6e28dbe65_20 [label="0"];
    X894705e6e28dbe65_19 -> X894705e6e28dbe65_122 [label="other"];
    X894705e6e28dbe65_19 [label="SwitchInt mv(61)\l"];
    X894705e6e28dbe65_20 [label="62 <- Adt{0} ()\l64 <- Adt{0} ()\lCall\l"];
    X894705e6e28dbe65_21 -> X894705e6e28dbe65_22;
    X894705e6e28dbe65_21 [label="69 <- & 3\l72 <- Use(const ?_usize)\l73 <- Use(const ?_usize)\l74 <- Lt(cp(72), cp(73))\lAssert mv(74) == true\l"];
    X894705e6e28dbe65_22 -> X894705e6e28dbe65_23 [label="68"];
    X894705e6e28dbe65_22 [label="71 <- & (*1)[_72]\l70 <- Tuple (cp(71))\lCall\l"];
    X894705e6e28dbe65_23 -> X894705e6e28dbe65_24 [label="66"];
    X894705e6e28dbe65_23 [label="67 <- & 68\lCall\l"];
    X894705e6e28dbe65_24 -> X894705e6e28dbe65_25 [label="65"];
    X894705e6e28dbe65_24 [label="Call\l"];
    X894705e6e28dbe65_25 -> X894705e6e28dbe65_27 [label="0"];
    X894705e6e28dbe65_25 -> X894705e6e28dbe65_26 [label="other"];
    X894705e6e28dbe65_25 [label="SwitchInt mv(65)\l"];
    X894705e6e28dbe65_26 -> X894705e6e28dbe65_30;
    X894705e6e28dbe65_26 [label="90 <- & 3\l93 <- Use(const ?_usize)\l94 <- Use(const ?_usize)\l95 <- Lt(cp(93), cp(94))\lAssert mv(95) == true\l"];
    X894705e6e28dbe65_27 -> X894705e6e28dbe65_28 [label="80"];
    X894705e6e28dbe65_27 [label="76 <- & 23\l77 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l75 <- Tuple (mv(76), mv(77))\l78 <- Use(cp(75.0))\l79 <- Use(cp(75.1))\lCall\l"];
    X894705e6e28dbe65_28 -> X894705e6e28dbe65_29 [label="0"];
    X894705e6e28dbe65_28 -> X894705e6e28dbe65_122 [label="other"];
    X894705e6e28dbe65_28 [label="SwitchInt mv(80)\l"];
    X894705e6e28dbe65_29 [label="81 <- Adt{0} ()\l83 <- Adt{0} ()\lCall\l"];
    X894705e6e28dbe65_30 -> X894705e6e28dbe65_31 [label="89"];
    X894705e6e28dbe65_30 [label="92 <- & (*1)[_93]\l91 <- Tuple (cp(92))\lCall\l"];
    X894705e6e28dbe65_31 -> X894705e6e28dbe65_32 [label="87"];
    X894705e6e28dbe65_31 [label="88 <- & 89\lCall\l"];
    X894705e6e28dbe65_32 -> X894705e6e28dbe65_33 [label="86"];
    X894705e6e28dbe65_32 [label="Call\l"];
    X894705e6e28dbe65_33 -> X894705e6e28dbe65_34 [label="84"];
    X894705e6e28dbe65_33 [label="85 <- & 86\l96 <- Use(const &spl_token_interface::state::account_state::AccountState)\lCall\l"];
    X894705e6e28dbe65_34 -> X894705e6e28dbe65_38 [label="0"];
    X894705e6e28dbe65_34 -> X894705e6e28dbe65_35 [label="other"];
    X894705e6e28dbe65_34 [label="SwitchInt mv(84)\l"];
    X894705e6e28dbe65_35 -> X894705e6e28dbe65_36 [label="102"];
    X894705e6e28dbe65_35 [label="98 <- & 23\l99 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l97 <- Tuple (mv(98), mv(99))\l100 <- Use(cp(97.0))\l101 <- Use(cp(97.1))\lCall\l"];
    X894705e6e28dbe65_36 -> X894705e6e28dbe65_37 [label="0"];
    X894705e6e28dbe65_36 -> X894705e6e28dbe65_122 [label="other"];
    X894705e6e28dbe65_36 [label="SwitchInt mv(102)\l"];
    X894705e6e28dbe65_37 [label="103 <- Adt{0} ()\l105 <- Adt{0} ()\lCall\l"];
    X894705e6e28dbe65_38 -> X894705e6e28dbe65_39;
    X894705e6e28dbe65_38 [label="109 <- & 3\l112 <- Use(const ?_usize)\l113 <- Use(const ?_usize)\l114 <- Lt(cp(112), cp(113))\lAssert mv(114) == true\l"];
    X894705e6e28dbe65_39 -> X894705e6e28dbe65_40 [label="108"];
    X894705e6e28dbe65_39 [label="111 <- & (*1)[_112]\l110 <- Tuple (cp(111))\lCall\l"];
    X894705e6e28dbe65_40 -> X894705e6e28dbe65_41 [label="106"];
    X894705e6e28dbe65_40 [label="107 <- & 108\lCall\l"];
    X894705e6e28dbe65_41 -> X894705e6e28dbe65_45 [label="0"];
    X894705e6e28dbe65_41 -> X894705e6e28dbe65_42 [label="other"];
    X894705e6e28dbe65_41 [label="SwitchInt mv(106)\l"];
    X894705e6e28dbe65_42 -> X894705e6e28dbe65_43 [label="120"];
    X894705e6e28dbe65_42 [label="116 <- & 23\l117 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l115 <- Tuple (mv(116), mv(117))\l118 <- Use(cp(115.0))\l119 <- Use(cp(115.1))\lCall\l"];
    X894705e6e28dbe65_43 -> X894705e6e28dbe65_44 [label="0"];
    X894705e6e28dbe65_43 -> X894705e6e28dbe65_122 [label="other"];
    X894705e6e28dbe65_43 [label="SwitchInt mv(120)\l"];
    X894705e6e28dbe65_44 [label="121 <- Adt{0} ()\l123 <- Adt{0} ()\lCall\l"];
    X894705e6e28dbe65_45 -> X894705e6e28dbe65_46;
    X894705e6e28dbe65_45 [label="128 <- Use(const ?_usize)\l129 <- Use(const ?_usize)\l130 <- Lt(cp(128), cp(129))\lAssert mv(130) == true\l"];
    X894705e6e28dbe65_46 -> X894705e6e28dbe65_47 [label="126"];
    X894705e6e28dbe65_46 [label="127 <- & (*1)[_128]\lCall\l"];
    X894705e6e28dbe65_47 -> X894705e6e28dbe65_48;
    X894705e6e28dbe65_47 [label="125 <- & 126\l134 <- & 3\l137 <- Use(const ?_usize)\l138 <- Use(const ?_usize)\l139 <- Lt(cp(137), cp(138))\lAssert mv(139) == true\l"];
    X894705e6e28dbe65_48 -> X894705e6e28dbe65_49 [label="133"];
    X894705e6e28dbe65_48 [label="136 <- & (*1)[_137]\l135 <- Tuple (cp(136))\lCall\l"];
    X894705e6e28dbe65_49 -> X894705e6e28dbe65_50 [label="124"];
    X894705e6e28dbe65_49 [label="132 <- & 133.0\l131 <- & 132\lCall\l"];
    X894705e6e28dbe65_50 -> X894705e6e28dbe65_54 [label="0"];
    X894705e6e28dbe65_50 -> X894705e6e28dbe65_51 [label="other"];
    X894705e6e28dbe65_50 [label="SwitchInt mv(124)\l"];
    X894705e6e28dbe65_51 -> X894705e6e28dbe65_52 [label="145"];
    X894705e6e28dbe65_51 [label="141 <- & 23\l142 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l140 <- Tuple (mv(141), mv(142))\l143 <- Use(cp(140.0))\l144 <- Use(cp(140.1))\lCall\l"];
    X894705e6e28dbe65_52 -> X894705e6e28dbe65_53 [label="0"];
    X894705e6e28dbe65_52 -> X894705e6e28dbe65_122 [label="other"];
    X894705e6e28dbe65_52 [label="SwitchInt mv(145)\l"];
    X894705e6e28dbe65_53 [label="146 <- Adt{0} ()\l148 <- Adt{0} ()\lCall\l"];
    X894705e6e28dbe65_54 -> X894705e6e28dbe65_55;
    X894705e6e28dbe65_54 [label="152 <- Use(const ?_usize)\l153 <- Use(const ?_usize)\l154 <- Lt(cp(152), cp(153))\lAssert mv(154) == true\l"];
    X894705e6e28dbe65_55 -> X894705e6e28dbe65_56 [label="150"];
    X894705e6e28dbe65_55 [label="151 <- & (*1)[_152]\lCall\l"];
    X894705e6e28dbe65_56 -> X894705e6e28dbe65_60 [label="0"];
    X894705e6e28dbe65_56 -> X894705e6e28dbe65_57 [label="other"];
    X894705e6e28dbe65_56 [label="149 <- Ne(mv(150), const ?_usize)\lSwitchInt mv(149)\l"];
    X894705e6e28dbe65_57 -> X894705e6e28dbe65_58 [label="160"];
    X894705e6e28dbe65_57 [label="156 <- & 23\l157 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l155 <- Tuple (mv(156), mv(157))\l158 <- Use(cp(155.0))\l159 <- Use(cp(155.1))\lCall\l"];
    X894705e6e28dbe65_58 -> X894705e6e28dbe65_59 [label="0"];
    X894705e6e28dbe65_58 -> X894705e6e28dbe65_122 [label="other"];
    X894705e6e28dbe65_58 [label="SwitchInt mv(160)\l"];
    X894705e6e28dbe65_59 [label="161 <- Adt{0} ()\l163 <- Adt{0} ()\lCall\l"];
    X894705e6e28dbe65_60 -> X894705e6e28dbe65_61;
    X894705e6e28dbe65_60 [label="168 <- & 4\l171 <- Use(const ?_usize)\l172 <- Use(const ?_usize)\l173 <- Lt(cp(171), cp(172))\lAssert mv(173) == true\l"];
    X894705e6e28dbe65_61 -> X894705e6e28dbe65_62 [label="167"];
    X894705e6e28dbe65_61 [label="170 <- & (*1)[_171]\l169 <- Tuple (cp(170))\lCall\l"];
    X894705e6e28dbe65_62 -> X894705e6e28dbe65_63 [label="165"];
    X894705e6e28dbe65_62 [label="166 <- & 167\lCall\l"];
    X894705e6e28dbe65_63 -> X894705e6e28dbe65_64 [label="164"];
    X894705e6e28dbe65_63 [label="Call\l"];
    X894705e6e28dbe65_64 -> X894705e6e28dbe65_66 [label="0"];
    X894705e6e28dbe65_64 -> X894705e6e28dbe65_65 [label="other"];
    X894705e6e28dbe65_64 [label="SwitchInt mv(164)\l"];
    X894705e6e28dbe65_65 -> X894705e6e28dbe65_69;
    X894705e6e28dbe65_65 [label="185 <- Use(const ?_usize)\l186 <- Use(const ?_usize)\l187 <- Lt(cp(185), cp(186))\lAssert mv(187) == true\l"];
    X894705e6e28dbe65_66 -> X894705e6e28dbe65_67 [label="179"];
    X894705e6e28dbe65_66 [label="175 <- & 23\l176 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l174 <- Tuple (mv(175), mv(176))\l177 <- Use(cp(174.0))\l178 <- Use(cp(174.1))\lCall\l"];
    X894705e6e28dbe65_67 -> X894705e6e28dbe65_68 [label="0"];
    X894705e6e28dbe65_67 -> X894705e6e28dbe65_122 [label="other"];
    X894705e6e28dbe65_67 [label="SwitchInt mv(179)\l"];
    X894705e6e28dbe65_68 [label="180 <- Adt{0} ()\l182 <- Adt{0} ()\lCall\l"];
    X894705e6e28dbe65_69 -> X894705e6e28dbe65_70;
    X894705e6e28dbe65_69 [label="184 <- Use(cp((*2)[_185]))\l190 <- & 4\l193 <- Use(const ?_usize)\l194 <- Use(const ?_usize)\l195 <- Lt(cp(193), cp(194))\lAssert mv(195) == true\l"];
    X894705e6e28dbe65_70 -> X894705e6e28dbe65_71 [label="189"];
    X894705e6e28dbe65_70 [label="192 <- & (*1)[_193]\l191 <- Tuple (cp(192))\lCall\l"];
    X894705e6e28dbe65_71 -> X894705e6e28dbe65_75 [label="0"];
    X894705e6e28dbe65_71 -> X894705e6e28dbe65_72 [label="other"];
    X894705e6e28dbe65_71 [label="188 <- Use(cp(189.2))\l183 <- Ne(mv(184), mv(188))\lSwitchInt mv(183)\l"];
    X894705e6e28dbe65_72 -> X894705e6e28dbe65_73 [label="201"];
    X894705e6e28dbe65_72 [label="197 <- & 23\l198 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l196 <- Tuple (mv(197), mv(198))\l199 <- Use(cp(196.0))\l200 <- Use(cp(196.1))\lCall\l"];
    X894705e6e28dbe65_73 -> X894705e6e28dbe65_74 [label="0"];
    X894705e6e28dbe65_73 -> X894705e6e28dbe65_122 [label="other"];
    X894705e6e28dbe65_73 [label="SwitchInt mv(201)\l"];
    X894705e6e28dbe65_74 [label="202 <- Adt{0} ()\l204 <- Adt{0} ()\lCall\l"];
    X894705e6e28dbe65_75 -> X894705e6e28dbe65_76;
    X894705e6e28dbe65_75 [label="210 <- & 4\l213 <- Use(const ?_usize)\l214 <- Use(const ?_usize)\l215 <- Lt(cp(213), cp(214))\lAssert mv(215) == true\l"];
    X894705e6e28dbe65_76 -> X894705e6e28dbe65_77 [label="209"];
    X894705e6e28dbe65_76 [label="212 <- & (*1)[_213]\l211 <- Tuple (cp(212))\lCall\l"];
    X894705e6e28dbe65_77 -> X894705e6e28dbe65_78 [label="207"];
    X894705e6e28dbe65_77 [label="208 <- & 209\lCall\l"];
    X894705e6e28dbe65_78 -> X894705e6e28dbe65_79 [label="205"];
    X894705e6e28dbe65_78 [label="206 <- & 207\lCall\l"];
    X894705e6e28dbe65_79 -> X894705e6e28dbe65_80 [label="0"];
    X894705e6e28dbe65_79 -> X894705e6e28dbe65_83 [label="other"];
    X894705e6e28dbe65_79 [label="SwitchInt mv(205)\l"];
    X894705e6e28dbe65_80 -> X894705e6e28dbe65_81 [label="221"];
    X894705e6e28dbe65_80 [label="217 <- & 23\l218 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l216 <- Tuple (mv(217), mv(218))\l219 <- Use(cp(216.0))\l220 <- Use(cp(216.1))\lCall\l"];
    X894705e6e28dbe65_81 -> X894705e6e28dbe65_82 [label="0"];
    X894705e6e28dbe65_81 -> X894705e6e28dbe65_83 [label="other"];
    X894705e6e28dbe65_81 [label="SwitchInt mv(221)\l"];
    X894705e6e28dbe65_82 [label="222 <- Adt{0} ()\l224 <- Adt{0} ()\lCall\l"];
    X894705e6e28dbe65_83 -> X894705e6e28dbe65_84 [label="228"];
    X894705e6e28dbe65_83 [label="229 <- Cast-PointerCoercion(Unsize) cp(2)\lCall\l"];
    X894705e6e28dbe65_84 -> X894705e6e28dbe65_85 [label="225"];
    X894705e6e28dbe65_84 [label="227 <- Cast-PtrToPtr mv(228)\l226 <- Use(cp((*227)))\lCall\l"];
    X894705e6e28dbe65_85 -> X894705e6e28dbe65_86 [label="0"];
    X894705e6e28dbe65_85 -> X894705e6e28dbe65_93 [label="other"];
    X894705e6e28dbe65_85 [label="SwitchInt cp(225)\l"];
    X894705e6e28dbe65_86 -> X894705e6e28dbe65_87;
    X894705e6e28dbe65_86 [label="234 <- Use(const ?_usize)\l235 <- Use(const ?_usize)\l236 <- Lt(cp(234), cp(235))\lAssert mv(236) == true\l"];
    X894705e6e28dbe65_87 -> X894705e6e28dbe65_88 [label="232"];
    X894705e6e28dbe65_87 [label="233 <- & (*1)[_234]\lCall\l"];
    X894705e6e28dbe65_88 -> X894705e6e28dbe65_89 [label="230"];
    X894705e6e28dbe65_88 [label="231 <- & 232\l237 <- Use(const &&[u8; 32])\lCall\l"];
    X894705e6e28dbe65_89 -> X894705e6e28dbe65_93 [label="0"];
    X894705e6e28dbe65_89 -> X894705e6e28dbe65_90 [label="other"];
    X894705e6e28dbe65_89 [label="SwitchInt mv(230)\l"];
    X894705e6e28dbe65_90 -> X894705e6e28dbe65_91 [label="243"];
    X894705e6e28dbe65_90 [label="239 <- & 23\l240 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l238 <- Tuple (mv(239), mv(240))\l241 <- Use(cp(238.0))\l242 <- Use(cp(238.1))\lCall\l"];
    X894705e6e28dbe65_91 -> X894705e6e28dbe65_92 [label="0"];
    X894705e6e28dbe65_91 -> X894705e6e28dbe65_122 [label="other"];
    X894705e6e28dbe65_91 [label="SwitchInt mv(243)\l"];
    X894705e6e28dbe65_92 [label="244 <- Adt{0} ()\l246 <- Adt{0} ()\lCall\l"];
    X894705e6e28dbe65_93 -> X894705e6e28dbe65_94 [label="0"];
    X894705e6e28dbe65_93 -> X894705e6e28dbe65_101 [label="other"];
    X894705e6e28dbe65_93 [label="SwitchInt cp(225)\l"];
    X894705e6e28dbe65_94 -> X894705e6e28dbe65_95;
    X894705e6e28dbe65_94 [label="251 <- Use(const ?_usize)\l252 <- Use(const ?_usize)\l253 <- Lt(cp(251), cp(252))\lAssert mv(253) == true\l"];
    X894705e6e28dbe65_95 -> X894705e6e28dbe65_96 [label="249"];
    X894705e6e28dbe65_95 [label="250 <- & (*1)[_251]\lCall\l"];
    X894705e6e28dbe65_96 -> X894705e6e28dbe65_97 [label="247"];
    X894705e6e28dbe65_96 [label="248 <- & 249\l254 <- Use(const &&[u8; 32])\lCall\l"];
    X894705e6e28dbe65_97 -> X894705e6e28dbe65_101 [label="0"];
    X894705e6e28dbe65_97 -> X894705e6e28dbe65_98 [label="other"];
    X894705e6e28dbe65_97 [label="SwitchInt mv(247)\l"];
    X894705e6e28dbe65_98 -> X894705e6e28dbe65_99 [label="260"];
    X894705e6e28dbe65_98 [label="256 <- & 23\l257 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l255 <- Tuple (mv(256), mv(257))\l258 <- Use(cp(255.0))\l259 <- Use(cp(255.1))\lCall\l"];
    X894705e6e28dbe65_99 -> X894705e6e28dbe65_100 [label="0"];
    X894705e6e28dbe65_99 -> X894705e6e28dbe65_122 [label="other"];
    X894705e6e28dbe65_99 [label="SwitchInt mv(260)\l"];
    X894705e6e28dbe65_100 [label="261 <- Adt{0} ()\l263 <- Adt{0} ()\lCall\l"];
    X894705e6e28dbe65_101 -> X894705e6e28dbe65_107 [label="0"];
    X894705e6e28dbe65_101 -> X894705e6e28dbe65_102 [label="other"];
    X894705e6e28dbe65_101 [label="SwitchInt cp(225)\l"];
    X894705e6e28dbe65_102 -> X894705e6e28dbe65_103;
    X894705e6e28dbe65_102 [label="266 <- chkd-Sub(const ?_u64, cp(225))\lAssert mv(266.1) == false\l"];
    X894705e6e28dbe65_103 -> X894705e6e28dbe65_107 [label="0"];
    X894705e6e28dbe65_103 -> X894705e6e28dbe65_104 [label="other"];
    X894705e6e28dbe65_103 [label="265 <- Use(mv(266.0))\l264 <- Lt(mv(265), cp(5))\lSwitchInt mv(264)\l"];
    X894705e6e28dbe65_104 -> X894705e6e28dbe65_105 [label="272"];
    X894705e6e28dbe65_104 [label="268 <- & 23\l269 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l267 <- Tuple (mv(268), mv(269))\l270 <- Use(cp(267.0))\l271 <- Use(cp(267.1))\lCall\l"];
    X894705e6e28dbe65_105 -> X894705e6e28dbe65_106 [label="0"];
    X894705e6e28dbe65_105 -> X894705e6e28dbe65_122 [label="other"];
    X894705e6e28dbe65_105 [label="SwitchInt mv(272)\l"];
    X894705e6e28dbe65_106 [label="273 <- Adt{0} ()\l275 <- Adt{0} ()\lCall\l"];
    X894705e6e28dbe65_107 -> X894705e6e28dbe65_108;
    X894705e6e28dbe65_107 [label="281 <- & 4\l284 <- Use(const ?_usize)\l285 <- Use(const ?_usize)\l286 <- Lt(cp(284), cp(285))\lAssert mv(286) == true\l"];
    X894705e6e28dbe65_108 -> X894705e6e28dbe65_109 [label="280"];
    X894705e6e28dbe65_108 [label="283 <- & (*1)[_284]\l282 <- Tuple (cp(283))\lCall\l"];
    X894705e6e28dbe65_109 -> X894705e6e28dbe65_110 [label="278"];
    X894705e6e28dbe65_109 [label="279 <- & 280\lCall\l"];
    X894705e6e28dbe65_110 -> X894705e6e28dbe65_111;
    X894705e6e28dbe65_110 [label="277 <- & 278\l289 <- chkd-Add(cp(5), cp(225))\lAssert mv(289.1) == false\l"];
    X894705e6e28dbe65_111 -> X894705e6e28dbe65_113 [label="0"];
    X894705e6e28dbe65_111 -> X894705e6e28dbe65_112 [label="other"];
    X894705e6e28dbe65_111 [label="288 <- Use(mv(289.0))\l287 <- & 288\l276 <- Tuple (mv(277), mv(287))\l290 <- Use(cp(276.0))\l291 <- Use(cp(276.1))\l293 <- Use(cp((*290)))\l294 <- Use(cp((*291)))\l292 <- Eq(mv(293), mv(294))\lSwitchInt mv(292)\l"];
    X894705e6e28dbe65_112 -> X894705e6e28dbe65_114;
    X894705e6e28dbe65_112 [label="303 <- & 3\l306 <- Use(const ?_usize)\l307 <- Use(const ?_usize)\l308 <- Lt(cp(306), cp(307))\lAssert mv(308) == true\l"];
    X894705e6e28dbe65_113 [label="295 <- Adt{0} ()\l297 <- Adt{0} ()\lCall\l"];
    X894705e6e28dbe65_114 -> X894705e6e28dbe65_115 [label="302"];
    X894705e6e28dbe65_114 [label="305 <- & (*1)[_306]\l304 <- Tuple (cp(305))\lCall\l"];
    X894705e6e28dbe65_115 -> X894705e6e28dbe65_116 [label="300"];
    X894705e6e28dbe65_115 [label="301 <- & 302\lCall\l"];
    X894705e6e28dbe65_116 -> X894705e6e28dbe65_117;
    X894705e6e28dbe65_116 [label="299 <- & 300\l311 <- chkd-Add(cp(14), cp(225))\lAssert mv(311.1) == false\l"];
    X894705e6e28dbe65_117 -> X894705e6e28dbe65_119 [label="0"];
    X894705e6e28dbe65_117 -> X894705e6e28dbe65_118 [label="other"];
    X894705e6e28dbe65_117 [label="310 <- Use(mv(311.0))\l309 <- & 310\l298 <- Tuple (mv(299), mv(309))\l312 <- Use(cp(298.0))\l313 <- Use(cp(298.1))\l315 <- Use(cp((*312)))\l316 <- Use(cp((*313)))\l314 <- Eq(mv(315), mv(316))\lSwitchInt mv(314)\l"];
    X894705e6e28dbe65_118 -> X894705e6e28dbe65_120 [label="320"];
    X894705e6e28dbe65_118 [label="321 <- & 23\lCall\l"];
    X894705e6e28dbe65_119 [label="317 <- Adt{0} ()\l319 <- Adt{0} ()\lCall\l"];
    X894705e6e28dbe65_120 -> X894705e6e28dbe65_121 [label="0"];
    X894705e6e28dbe65_120 -> X894705e6e28dbe65_122 [label="other"];
    X894705e6e28dbe65_120 [label="SwitchInt mv(320)\l"];
    X894705e6e28dbe65_121 [label="Call\l"];
    X894705e6e28dbe65_122 [label="0 <- Use(mv(23))\lReturn\l"];
  }
  X894705e6e28dbe65_1 -> X94c0ebba4c97b5fe_0 [label="mv(8),mv(9)"];
  X894705e6e28dbe65_2 -> Xb0f37d884f3a7efa_0 [label="mv(6)"];
  X894705e6e28dbe65_4 -> X76878979e7fda90e_0 [label="mv(17),mv(18)"];
  X894705e6e28dbe65_5 -> Xfeb9911cbc7a7b7a_0 [label="mv(15)"];
  X894705e6e28dbe65_6 -> Xb08f690acebf6ae4_0 [label="mv(24),mv(25)"];
  X894705e6e28dbe65_8 -> X9d133aa780502b33_0 [label="cp(32),cp(33)"];
  X894705e6e28dbe65_10 -> X1badff0345f2ca99_0 [label="mv(35),cp(32),cp(33),mv(37)"];
  X894705e6e28dbe65_12 -> X9d133aa780502b33_0 [label="cp(44),cp(45)"];
  X894705e6e28dbe65_14 -> X1badff0345f2ca99_0 [label="mv(47),cp(44),cp(45),mv(49)"];
  X894705e6e28dbe65_16 -> X499a64bd2ee6dafa_0 [label="mv(52)"];
  X894705e6e28dbe65_18 -> X9d133aa780502b33_0 [label="cp(59),cp(60)"];
  X894705e6e28dbe65_20 -> X1badff0345f2ca99_0 [label="mv(62),cp(59),cp(60),mv(64)"];
  X894705e6e28dbe65_22 -> X76878979e7fda90e_0 [label="mv(69),mv(70)"];
  X894705e6e28dbe65_23 -> X51b146e3c692f3b3_0 [label="mv(67)"];
  X894705e6e28dbe65_24 -> X89be5f95c133d42a_0 [label="mv(66)"];
  X894705e6e28dbe65_27 -> X9d133aa780502b33_0 [label="cp(78),cp(79)"];
  X894705e6e28dbe65_29 -> X1badff0345f2ca99_0 [label="mv(81),cp(78),cp(79),mv(83)"];
  X894705e6e28dbe65_30 -> X76878979e7fda90e_0 [label="mv(90),mv(91)"];
  X894705e6e28dbe65_31 -> Xd5c95dfb9809593b_0 [label="mv(88)"];
  X894705e6e28dbe65_32 -> Xca79d860634e64da_0 [label="mv(87)"];
  X894705e6e28dbe65_33 -> X92c90d3df5004379_0 [label="mv(85),mv(96)"];
  X894705e6e28dbe65_35 -> X9d133aa780502b33_0 [label="cp(100),cp(101)"];
  X894705e6e28dbe65_37 -> X1badff0345f2ca99_0 [label="mv(103),cp(100),cp(101),mv(105)"];
  X894705e6e28dbe65_39 -> X76878979e7fda90e_0 [label="mv(109),mv(110)"];
  X894705e6e28dbe65_40 -> X439fceefbd0e681_0 [label="mv(107)"];
  X894705e6e28dbe65_42 -> X9d133aa780502b33_0 [label="cp(118),cp(119)"];
  X894705e6e28dbe65_44 -> X1badff0345f2ca99_0 [label="mv(121),cp(118),cp(119),mv(123)"];
  X894705e6e28dbe65_46 -> X8817de218f598320_0 [label="mv(127)"];
  X894705e6e28dbe65_48 -> X76878979e7fda90e_0 [label="mv(134),mv(135)"];
  X894705e6e28dbe65_49 -> X5d6c1de00eb04104_0 [label="mv(125),mv(131)"];
  X894705e6e28dbe65_51 -> X9d133aa780502b33_0 [label="cp(143),cp(144)"];
  X894705e6e28dbe65_53 -> X1badff0345f2ca99_0 [label="mv(146),cp(143),cp(144),mv(148)"];
  X894705e6e28dbe65_55 -> X499a64bd2ee6dafa_0 [label="mv(151)"];
  X894705e6e28dbe65_57 -> X9d133aa780502b33_0 [label="cp(158),cp(159)"];
  X894705e6e28dbe65_59 -> X1badff0345f2ca99_0 [label="mv(161),cp(158),cp(159),mv(163)"];
  X894705e6e28dbe65_61 -> X94c0ebba4c97b5fe_0 [label="mv(168),mv(169)"];
  X894705e6e28dbe65_62 -> Xfda868f8ceb54b0b_0 [label="mv(166)"];
  X894705e6e28dbe65_63 -> X89be5f95c133d42a_0 [label="mv(165)"];
  X894705e6e28dbe65_66 -> X9d133aa780502b33_0 [label="cp(177),cp(178)"];
  X894705e6e28dbe65_68 -> X1badff0345f2ca99_0 [label="mv(180),cp(177),cp(178),mv(182)"];
  X894705e6e28dbe65_70 -> X94c0ebba4c97b5fe_0 [label="mv(190),mv(191)"];
  X894705e6e28dbe65_72 -> X9d133aa780502b33_0 [label="cp(199),cp(200)"];
  X894705e6e28dbe65_74 -> X1badff0345f2ca99_0 [label="mv(202),cp(199),cp(200),mv(204)"];
  X894705e6e28dbe65_76 -> X94c0ebba4c97b5fe_0 [label="mv(210),mv(211)"];
  X894705e6e28dbe65_77 -> Xed7a553ee817a9d7_0 [label="mv(208)"];
  X894705e6e28dbe65_78 -> X2d277fd43ee3fe90_0 [label="mv(206)"];
  X894705e6e28dbe65_80 -> X9d133aa780502b33_0 [label="cp(219),cp(220)"];
  X894705e6e28dbe65_82 -> X1badff0345f2ca99_0 [label="mv(222),cp(219),cp(220),mv(224)"];
  X894705e6e28dbe65_83 -> X5e85acfe8a19755e_0 [label="mv(229)"];
  X894705e6e28dbe65_84 -> X4b040c9530995baf_0 [label="mv(226)"];
  X894705e6e28dbe65_87 -> X63a66dd16cbd53fd_0 [label="mv(233)"];
  X894705e6e28dbe65_88 -> X5d6c1de00eb04104_0 [label="mv(231),mv(237)"];
  X894705e6e28dbe65_90 -> X9d133aa780502b33_0 [label="cp(241),cp(242)"];
  X894705e6e28dbe65_92 -> X1badff0345f2ca99_0 [label="mv(244),cp(241),cp(242),mv(246)"];
  X894705e6e28dbe65_95 -> X63a66dd16cbd53fd_0 [label="mv(250)"];
  X894705e6e28dbe65_96 -> X5d6c1de00eb04104_0 [label="mv(248),mv(254)"];
  X894705e6e28dbe65_98 -> X9d133aa780502b33_0 [label="cp(258),cp(259)"];
  X894705e6e28dbe65_100 -> X1badff0345f2ca99_0 [label="mv(261),cp(258),cp(259),mv(263)"];
  X894705e6e28dbe65_104 -> X9d133aa780502b33_0 [label="cp(270),cp(271)"];
  X894705e6e28dbe65_106 -> X1badff0345f2ca99_0 [label="mv(273),cp(270),cp(271),mv(275)"];
  X894705e6e28dbe65_108 -> X94c0ebba4c97b5fe_0 [label="mv(281),mv(282)"];
  X894705e6e28dbe65_109 -> Xb0f37d884f3a7efa_0 [label="mv(279)"];
  X894705e6e28dbe65_113 -> X38c69241c4d95178_0 [label="mv(295),cp(290),cp(291),mv(297)"];
  X894705e6e28dbe65_114 -> X76878979e7fda90e_0 [label="mv(303),mv(304)"];
  X894705e6e28dbe65_115 -> Xfeb9911cbc7a7b7a_0 [label="mv(301)"];
  X894705e6e28dbe65_118 -> X19e8b93c837642e3_0 [label="mv(321)"];
  X894705e6e28dbe65_119 -> X38c69241c4d95178_0 [label="mv(317),cp(312),cp(313),mv(319)"];
  X894705e6e28dbe65_121 -> Xac08878333d72e42_0 [label="const &str"];
  subgraph cluster_76 {
    label="entrypoint::test_process_\nmint_to_checked::{closure\n#0}";
    style="filled";
    color=lightgray;
    node_77 [label="LOCALS\l0 = spl_token_interface::state::account::Account\l1 = &{closure@p-token/src/entrypoint.rs:1220:23: 1220:51}\l2 = &pinocchio::account_info::AccountInfo\l3 = *const spl_token_interface::state::account::Account\l4 = *const u8\l5 = &[u8]\l", style="filled", color=palegreen3];
    X76878979e7fda90e_0 -> X76878979e7fda90e_1 [label="5"];
    X76878979e7fda90e_0 [label="Call\l"];
    X76878979e7fda90e_1 -> X76878979e7fda90e_2 [label="4"];
    X76878979e7fda90e_1 [label="Call\l"];
    X76878979e7fda90e_2 -> X76878979e7fda90e_3 [label="0"];
    X76878979e7fda90e_2 [label="3 <- Cast-PtrToPtr mv(4)\lCall\l"];
    X76878979e7fda90e_3 [label="Return\l"];
  }
  X76878979e7fda90e_0 -> Xd87d8e0f8c4953f_0 [label="cp(2)"];
  X76878979e7fda90e_1 -> X5e85acfe8a19755e_0 [label="cp(5)"];
  X76878979e7fda90e_2 -> X7dc6a8245be12621_0 [label="mv(3)"];
  subgraph cluster_78 {
    label="entrypoint::test_process_\nmint_to_checked::{closure\n#1}";
    style="filled";
    color=lightgray;
    node_79 [label="LOCALS\l0 = spl_token_interface::state::mint::Mint\l1 = &{closure@p-token/src/entrypoint.rs:1224:20: 1224:48}\l2 = &pinocchio::account_info::AccountInfo\l3 = *const spl_token_interface::state::mint::Mint\l4 = *const u8\l5 = &[u8]\l", style="filled", color=palegreen3];
    X94c0ebba4c97b5fe_0 -> X94c0ebba4c97b5fe_1 [label="5"];
    X94c0ebba4c97b5fe_0 [label="Call\l"];
    X94c0ebba4c97b5fe_1 -> X94c0ebba4c97b5fe_2 [label="4"];
    X94c0ebba4c97b5fe_1 [label="Call\l"];
    X94c0ebba4c97b5fe_2 -> X94c0ebba4c97b5fe_3 [label="0"];
    X94c0ebba4c97b5fe_2 [label="3 <- Cast-PtrToPtr mv(4)\lCall\l"];
    X94c0ebba4c97b5fe_3 [label="Return\l"];
  }
  X94c0ebba4c97b5fe_0 -> Xd87d8e0f8c4953f_0 [label="cp(2)"];
  X94c0ebba4c97b5fe_1 -> X5e85acfe8a19755e_0 [label="cp(5)"];
  X94c0ebba4c97b5fe_2 -> X80b73d35b2577076_0 [label="mv(3)"];
  subgraph cluster_80 {
    label="entrypoint::inner_process\n_remaining_instruction";
    style="filled";
    color=lightgray;
    node_81 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[pinocchio::account_info::AccountInfo]\l2 = &[u8]\l3 = u8\l4 = &[pinocchio::account_info::AccountInfo; 3]\l5 = core::option::Option<&[pinocchio::account_info::AccountInfo; 3]>\l6 = &[u8; 9]\l7 = core::option::Option<&[u8; 9]>\l", style="filled", color=palegreen3];
    X2f381df63b2d4004_0 -> X2f381df63b2d4004_2 [label="14"];
    X2f381df63b2d4004_0 -> X2f381df63b2d4004_1 [label="other"];
    X2f381df63b2d4004_0 [label="SwitchInt cp(3)\l"];
    X2f381df63b2d4004_1 -> X2f381df63b2d4004_7;
    X2f381df63b2d4004_1 [label="0 <- Adt{0} (const ())\lGoto\l"];
    X2f381df63b2d4004_2 -> X2f381df63b2d4004_3 [label="5"];
    X2f381df63b2d4004_2 [label="Call\l"];
    X2f381df63b2d4004_3 -> X2f381df63b2d4004_4 [label="4"];
    X2f381df63b2d4004_3 [label="Call\l"];
    X2f381df63b2d4004_4 -> X2f381df63b2d4004_5 [label="7"];
    X2f381df63b2d4004_4 [label="Call\l"];
    X2f381df63b2d4004_5 -> X2f381df63b2d4004_6 [label="6"];
    X2f381df63b2d4004_5 [label="Call\l"];
    X2f381df63b2d4004_6 -> X2f381df63b2d4004_7 [label="0"];
    X2f381df63b2d4004_6 [label="Call\l"];
    X2f381df63b2d4004_7 [label="Return\l"];
  }
  X2f381df63b2d4004_2 -> X9ac76d965bfd6e30_0 [label="cp(1)"];
  X2f381df63b2d4004_3 -> X7eed68a0368bc935_0 [label="mv(5)"];
  X2f381df63b2d4004_4 -> X6f565d8803bea5e1_0 [label="cp(2)"];
  X2f381df63b2d4004_5 -> X92c5ef47449c0146_0 [label="mv(7)"];
  X2f381df63b2d4004_6 -> X894705e6e28dbe65_0 [label="cp(4),cp(6)"];
  subgraph cluster_82 {
    label="entrypoint::log_error";
    style="filled";
    color=lightgray;
    node_83 [label="LOCALS\l0 = ()\l1 = &pinocchio::program_error::ProgramError\l2 = ()\l3 = &str\l", style="filled", color=palegreen3];
    X8c6785085c39bd7a_0 -> X8c6785085c39bd7a_1 [label="3"];
    X8c6785085c39bd7a_0 [label="Call\l"];
    X8c6785085c39bd7a_1 -> X8c6785085c39bd7a_2 [label="2"];
    X8c6785085c39bd7a_1 [label="Call\l"];
    X8c6785085c39bd7a_2 [label="Return\l"];
  }
  X8c6785085c39bd7a_0 -> X5de8bd844887fb1f_0 [label="cp(1)"];
  X8c6785085c39bd7a_1 -> X3a0ccd4589f66f55_0 [label="cp(3)"];
  subgraph cluster_84 {
    label="processor::validate_owner";
    style="filled";
    color=lightgray;
    node_85 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[u8; 32]\l2 = &pinocchio::account_info::AccountInfo\l3 = &[pinocchio::account_info::AccountInfo]\l4 = bool\l5 = &&[u8; 32]\l6 = &&[u8; 32]\l7 = &[u8; 32]\l8 = pinocchio::program_error::ProgramError\l9 = spl_token_interface::error::TokenError\l10 = bool\l11 = usize\l12 = bool\l13 = &[u8; 32]\l14 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, &spl_token_interface::state::multisig::Multisig>\l15 = core::result::Result<&spl_token_interface::state::multisig::Multisig, pinocchio::program_error::ProgramError>\l16 = &[u8]\l17 = isize\l18 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l19 = &spl_token_interface::state::multisig::Multisig\l20 = u8\l21 = [bool; 11]\l22 = core::slice::Iter<'_, pinocchio::account_info::AccountInfo>\l23 = core::slice::Iter<'_, pinocchio::account_info::AccountInfo>\l24 = core::slice::Iter<'_, pinocchio::account_info::AccountInfo>\l25 = core::option::Option<&pinocchio::account_info::AccountInfo>\l26 = &mut core::slice::Iter<'_, pinocchio::account_info::AccountInfo>\l27 = isize\l28 = &pinocchio::account_info::AccountInfo\l29 = core::iter::Enumerate<core::slice::Iter<'_, [u8; 32]>>\l30 = core::iter::Enumerate<core::slice::Iter<'_, [u8; 32]>>\l31 = core::slice::Iter<'_, [u8; 32]>\l32 = &[[u8; 32]]\l33 = &[[u8; 32]; 11]\l34 = core::ops::Range<usize>\l35 = usize\l36 = u8\l37 = core::iter::Enumerate<core::slice::Iter<'_, [u8; 32]>>\l38 = core::option::Option<(usize, &[u8; 32])>\l39 = &mut core::iter::Enumerate<core::slice::Iter<'_, [u8; 32]>>\l40 = isize\l41 = usize\l42 = &[u8; 32]\l43 = bool\l44 = &&[u8; 32]\l45 = &&[u8; 32]\l46 = &[u8; 32]\l47 = bool\l48 = usize\l49 = bool\l50 = bool\l51 = pinocchio::program_error::ProgramError\l52 = usize\l53 = bool\l54 = (u8, bool)\l55 = bool\l56 = u8\l57 = u8\l58 = pinocchio::program_error::ProgramError\l59 = bool\l60 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X32fcb7e0b1123f45_0 -> X32fcb7e0b1123f45_1 [label="7"];
    X32fcb7e0b1123f45_0 [label="5 <- & 1\lCall\l"];
    X32fcb7e0b1123f45_1 -> X32fcb7e0b1123f45_2 [label="4"];
    X32fcb7e0b1123f45_1 [label="6 <- & 7\lCall\l"];
    X32fcb7e0b1123f45_2 -> X32fcb7e0b1123f45_5 [label="0"];
    X32fcb7e0b1123f45_2 -> X32fcb7e0b1123f45_3 [label="other"];
    X32fcb7e0b1123f45_2 [label="SwitchInt mv(4)\l"];
    X32fcb7e0b1123f45_3 -> X32fcb7e0b1123f45_4 [label="8"];
    X32fcb7e0b1123f45_3 [label="9 <- Adt{4} ()\lCall\l"];
    X32fcb7e0b1123f45_4 -> X32fcb7e0b1123f45_44;
    X32fcb7e0b1123f45_4 [label="0 <- Adt{1} (mv(8))\lGoto\l"];
    X32fcb7e0b1123f45_5 -> X32fcb7e0b1123f45_6 [label="11"];
    X32fcb7e0b1123f45_5 [label="Call\l"];
    X32fcb7e0b1123f45_6 -> X32fcb7e0b1123f45_40 [label="0"];
    X32fcb7e0b1123f45_6 -> X32fcb7e0b1123f45_7 [label="other"];
    X32fcb7e0b1123f45_6 [label="10 <- Eq(mv(11), const ?_usize)\lSwitchInt mv(10)\l"];
    X32fcb7e0b1123f45_7 -> X32fcb7e0b1123f45_8 [label="12"];
    X32fcb7e0b1123f45_7 [label="13 <- Use(const &[u8; 32])\lCall\l"];
    X32fcb7e0b1123f45_8 -> X32fcb7e0b1123f45_40 [label="0"];
    X32fcb7e0b1123f45_8 -> X32fcb7e0b1123f45_9 [label="other"];
    X32fcb7e0b1123f45_8 [label="SwitchInt mv(12)\l"];
    X32fcb7e0b1123f45_9 -> X32fcb7e0b1123f45_10 [label="16"];
    X32fcb7e0b1123f45_9 [label="Call\l"];
    X32fcb7e0b1123f45_10 -> X32fcb7e0b1123f45_11 [label="15"];
    X32fcb7e0b1123f45_10 [label="Call\l"];
    X32fcb7e0b1123f45_11 -> X32fcb7e0b1123f45_12 [label="14"];
    X32fcb7e0b1123f45_11 [label="Call\l"];
    X32fcb7e0b1123f45_12 -> X32fcb7e0b1123f45_14 [label="0"];
    X32fcb7e0b1123f45_12 -> X32fcb7e0b1123f45_15 [label="1"];
    X32fcb7e0b1123f45_12 -> X32fcb7e0b1123f45_13 [label="other"];
    X32fcb7e0b1123f45_12 [label="17 <- Discriminant(14)\lSwitchInt mv(17)\l"];
    X32fcb7e0b1123f45_13 [label="Unreachable\l"];
    X32fcb7e0b1123f45_14 -> X32fcb7e0b1123f45_16 [label="23"];
    X32fcb7e0b1123f45_14 [label="19 <- Use(cp((14 as variant 0).0))\l20 <- Use(const ?_u8)\l21 <- Repeat const bool\lCall\l"];
    X32fcb7e0b1123f45_15 -> X32fcb7e0b1123f45_44 [label="0"];
    X32fcb7e0b1123f45_15 [label="18 <- Use(mv((14 as variant 1).0))\lCall\l"];
    X32fcb7e0b1123f45_16 -> X32fcb7e0b1123f45_17 [label="22"];
    X32fcb7e0b1123f45_16 [label="Call\l"];
    X32fcb7e0b1123f45_17 -> X32fcb7e0b1123f45_18;
    X32fcb7e0b1123f45_17 [label="24 <- Use(mv(22))\lGoto\l"];
    X32fcb7e0b1123f45_18 -> X32fcb7e0b1123f45_19 [label="25"];
    X32fcb7e0b1123f45_18 [label="26 <- &mut 24\lCall\l"];
    X32fcb7e0b1123f45_19 -> X32fcb7e0b1123f45_21 [label="0"];
    X32fcb7e0b1123f45_19 -> X32fcb7e0b1123f45_20 [label="1"];
    X32fcb7e0b1123f45_19 -> X32fcb7e0b1123f45_13 [label="other"];
    X32fcb7e0b1123f45_19 [label="27 <- Discriminant(25)\lSwitchInt mv(27)\l"];
    X32fcb7e0b1123f45_20 -> X32fcb7e0b1123f45_22 [label="32"];
    X32fcb7e0b1123f45_20 [label="28 <- Use(cp((25 as variant 1).0))\l33 <- & (*19).3\l36 <- Use(cp((*19).1))\l35 <- Cast-IntToInt mv(36)\l34 <- Adt{0} (const ?_usize, mv(35))\lCall\l"];
    X32fcb7e0b1123f45_21 -> X32fcb7e0b1123f45_43 [label="0"];
    X32fcb7e0b1123f45_21 -> X32fcb7e0b1123f45_39 [label="other"];
    X32fcb7e0b1123f45_21 [label="56 <- Use(cp(20))\l57 <- Use(cp((*19).0))\l55 <- Lt(mv(56), mv(57))\lSwitchInt mv(55)\l"];
    X32fcb7e0b1123f45_22 -> X32fcb7e0b1123f45_23 [label="31"];
    X32fcb7e0b1123f45_22 [label="Call\l"];
    X32fcb7e0b1123f45_23 -> X32fcb7e0b1123f45_24 [label="30"];
    X32fcb7e0b1123f45_23 [label="Call\l"];
    X32fcb7e0b1123f45_24 -> X32fcb7e0b1123f45_25 [label="29"];
    X32fcb7e0b1123f45_24 [label="Call\l"];
    X32fcb7e0b1123f45_25 -> X32fcb7e0b1123f45_26;
    X32fcb7e0b1123f45_25 [label="37 <- Use(mv(29))\lGoto\l"];
    X32fcb7e0b1123f45_26 -> X32fcb7e0b1123f45_27 [label="38"];
    X32fcb7e0b1123f45_26 [label="39 <- &mut 37\lCall\l"];
    X32fcb7e0b1123f45_27 -> X32fcb7e0b1123f45_18 [label="0"];
    X32fcb7e0b1123f45_27 -> X32fcb7e0b1123f45_28 [label="1"];
    X32fcb7e0b1123f45_27 -> X32fcb7e0b1123f45_13 [label="other"];
    X32fcb7e0b1123f45_27 [label="40 <- Discriminant(38)\lSwitchInt mv(40)\l"];
    X32fcb7e0b1123f45_28 -> X32fcb7e0b1123f45_29 [label="46"];
    X32fcb7e0b1123f45_28 [label="41 <- Use(cp((38 as variant 1).0.0))\l42 <- Use(cp((38 as variant 1).0.1))\l44 <- & 42\lCall\l"];
    X32fcb7e0b1123f45_29 -> X32fcb7e0b1123f45_30 [label="43"];
    X32fcb7e0b1123f45_29 [label="45 <- & 46\lCall\l"];
    X32fcb7e0b1123f45_30 -> X32fcb7e0b1123f45_26 [label="0"];
    X32fcb7e0b1123f45_30 -> X32fcb7e0b1123f45_31 [label="other"];
    X32fcb7e0b1123f45_30 [label="SwitchInt mv(43)\l"];
    X32fcb7e0b1123f45_31 -> X32fcb7e0b1123f45_32;
    X32fcb7e0b1123f45_31 [label="48 <- Use(const ?_usize)\l49 <- Lt(cp(41), cp(48))\lAssert mv(49) == true\l"];
    X32fcb7e0b1123f45_32 -> X32fcb7e0b1123f45_33 [label="0"];
    X32fcb7e0b1123f45_32 -> X32fcb7e0b1123f45_26 [label="other"];
    X32fcb7e0b1123f45_32 [label="47 <- Use(cp(21[_41]))\lSwitchInt mv(47)\l"];
    X32fcb7e0b1123f45_33 -> X32fcb7e0b1123f45_34 [label="50"];
    X32fcb7e0b1123f45_33 [label="Call\l"];
    X32fcb7e0b1123f45_34 -> X32fcb7e0b1123f45_36 [label="0"];
    X32fcb7e0b1123f45_34 -> X32fcb7e0b1123f45_35 [label="other"];
    X32fcb7e0b1123f45_34 [label="SwitchInt mv(50)\l"];
    X32fcb7e0b1123f45_35 -> X32fcb7e0b1123f45_37;
    X32fcb7e0b1123f45_35 [label="52 <- Use(const ?_usize)\l53 <- Lt(cp(41), cp(52))\lAssert mv(53) == true\l"];
    X32fcb7e0b1123f45_36 -> X32fcb7e0b1123f45_44;
    X32fcb7e0b1123f45_36 [label="51 <- Adt{7} ()\l0 <- Adt{1} (mv(51))\lGoto\l"];
    X32fcb7e0b1123f45_37 -> X32fcb7e0b1123f45_38;
    X32fcb7e0b1123f45_37 [label="21[_41] <- Use(const bool)\l54 <- chkd-Add(cp(20), const ?_u8)\lAssert mv(54.1) == false\l"];
    X32fcb7e0b1123f45_38 -> X32fcb7e0b1123f45_26;
    X32fcb7e0b1123f45_38 [label="20 <- Use(mv(54.0))\lGoto\l"];
    X32fcb7e0b1123f45_39 -> X32fcb7e0b1123f45_44;
    X32fcb7e0b1123f45_39 [label="58 <- Adt{7} ()\l0 <- Adt{1} (mv(58))\lGoto\l"];
    X32fcb7e0b1123f45_40 -> X32fcb7e0b1123f45_41 [label="59"];
    X32fcb7e0b1123f45_40 [label="Call\l"];
    X32fcb7e0b1123f45_41 -> X32fcb7e0b1123f45_42 [label="0"];
    X32fcb7e0b1123f45_41 -> X32fcb7e0b1123f45_43 [label="other"];
    X32fcb7e0b1123f45_41 [label="SwitchInt mv(59)\l"];
    X32fcb7e0b1123f45_42 -> X32fcb7e0b1123f45_44;
    X32fcb7e0b1123f45_42 [label="60 <- Adt{7} ()\l0 <- Adt{1} (mv(60))\lGoto\l"];
    X32fcb7e0b1123f45_43 -> X32fcb7e0b1123f45_44;
    X32fcb7e0b1123f45_43 [label="0 <- Adt{0} (const ())\lGoto\l"];
    X32fcb7e0b1123f45_44 [label="Return\l"];
  }
  X32fcb7e0b1123f45_0 -> X8817de218f598320_0 [label="cp(2)"];
  X32fcb7e0b1123f45_1 -> X5d6c1de00eb04104_0 [label="mv(5),mv(6)"];
  X32fcb7e0b1123f45_3 -> X3e3db5977da52381_0 [label="mv(9)"];
  X32fcb7e0b1123f45_5 -> X499a64bd2ee6dafa_0 [label="cp(2)"];
  X32fcb7e0b1123f45_7 -> X8f13c009139e5cec_0 [label="cp(2),cp(13)"];
  X32fcb7e0b1123f45_9 -> Xd87d8e0f8c4953f_0 [label="cp(2)"];
  X32fcb7e0b1123f45_10 -> X63dfb24998957236_0 [label="cp(16)"];
  X32fcb7e0b1123f45_11 -> Xd1fa35ead87c4777_0 [label="mv(15)"];
  X32fcb7e0b1123f45_14 -> X4b8cc26a7ce3fb77_0 [label="cp(3)"];
  X32fcb7e0b1123f45_15 -> X5adbeff4b5cb293e_0 [label="mv(18)"];
  X32fcb7e0b1123f45_16 -> X7e2b88a54a411cb3_0 [label="mv(23)"];
  X32fcb7e0b1123f45_18 -> X94eaa304226c0157_0 [label="cp(26)"];
  X32fcb7e0b1123f45_20 -> X44d3c3d4cd9a8a85_0 [label="mv(33),mv(34)"];
  X32fcb7e0b1123f45_22 -> X31f9773b566d256c_0 [label="cp(32)"];
  X32fcb7e0b1123f45_23 -> Xb9b3d20a67ff2c4e_0 [label="mv(31)"];
  X32fcb7e0b1123f45_24 -> X7d8e92caf1f2a5f3_0 [label="mv(30)"];
  X32fcb7e0b1123f45_26 -> Xd25aa876b3cae8ac_0 [label="cp(39)"];
  X32fcb7e0b1123f45_28 -> X8817de218f598320_0 [label="cp(28)"];
  X32fcb7e0b1123f45_29 -> X62e1ca1dfa9f1ff9_0 [label="mv(44),mv(45)"];
  X32fcb7e0b1123f45_33 -> Xd3776f91071efde4_0 [label="cp(28)"];
  X32fcb7e0b1123f45_40 -> Xd3776f91071efde4_0 [label="cp(2)"];
  subgraph cluster_86 {
    label="processor::mint_to_checke\nd::process_mint_to_checke\nd";
    style="filled";
    color=lightgray;
    node_87 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[pinocchio::account_info::AccountInfo]\l2 = &[u8]\l3 = u64\l4 = u8\l5 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, spl_token_interface::error::TokenError>, (u64, u8)>\l6 = core::result::Result<(u64, u8), spl_token_interface::error::TokenError>\l7 = isize\l8 = core::result::Result<core::convert::Infallible, spl_token_interface::error::TokenError>\l9 = (u64, u8)\l10 = core::option::Option<u8>\l", style="filled", color=palegreen3];
    Xb08f690acebf6ae4_0 -> Xb08f690acebf6ae4_1 [label="6"];
    Xb08f690acebf6ae4_0 [label="Call\l"];
    Xb08f690acebf6ae4_1 -> Xb08f690acebf6ae4_2 [label="5"];
    Xb08f690acebf6ae4_1 [label="Call\l"];
    Xb08f690acebf6ae4_2 -> Xb08f690acebf6ae4_4 [label="0"];
    Xb08f690acebf6ae4_2 -> Xb08f690acebf6ae4_5 [label="1"];
    Xb08f690acebf6ae4_2 -> Xb08f690acebf6ae4_3 [label="other"];
    Xb08f690acebf6ae4_2 [label="7 <- Discriminant(5)\lSwitchInt mv(7)\l"];
    Xb08f690acebf6ae4_3 [label="Unreachable\l"];
    Xb08f690acebf6ae4_4 -> Xb08f690acebf6ae4_6 [label="0"];
    Xb08f690acebf6ae4_4 [label="9 <- Use(cp((5 as variant 0).0))\l3 <- Use(cp(9.0))\l4 <- Use(cp(9.1))\l10 <- Adt{1} (cp(4))\lCall\l"];
    Xb08f690acebf6ae4_5 -> Xb08f690acebf6ae4_6 [label="0"];
    Xb08f690acebf6ae4_5 [label="8 <- Use(mv((5 as variant 1).0))\lCall\l"];
    Xb08f690acebf6ae4_6 [label="Return\l"];
  }
  Xb08f690acebf6ae4_0 -> Xfb7afa2e20090ae7_0 [label="cp(2)"];
  Xb08f690acebf6ae4_1 -> X46259ebb8e54e117_0 [label="mv(6)"];
  Xb08f690acebf6ae4_4 -> X19742818ab565d6b_0 [label="cp(1),cp(3),mv(10)"];
  Xb08f690acebf6ae4_5 -> X619ee3ba0019d783_0 [label="mv(8)"];
  subgraph cluster_88 {
    label="processor::check_account_\nowner";
    style="filled";
    color=lightgray;
    node_89 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &pinocchio::account_info::AccountInfo\l2 = bool\l3 = &[u8; 32]\l4 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X234cb1e57fb61e21_0 -> X234cb1e57fb61e21_1 [label="2"];
    X234cb1e57fb61e21_0 [label="3 <- Use(const &[u8; 32])\lCall\l"];
    X234cb1e57fb61e21_1 -> X234cb1e57fb61e21_3 [label="0"];
    X234cb1e57fb61e21_1 -> X234cb1e57fb61e21_2 [label="other"];
    X234cb1e57fb61e21_1 [label="SwitchInt mv(2)\l"];
    X234cb1e57fb61e21_2 -> X234cb1e57fb61e21_4;
    X234cb1e57fb61e21_2 [label="0 <- Adt{0} (const ())\lGoto\l"];
    X234cb1e57fb61e21_3 -> X234cb1e57fb61e21_4;
    X234cb1e57fb61e21_3 [label="4 <- Adt{6} ()\l0 <- Adt{1} (mv(4))\lGoto\l"];
    X234cb1e57fb61e21_4 [label="Return\l"];
  }
  X234cb1e57fb61e21_0 -> X8f13c009139e5cec_0 [label="cp(1),cp(3)"];
  subgraph cluster_90 {
    label="processor::unpack_amount_\nand_decimals";
    style="filled";
    color=lightgray;
    node_91 [label="LOCALS\l0 = core::result::Result<(u64, u8), spl_token_interface::error::TokenError>\l1 = &[u8]\l2 = bool\l3 = usize\l4 = &[u8]\l5 = &[u8]\l6 = (&[u8], &[u8])\l7 = (u64, u8)\l8 = u64\l9 = [u8; 8]\l10 = *const [u8; 8]\l11 = *const u8\l12 = u8\l13 = usize\l14 = usize\l15 = bool\l16 = spl_token_interface::error::TokenError\l", style="filled", color=palegreen3];
    Xfb7afa2e20090ae7_0 -> Xfb7afa2e20090ae7_6 [label="0"];
    Xfb7afa2e20090ae7_0 -> Xfb7afa2e20090ae7_1 [label="other"];
    Xfb7afa2e20090ae7_0 [label="3 <- PtrMetadata(cp(1))\l2 <- Ge(mv(3), const ?_usize)\lSwitchInt mv(2)\l"];
    Xfb7afa2e20090ae7_1 -> Xfb7afa2e20090ae7_2 [label="6"];
    Xfb7afa2e20090ae7_1 [label="Call\l"];
    Xfb7afa2e20090ae7_2 -> Xfb7afa2e20090ae7_3 [label="11"];
    Xfb7afa2e20090ae7_2 [label="4 <- Use(cp(6.0))\l5 <- Use(cp(6.1))\lCall\l"];
    Xfb7afa2e20090ae7_3 -> Xfb7afa2e20090ae7_4 [label="8"];
    Xfb7afa2e20090ae7_3 [label="10 <- Cast-PtrToPtr mv(11)\l9 <- Use(cp((*10)))\lCall\l"];
    Xfb7afa2e20090ae7_4 -> Xfb7afa2e20090ae7_5;
    Xfb7afa2e20090ae7_4 [label="13 <- Use(const ?_usize)\l14 <- Len((*5))\l15 <- Lt(cp(13), cp(14))\lAssert mv(15) == true\l"];
    Xfb7afa2e20090ae7_5 -> Xfb7afa2e20090ae7_7;
    Xfb7afa2e20090ae7_5 [label="12 <- Use(cp((*5)[_13]))\l7 <- Tuple (mv(8), mv(12))\l0 <- Adt{0} (mv(7))\lGoto\l"];
    Xfb7afa2e20090ae7_6 -> Xfb7afa2e20090ae7_7;
    Xfb7afa2e20090ae7_6 [label="16 <- Adt{12} ()\l0 <- Adt{1} (mv(16))\lGoto\l"];
    Xfb7afa2e20090ae7_7 [label="Return\l"];
  }
  Xfb7afa2e20090ae7_1 -> X6a907c8ba1da9e84_0 [label="cp(1),const ?_usize"];
  Xfb7afa2e20090ae7_2 -> X5e85acfe8a19755e_0 [label="cp(4)"];
  Xfb7afa2e20090ae7_3 -> X4b040c9530995baf_0 [label="mv(9)"];
  subgraph cluster_92 {
    label="processor::batch::process\n_batch";
    style="filled";
    color=lightgray;
    node_93 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[pinocchio::account_info::AccountInfo]\l2 = &[u8]\l3 = bool\l4 = usize\l5 = &[u8]\l6 = pinocchio::program_error::ProgramError\l7 = spl_token_interface::error::TokenError\l8 = usize\l9 = u8\l10 = &u8\l11 = &[u8]\l12 = usize\l13 = usize\l14 = u8\l15 = &u8\l16 = &[u8]\l17 = (usize, bool)\l18 = bool\l19 = usize\l20 = &[u8]\l21 = bool\l22 = pinocchio::program_error::ProgramError\l23 = spl_token_interface::error::TokenError\l24 = bool\l25 = usize\l26 = &[pinocchio::account_info::AccountInfo]\l27 = pinocchio::program_error::ProgramError\l28 = &[pinocchio::account_info::AccountInfo]\l29 = &[u8]\l30 = (&[pinocchio::account_info::AccountInfo], &[u8])\l31 = &[pinocchio::account_info::AccountInfo]\l32 = &[pinocchio::account_info::AccountInfo]\l33 = core::ops::RangeTo<usize>\l34 = &[u8]\l35 = &[u8]\l36 = core::ops::Range<usize>\l37 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>>\l38 = core::result::Result<(), pinocchio::program_error::ProgramError>\l39 = isize\l40 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l41 = bool\l42 = usize\l43 = &[u8]\l44 = &[pinocchio::account_info::AccountInfo]\l45 = &[pinocchio::account_info::AccountInfo]\l46 = core::ops::RangeFrom<usize>\l47 = &[u8]\l48 = &[u8]\l49 = core::ops::RangeFrom<usize>\l", style="filled", color=palegreen3];
    Xfd5a8332d4d69684_0 -> Xfd5a8332d4d69684_1;
    Xfd5a8332d4d69684_0 [label="Goto\l"];
    Xfd5a8332d4d69684_1 -> Xfd5a8332d4d69684_4 [label="0"];
    Xfd5a8332d4d69684_1 -> Xfd5a8332d4d69684_2 [label="other"];
    Xfd5a8332d4d69684_1 [label="5 <- Use(cp(2))\l4 <- PtrMetadata(mv(5))\l3 <- Lt(mv(4), const ?_usize)\lSwitchInt mv(3)\l"];
    Xfd5a8332d4d69684_2 -> Xfd5a8332d4d69684_3 [label="6"];
    Xfd5a8332d4d69684_2 [label="7 <- Adt{12} ()\lCall\l"];
    Xfd5a8332d4d69684_3 -> Xfd5a8332d4d69684_25;
    Xfd5a8332d4d69684_3 [label="0 <- Adt{1} (mv(6))\lGoto\l"];
    Xfd5a8332d4d69684_4 -> Xfd5a8332d4d69684_5 [label="10"];
    Xfd5a8332d4d69684_4 [label="11 <- Use(cp(2))\lCall\l"];
    Xfd5a8332d4d69684_5 -> Xfd5a8332d4d69684_6 [label="15"];
    Xfd5a8332d4d69684_5 [label="9 <- Use(cp((*10)))\l8 <- Cast-IntToInt mv(9)\l16 <- Use(cp(2))\lCall\l"];
    Xfd5a8332d4d69684_6 -> Xfd5a8332d4d69684_7;
    Xfd5a8332d4d69684_6 [label="14 <- Use(cp((*15)))\l13 <- Cast-IntToInt mv(14)\l17 <- chkd-Add(const ?_usize, cp(13))\lAssert mv(17.1) == false\l"];
    Xfd5a8332d4d69684_7 -> Xfd5a8332d4d69684_8 [label="0"];
    Xfd5a8332d4d69684_7 -> Xfd5a8332d4d69684_9 [label="other"];
    Xfd5a8332d4d69684_7 [label="12 <- Use(mv(17.0))\l20 <- Use(cp(2))\l19 <- PtrMetadata(mv(20))\l18 <- Lt(mv(19), cp(12))\lSwitchInt mv(18)\l"];
    Xfd5a8332d4d69684_8 -> Xfd5a8332d4d69684_11 [label="0"];
    Xfd5a8332d4d69684_8 -> Xfd5a8332d4d69684_9 [label="other"];
    Xfd5a8332d4d69684_8 [label="21 <- Eq(cp(12), const ?_usize)\lSwitchInt mv(21)\l"];
    Xfd5a8332d4d69684_9 -> Xfd5a8332d4d69684_10 [label="22"];
    Xfd5a8332d4d69684_9 [label="23 <- Adt{12} ()\lCall\l"];
    Xfd5a8332d4d69684_10 -> Xfd5a8332d4d69684_25;
    Xfd5a8332d4d69684_10 [label="0 <- Adt{1} (mv(22))\lGoto\l"];
    Xfd5a8332d4d69684_11 -> Xfd5a8332d4d69684_13 [label="0"];
    Xfd5a8332d4d69684_11 -> Xfd5a8332d4d69684_12 [label="other"];
    Xfd5a8332d4d69684_11 [label="26 <- Use(cp(1))\l25 <- PtrMetadata(mv(26))\l24 <- Lt(mv(25), cp(8))\lSwitchInt mv(24)\l"];
    Xfd5a8332d4d69684_12 -> Xfd5a8332d4d69684_25;
    Xfd5a8332d4d69684_12 [label="27 <- Adt{10} ()\l0 <- Adt{1} (mv(27))\lGoto\l"];
    Xfd5a8332d4d69684_13 -> Xfd5a8332d4d69684_14 [label="31"];
    Xfd5a8332d4d69684_13 [label="32 <- Use(cp(1))\l33 <- Adt{0} (cp(8))\lCall\l"];
    Xfd5a8332d4d69684_14 -> Xfd5a8332d4d69684_15 [label="34"];
    Xfd5a8332d4d69684_14 [label="35 <- Use(cp(2))\l36 <- Adt{0} (const ?_usize, cp(12))\lCall\l"];
    Xfd5a8332d4d69684_15 -> Xfd5a8332d4d69684_16 [label="38"];
    Xfd5a8332d4d69684_15 [label="30 <- Tuple (mv(31), mv(34))\l28 <- Use(cp(30.0))\l29 <- Use(cp(30.1))\lCall\l"];
    Xfd5a8332d4d69684_16 -> Xfd5a8332d4d69684_17 [label="37"];
    Xfd5a8332d4d69684_16 [label="Call\l"];
    Xfd5a8332d4d69684_17 -> Xfd5a8332d4d69684_19 [label="0"];
    Xfd5a8332d4d69684_17 -> Xfd5a8332d4d69684_20 [label="1"];
    Xfd5a8332d4d69684_17 -> Xfd5a8332d4d69684_18 [label="other"];
    Xfd5a8332d4d69684_17 [label="39 <- Discriminant(37)\lSwitchInt mv(39)\l"];
    Xfd5a8332d4d69684_18 [label="Unreachable\l"];
    Xfd5a8332d4d69684_19 -> Xfd5a8332d4d69684_22 [label="0"];
    Xfd5a8332d4d69684_19 -> Xfd5a8332d4d69684_21 [label="other"];
    Xfd5a8332d4d69684_19 [label="43 <- Use(cp(2))\l42 <- PtrMetadata(mv(43))\l41 <- Eq(cp(12), mv(42))\lSwitchInt mv(41)\l"];
    Xfd5a8332d4d69684_20 -> Xfd5a8332d4d69684_25 [label="0"];
    Xfd5a8332d4d69684_20 [label="40 <- Use(mv((37 as variant 1).0))\lCall\l"];
    Xfd5a8332d4d69684_21 -> Xfd5a8332d4d69684_25;
    Xfd5a8332d4d69684_21 [label="0 <- Adt{0} (const ())\lGoto\l"];
    Xfd5a8332d4d69684_22 -> Xfd5a8332d4d69684_23 [label="44"];
    Xfd5a8332d4d69684_22 [label="45 <- Use(cp(1))\l46 <- Adt{0} (cp(8))\lCall\l"];
    Xfd5a8332d4d69684_23 -> Xfd5a8332d4d69684_24 [label="47"];
    Xfd5a8332d4d69684_23 [label="1 <- Use(cp(44))\l48 <- Use(cp(2))\l49 <- Adt{0} (cp(12))\lCall\l"];
    Xfd5a8332d4d69684_24 -> Xfd5a8332d4d69684_1;
    Xfd5a8332d4d69684_24 [label="2 <- Use(cp(47))\lGoto\l"];
    Xfd5a8332d4d69684_25 [label="Return\l"];
  }
  Xfd5a8332d4d69684_2 -> X3e3db5977da52381_0 [label="mv(7)"];
  Xfd5a8332d4d69684_4 -> Xe2dd8d6d8ab56bef_0 [label="mv(11),const ?_usize"];
  Xfd5a8332d4d69684_5 -> Xe2dd8d6d8ab56bef_0 [label="mv(16),const ?_usize"];
  Xfd5a8332d4d69684_9 -> X3e3db5977da52381_0 [label="mv(23)"];
  Xfd5a8332d4d69684_13 -> X76d4fee106df2abc_0 [label="mv(32),mv(33)"];
  Xfd5a8332d4d69684_14 -> X63c3503b3e7fa274_0 [label="mv(35),mv(36)"];
  Xfd5a8332d4d69684_15 -> Xdb069c516746123a_0 [label="cp(28),cp(29)"];
  Xfd5a8332d4d69684_16 -> X2272e127fe823423_0 [label="mv(38)"];
  Xfd5a8332d4d69684_20 -> X5adbeff4b5cb293e_0 [label="mv(40)"];
  Xfd5a8332d4d69684_22 -> X7354e97359dec8c1_0 [label="mv(45),mv(46)"];
  Xfd5a8332d4d69684_23 -> Xac6bf6e65b32d0d0_0 [label="mv(48),mv(49)"];
  subgraph cluster_94 {
    label="processor::shared::mint_t\no::process_mint_to";
    style="filled";
    color=lightgray;
    node_95 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[pinocchio::account_info::AccountInfo]\l2 = u64\l3 = core::option::Option<u8>\l4 = pinocchio::program_error::ProgramError\l5 = &pinocchio::account_info::AccountInfo\l6 = &pinocchio::account_info::AccountInfo\l7 = &pinocchio::account_info::AccountInfo\l8 = &[pinocchio::account_info::AccountInfo]\l9 = usize\l10 = bool\l11 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, &mut spl_token_interface::state::account::Account>\l12 = core::result::Result<&mut spl_token_interface::state::account::Account, pinocchio::program_error::ProgramError>\l13 = &mut [u8]\l14 = isize\l15 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l16 = &mut spl_token_interface::state::account::Account\l17 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, bool>\l18 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l19 = &spl_token_interface::state::account::Account\l20 = isize\l21 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l22 = bool\l23 = pinocchio::program_error::ProgramError\l24 = spl_token_interface::error::TokenError\l25 = bool\l26 = &spl_token_interface::state::account::Account\l27 = pinocchio::program_error::ProgramError\l28 = spl_token_interface::error::TokenError\l29 = bool\l30 = &&[u8; 32]\l31 = &[u8; 32]\l32 = &&[u8; 32]\l33 = &[u8; 32]\l34 = pinocchio::program_error::ProgramError\l35 = spl_token_interface::error::TokenError\l36 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, &mut spl_token_interface::state::mint::Mint>\l37 = core::result::Result<&mut spl_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l38 = &mut [u8]\l39 = isize\l40 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l41 = &mut spl_token_interface::state::mint::Mint\l42 = isize\l43 = u8\l44 = bool\l45 = u8\l46 = pinocchio::program_error::ProgramError\l47 = spl_token_interface::error::TokenError\l48 = core::option::Option<&[u8; 32]>\l49 = &spl_token_interface::state::mint::Mint\l50 = isize\l51 = &[u8; 32]\l52 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>>\l53 = core::result::Result<(), pinocchio::program_error::ProgramError>\l54 = isize\l55 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l56 = pinocchio::program_error::ProgramError\l57 = spl_token_interface::error::TokenError\l58 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>>\l59 = core::result::Result<(), pinocchio::program_error::ProgramError>\l60 = isize\l61 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l62 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>>\l63 = core::result::Result<(), pinocchio::program_error::ProgramError>\l64 = isize\l65 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l66 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, spl_token_interface::error::TokenError>, u64>\l67 = core::result::Result<u64, spl_token_interface::error::TokenError>\l68 = core::option::Option<u64>\l69 = u64\l70 = &spl_token_interface::state::mint::Mint\l71 = spl_token_interface::error::TokenError\l72 = isize\l73 = core::result::Result<core::convert::Infallible, spl_token_interface::error::TokenError>\l74 = u64\l75 = ()\l76 = ()\l77 = u64\l78 = u64\l79 = &spl_token_interface::state::account::Account\l80 = (u64, bool)\l", style="filled", color=palegreen3];
    X19742818ab565d6b_0 -> X19742818ab565d6b_2 [label="0"];
    X19742818ab565d6b_0 -> X19742818ab565d6b_1 [label="other"];
    X19742818ab565d6b_0 [label="9 <- Len((*1))\l10 <- Ge(mv(9), const ?_usize)\lSwitchInt mv(10)\l"];
    X19742818ab565d6b_1 -> X19742818ab565d6b_3 [label="13"];
    X19742818ab565d6b_1 [label="5 <- & (*1)[0]\l6 <- & (*1)[1]\l7 <- & (*1)[2]\l8 <- & (*1)[3..-0]\lCall\l"];
    X19742818ab565d6b_2 -> X19742818ab565d6b_61;
    X19742818ab565d6b_2 [label="4 <- Adt{10} ()\l0 <- Adt{1} (mv(4))\lGoto\l"];
    X19742818ab565d6b_3 -> X19742818ab565d6b_4 [label="12"];
    X19742818ab565d6b_3 [label="Call\l"];
    X19742818ab565d6b_4 -> X19742818ab565d6b_5 [label="11"];
    X19742818ab565d6b_4 [label="Call\l"];
    X19742818ab565d6b_5 -> X19742818ab565d6b_7 [label="0"];
    X19742818ab565d6b_5 -> X19742818ab565d6b_8 [label="1"];
    X19742818ab565d6b_5 -> X19742818ab565d6b_6 [label="other"];
    X19742818ab565d6b_5 [label="14 <- Discriminant(11)\lSwitchInt mv(14)\l"];
    X19742818ab565d6b_6 [label="Unreachable\l"];
    X19742818ab565d6b_7 -> X19742818ab565d6b_9 [label="18"];
    X19742818ab565d6b_7 [label="16 <- Use(mv((11 as variant 0).0))\l19 <- & (*16)\lCall\l"];
    X19742818ab565d6b_8 -> X19742818ab565d6b_61 [label="0"];
    X19742818ab565d6b_8 [label="15 <- Use(mv((11 as variant 1).0))\lCall\l"];
    X19742818ab565d6b_9 -> X19742818ab565d6b_10 [label="17"];
    X19742818ab565d6b_9 [label="Call\l"];
    X19742818ab565d6b_10 -> X19742818ab565d6b_11 [label="0"];
    X19742818ab565d6b_10 -> X19742818ab565d6b_12 [label="1"];
    X19742818ab565d6b_10 -> X19742818ab565d6b_6 [label="other"];
    X19742818ab565d6b_10 [label="20 <- Discriminant(17)\lSwitchInt mv(20)\l"];
    X19742818ab565d6b_11 -> X19742818ab565d6b_14 [label="0"];
    X19742818ab565d6b_11 -> X19742818ab565d6b_13 [label="other"];
    X19742818ab565d6b_11 [label="22 <- Use(cp((17 as variant 0).0))\lSwitchInt cp(22)\l"];
    X19742818ab565d6b_12 -> X19742818ab565d6b_61 [label="0"];
    X19742818ab565d6b_12 [label="21 <- Use(mv((17 as variant 1).0))\lCall\l"];
    X19742818ab565d6b_13 -> X19742818ab565d6b_15 [label="23"];
    X19742818ab565d6b_13 [label="24 <- Adt{17} ()\lCall\l"];
    X19742818ab565d6b_14 -> X19742818ab565d6b_16 [label="25"];
    X19742818ab565d6b_14 [label="26 <- & (*16)\lCall\l"];
    X19742818ab565d6b_15 -> X19742818ab565d6b_61;
    X19742818ab565d6b_15 [label="0 <- Adt{1} (mv(23))\lGoto\l"];
    X19742818ab565d6b_16 -> X19742818ab565d6b_19 [label="0"];
    X19742818ab565d6b_16 -> X19742818ab565d6b_17 [label="other"];
    X19742818ab565d6b_16 [label="SwitchInt mv(25)\l"];
    X19742818ab565d6b_17 -> X19742818ab565d6b_18 [label="27"];
    X19742818ab565d6b_17 [label="28 <- Adt{10} ()\lCall\l"];
    X19742818ab565d6b_18 -> X19742818ab565d6b_61;
    X19742818ab565d6b_18 [label="0 <- Adt{1} (mv(27))\lGoto\l"];
    X19742818ab565d6b_19 -> X19742818ab565d6b_20 [label="31"];
    X19742818ab565d6b_19 [label="Call\l"];
    X19742818ab565d6b_20 -> X19742818ab565d6b_21 [label="29"];
    X19742818ab565d6b_20 [label="30 <- & 31\l33 <- & (*16).0\l32 <- & 33\lCall\l"];
    X19742818ab565d6b_21 -> X19742818ab565d6b_24 [label="0"];
    X19742818ab565d6b_21 -> X19742818ab565d6b_22 [label="other"];
    X19742818ab565d6b_21 [label="SwitchInt mv(29)\l"];
    X19742818ab565d6b_22 -> X19742818ab565d6b_23 [label="34"];
    X19742818ab565d6b_22 [label="35 <- Adt{3} ()\lCall\l"];
    X19742818ab565d6b_23 -> X19742818ab565d6b_61;
    X19742818ab565d6b_23 [label="0 <- Adt{1} (mv(34))\lGoto\l"];
    X19742818ab565d6b_24 -> X19742818ab565d6b_25 [label="38"];
    X19742818ab565d6b_24 [label="Call\l"];
    X19742818ab565d6b_25 -> X19742818ab565d6b_26 [label="37"];
    X19742818ab565d6b_25 [label="Call\l"];
    X19742818ab565d6b_26 -> X19742818ab565d6b_27 [label="36"];
    X19742818ab565d6b_26 [label="Call\l"];
    X19742818ab565d6b_27 -> X19742818ab565d6b_28 [label="0"];
    X19742818ab565d6b_27 -> X19742818ab565d6b_29 [label="1"];
    X19742818ab565d6b_27 -> X19742818ab565d6b_6 [label="other"];
    X19742818ab565d6b_27 [label="39 <- Discriminant(36)\lSwitchInt mv(39)\l"];
    X19742818ab565d6b_28 -> X19742818ab565d6b_30 [label="1"];
    X19742818ab565d6b_28 -> X19742818ab565d6b_33 [label="0"];
    X19742818ab565d6b_28 -> X19742818ab565d6b_6 [label="other"];
    X19742818ab565d6b_28 [label="41 <- Use(mv((36 as variant 0).0))\l42 <- Discriminant(3)\lSwitchInt mv(42)\l"];
    X19742818ab565d6b_29 -> X19742818ab565d6b_61 [label="0"];
    X19742818ab565d6b_29 [label="40 <- Use(mv((36 as variant 1).0))\lCall\l"];
    X19742818ab565d6b_30 -> X19742818ab565d6b_33 [label="0"];
    X19742818ab565d6b_30 -> X19742818ab565d6b_31 [label="other"];
    X19742818ab565d6b_30 [label="43 <- Use(cp((3 as variant 1).0))\l45 <- Use(cp((*41).2))\l44 <- Ne(cp(43), mv(45))\lSwitchInt mv(44)\l"];
    X19742818ab565d6b_31 -> X19742818ab565d6b_32 [label="46"];
    X19742818ab565d6b_31 [label="47 <- Adt{18} ()\lCall\l"];
    X19742818ab565d6b_32 -> X19742818ab565d6b_61;
    X19742818ab565d6b_32 [label="0 <- Adt{1} (mv(46))\lGoto\l"];
    X19742818ab565d6b_33 -> X19742818ab565d6b_34 [label="48"];
    X19742818ab565d6b_33 [label="49 <- & (*41)\lCall\l"];
    X19742818ab565d6b_34 -> X19742818ab565d6b_35 [label="0"];
    X19742818ab565d6b_34 -> X19742818ab565d6b_36 [label="1"];
    X19742818ab565d6b_34 -> X19742818ab565d6b_6 [label="other"];
    X19742818ab565d6b_34 [label="50 <- Discriminant(48)\lSwitchInt mv(50)\l"];
    X19742818ab565d6b_35 -> X19742818ab565d6b_41 [label="56"];
    X19742818ab565d6b_35 [label="57 <- Adt{5} ()\lCall\l"];
    X19742818ab565d6b_36 -> X19742818ab565d6b_37 [label="53"];
    X19742818ab565d6b_36 [label="51 <- Use(cp((48 as variant 1).0))\lCall\l"];
    X19742818ab565d6b_37 -> X19742818ab565d6b_38 [label="52"];
    X19742818ab565d6b_37 [label="Call\l"];
    X19742818ab565d6b_38 -> X19742818ab565d6b_39 [label="0"];
    X19742818ab565d6b_38 -> X19742818ab565d6b_40 [label="1"];
    X19742818ab565d6b_38 -> X19742818ab565d6b_6 [label="other"];
    X19742818ab565d6b_38 [label="54 <- Discriminant(52)\lSwitchInt mv(54)\l"];
    X19742818ab565d6b_39 -> X19742818ab565d6b_42 [label="0"];
    X19742818ab565d6b_39 -> X19742818ab565d6b_43 [label="other"];
    X19742818ab565d6b_39 [label="SwitchInt cp(2)\l"];
    X19742818ab565d6b_40 -> X19742818ab565d6b_61 [label="0"];
    X19742818ab565d6b_40 [label="55 <- Use(mv((52 as variant 1).0))\lCall\l"];
    X19742818ab565d6b_41 -> X19742818ab565d6b_61;
    X19742818ab565d6b_41 [label="0 <- Adt{1} (mv(56))\lGoto\l"];
    X19742818ab565d6b_42 -> X19742818ab565d6b_44 [label="59"];
    X19742818ab565d6b_42 [label="Call\l"];
    X19742818ab565d6b_43 -> X19742818ab565d6b_51 [label="69"];
    X19742818ab565d6b_43 [label="70 <- & (*41)\lCall\l"];
    X19742818ab565d6b_44 -> X19742818ab565d6b_45 [label="58"];
    X19742818ab565d6b_44 [label="Call\l"];
    X19742818ab565d6b_45 -> X19742818ab565d6b_46 [label="0"];
    X19742818ab565d6b_45 -> X19742818ab565d6b_47 [label="1"];
    X19742818ab565d6b_45 -> X19742818ab565d6b_6 [label="other"];
    X19742818ab565d6b_45 [label="60 <- Discriminant(58)\lSwitchInt mv(60)\l"];
    X19742818ab565d6b_46 -> X19742818ab565d6b_48 [label="63"];
    X19742818ab565d6b_46 [label="Call\l"];
    X19742818ab565d6b_47 -> X19742818ab565d6b_61 [label="0"];
    X19742818ab565d6b_47 [label="61 <- Use(mv((58 as variant 1).0))\lCall\l"];
    X19742818ab565d6b_48 -> X19742818ab565d6b_49 [label="62"];
    X19742818ab565d6b_48 [label="Call\l"];
    X19742818ab565d6b_49 -> X19742818ab565d6b_60 [label="0"];
    X19742818ab565d6b_49 -> X19742818ab565d6b_50 [label="1"];
    X19742818ab565d6b_49 -> X19742818ab565d6b_6 [label="other"];
    X19742818ab565d6b_49 [label="64 <- Discriminant(62)\lSwitchInt mv(64)\l"];
    X19742818ab565d6b_50 -> X19742818ab565d6b_61 [label="0"];
    X19742818ab565d6b_50 [label="65 <- Use(mv((62 as variant 1).0))\lCall\l"];
    X19742818ab565d6b_51 -> X19742818ab565d6b_52 [label="68"];
    X19742818ab565d6b_51 [label="Call\l"];
    X19742818ab565d6b_52 -> X19742818ab565d6b_53 [label="67"];
    X19742818ab565d6b_52 [label="71 <- Adt{14} ()\lCall\l"];
    X19742818ab565d6b_53 -> X19742818ab565d6b_54 [label="66"];
    X19742818ab565d6b_53 [label="Call\l"];
    X19742818ab565d6b_54 -> X19742818ab565d6b_55 [label="0"];
    X19742818ab565d6b_54 -> X19742818ab565d6b_56 [label="1"];
    X19742818ab565d6b_54 -> X19742818ab565d6b_6 [label="other"];
    X19742818ab565d6b_54 [label="72 <- Discriminant(66)\lSwitchInt mv(72)\l"];
    X19742818ab565d6b_55 -> X19742818ab565d6b_57 [label="75"];
    X19742818ab565d6b_55 [label="74 <- Use(cp((66 as variant 0).0))\lCall\l"];
    X19742818ab565d6b_56 -> X19742818ab565d6b_61 [label="0"];
    X19742818ab565d6b_56 [label="73 <- Use(mv((66 as variant 1).0))\lCall\l"];
    X19742818ab565d6b_57 -> X19742818ab565d6b_58 [label="78"];
    X19742818ab565d6b_57 [label="79 <- & (*16)\lCall\l"];
    X19742818ab565d6b_58 -> X19742818ab565d6b_59;
    X19742818ab565d6b_58 [label="80 <- chkd-Add(cp(78), cp(2))\lAssert mv(80.1) == false\l"];
    X19742818ab565d6b_59 -> X19742818ab565d6b_60 [label="76"];
    X19742818ab565d6b_59 [label="77 <- Use(mv(80.0))\lCall\l"];
    X19742818ab565d6b_60 -> X19742818ab565d6b_61;
    X19742818ab565d6b_60 [label="0 <- Adt{0} (const ())\lGoto\l"];
    X19742818ab565d6b_61 [label="Return\l"];
  }
  X19742818ab565d6b_1 -> X5492146546091aad_0 [label="cp(6)"];
  X19742818ab565d6b_3 -> X72b69cd7b34c68aa_0 [label="cp(13)"];
  X19742818ab565d6b_4 -> X4bab5789df6a8cfa_0 [label="mv(12)"];
  X19742818ab565d6b_7 -> X38533238a96500f8_0 [label="mv(19)"];
  X19742818ab565d6b_8 -> X5adbeff4b5cb293e_0 [label="mv(15)"];
  X19742818ab565d6b_9 -> X94faba497d3a8d24_0 [label="mv(18)"];
  X19742818ab565d6b_12 -> X5adbeff4b5cb293e_0 [label="mv(21)"];
  X19742818ab565d6b_13 -> X3e3db5977da52381_0 [label="mv(24)"];
  X19742818ab565d6b_14 -> X439fceefbd0e681_0 [label="mv(26)"];
  X19742818ab565d6b_17 -> X3e3db5977da52381_0 [label="mv(28)"];
  X19742818ab565d6b_19 -> X8817de218f598320_0 [label="cp(5)"];
  X19742818ab565d6b_20 -> X5d6c1de00eb04104_0 [label="mv(30),mv(32)"];
  X19742818ab565d6b_22 -> X3e3db5977da52381_0 [label="mv(35)"];
  X19742818ab565d6b_24 -> X5492146546091aad_0 [label="cp(5)"];
  X19742818ab565d6b_25 -> Xf62c358491e2a13c_0 [label="cp(38)"];
  X19742818ab565d6b_26 -> Xfdd8ae4a78e336d8_0 [label="mv(37)"];
  X19742818ab565d6b_29 -> X5adbeff4b5cb293e_0 [label="mv(40)"];
  X19742818ab565d6b_31 -> X3e3db5977da52381_0 [label="mv(47)"];
  X19742818ab565d6b_33 -> Xed7a553ee817a9d7_0 [label="mv(49)"];
  X19742818ab565d6b_35 -> X3e3db5977da52381_0 [label="mv(57)"];
  X19742818ab565d6b_36 -> X32fcb7e0b1123f45_0 [label="cp(51),cp(7),cp(8)"];
  X19742818ab565d6b_37 -> X2272e127fe823423_0 [label="mv(53)"];
  X19742818ab565d6b_40 -> X5adbeff4b5cb293e_0 [label="mv(55)"];
  X19742818ab565d6b_42 -> X234cb1e57fb61e21_0 [label="cp(5)"];
  X19742818ab565d6b_43 -> Xb0f37d884f3a7efa_0 [label="mv(70)"];
  X19742818ab565d6b_44 -> X2272e127fe823423_0 [label="mv(59)"];
  X19742818ab565d6b_46 -> X234cb1e57fb61e21_0 [label="cp(6)"];
  X19742818ab565d6b_47 -> X5adbeff4b5cb293e_0 [label="mv(61)"];
  X19742818ab565d6b_48 -> X2272e127fe823423_0 [label="mv(63)"];
  X19742818ab565d6b_50 -> X5adbeff4b5cb293e_0 [label="mv(65)"];
  X19742818ab565d6b_51 -> X2204c2bd8acfd852_0 [label="mv(69),cp(2)"];
  X19742818ab565d6b_52 -> X31ae1ab89419b067_0 [label="mv(68),mv(71)"];
  X19742818ab565d6b_53 -> X982e7138866543ff_0 [label="mv(67)"];
  X19742818ab565d6b_55 -> X9072ae926fb28797_0 [label="cp(41),cp(74)"];
  X19742818ab565d6b_56 -> X619ee3ba0019d783_0 [label="mv(73)"];
  X19742818ab565d6b_57 -> Xfeb9911cbc7a7b7a_0 [label="mv(79)"];
  X19742818ab565d6b_59 -> X1c99c2b6b9095250_0 [label="cp(16),mv(77)"];
  subgraph cluster_96 {
    label="<&() \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_97 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&()\l2 = &mut core::fmt::Formatter<'_>\l3 = &()\l", style="filled", color=palegreen3];
    Xb020e88d82f0081_0 -> Xb020e88d82f0081_1 [label="0"];
    Xb020e88d82f0081_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    Xb020e88d82f0081_1 [label="Return\l"];
  }
  Xb020e88d82f0081_0 -> X9b9792a9c55c7503_0 [label="mv(3),mv(2)"];
  subgraph cluster_98 {
    label="<&core::result::Result<()\n, \npinocchio::program_error:\n:ProgramError> \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_99 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&core::result::Result<(), pinocchio::program_error::ProgramError>\l2 = &mut core::fmt::Formatter<'_>\l3 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    Xc109fb84c69e6807_0 -> Xc109fb84c69e6807_1 [label="0"];
    Xc109fb84c69e6807_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    Xc109fb84c69e6807_1 [label="Return\l"];
  }
  Xc109fb84c69e6807_0 -> X43f71b6e2d20bf4b_0 [label="mv(3),mv(2)"];
  subgraph cluster_100 {
    label="<&u32 \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_101 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&u32\l2 = &mut core::fmt::Formatter<'_>\l3 = &u32\l", style="filled", color=palegreen3];
    Xd05e08a93c55e760_0 -> Xd05e08a93c55e760_1 [label="0"];
    Xd05e08a93c55e760_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    Xd05e08a93c55e760_1 [label="Return\l"];
  }
  Xd05e08a93c55e760_0 -> X86616ecd3718916b_0 [label="mv(3),mv(2)"];
  subgraph cluster_102 {
    label="<&pinocchio::program_erro\nr::ProgramError \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_103 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&pinocchio::program_error::ProgramError\l2 = &mut core::fmt::Formatter<'_>\l3 = &pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    Xb6b7c9dfdacecaf3_0 -> Xb6b7c9dfdacecaf3_1 [label="0"];
    Xb6b7c9dfdacecaf3_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    Xb6b7c9dfdacecaf3_1 [label="Return\l"];
  }
  Xb6b7c9dfdacecaf3_0 -> X4d96ea5120bb9c65_0 [label="mv(3),mv(2)"];
  subgraph cluster_104 {
    label="<() \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_105 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &()\l2 = &mut core::fmt::Formatter<'_>\l", style="filled", color=palegreen3];
    X9b9792a9c55c7503_0 -> X9b9792a9c55c7503_1 [label="0"];
    X9b9792a9c55c7503_0 [label="Call\l"];
    X9b9792a9c55c7503_1 [label="Return\l"];
  }
  X9b9792a9c55c7503_0 -> X5b44578fd65a3909_0 [label="mv(2),const &str"];
  subgraph cluster_106 {
    label="<usize \nas \ncore::iter::Step>::forwar\nd_unchecked";
    style="filled";
    color=lightgray;
    node_107 [label="LOCALS\l0 = usize\l1 = usize\l2 = usize\l3 = bool\l4 = ()\l", style="filled", color=palegreen3];
    Xf98c0f07694c6176_0 -> Xf98c0f07694c6176_2 [label="0"];
    Xf98c0f07694c6176_0 -> Xf98c0f07694c6176_1 [label="other"];
    Xf98c0f07694c6176_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    Xf98c0f07694c6176_1 -> Xf98c0f07694c6176_2 [label="4"];
    Xf98c0f07694c6176_1 [label="Call\l"];
    Xf98c0f07694c6176_2 [label="Storage Dead _3\l0 <- AddUnchecked(cp(1), cp(2))\lReturn\l"];
  }
  Xf98c0f07694c6176_1 -> X6d16759fb07448a4_0 [label="cp(1),cp(2)"];
  subgraph cluster_108 {
    label="core::intrinsics::cold_pa\nth";
    style="filled";
    color=lightgray;
    node_109 [label="LOCALS\l0 = ()\l", style="filled", color=palegreen3];
    Xdefdeca74782fa05_0 [label="Return\l"];
  }
  subgraph cluster_110 {
    label="<usize \nas \ncore::cmp::Ord>::min";
    style="filled";
    color=lightgray;
    node_111 [label="LOCALS\l0 = usize\l1 = usize\l2 = usize\l", style="filled", color=palegreen3];
    X23a18a7f1b1af606_0 -> X23a18a7f1b1af606_1 [label="0"];
    X23a18a7f1b1af606_0 [label="Call\l"];
    X23a18a7f1b1af606_1 [label="Return\l"];
  }
  X23a18a7f1b1af606_0 -> X417bb8c927ddb4b5_0 [label="mv(1),mv(2),const for<'a, 'b> fn(&'a usize, &'b usize) -> core::cmp::Ordering {<usize as core::cmp::Ord>::cmp}"];
  subgraph cluster_112 {
    label="core::cmp::min::<usize>";
    style="filled";
    color=lightgray;
    node_113 [label="LOCALS\l0 = usize\l1 = usize\l2 = usize\l", style="filled", color=palegreen3];
    Xd4c8399dbe49afd_0 -> Xd4c8399dbe49afd_1 [label="0"];
    Xd4c8399dbe49afd_0 [label="Call\l"];
    Xd4c8399dbe49afd_1 [label="Return\l"];
  }
  Xd4c8399dbe49afd_0 -> X23a18a7f1b1af606_0 [label="mv(1),mv(2)"];
  subgraph cluster_114 {
    label="core::cmp::impls::<impl \ncore::cmp::Ord \nfor \nusize>::cmp";
    style="filled";
    color=lightgray;
    node_115 [label="LOCALS\l0 = core::cmp::Ordering\l1 = &usize\l2 = &usize\l3 = usize\l4 = usize\l", style="filled", color=palegreen3];
    X32480caf21985110_0 [label="Storage Live _3\l3 <- Use(cp((*1)))\lStorage Live _4\l4 <- Use(cp((*2)))\l0 <- Cmp(mv(3), mv(4))\lStorage Dead _4\lStorage Dead _3\lReturn\l"];
  }
  subgraph cluster_116 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialEq \nfor \nu32>::eq";
    style="filled";
    color=lightgray;
    node_117 [label="LOCALS\l0 = bool\l1 = &u32\l2 = &u32\l3 = u32\l4 = u32\l", style="filled", color=palegreen3];
    Xd0d2a70fc3d265c5_0 [label="Storage Live _3\l3 <- Use(cp((*1)))\lStorage Live _4\l4 <- Use(cp((*2)))\l0 <- Eq(mv(3), mv(4))\lStorage Dead _4\lStorage Dead _3\lReturn\l"];
  }
  subgraph cluster_118 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialOrd \nfor \nusize>::lt";
    style="filled";
    color=lightgray;
    node_119 [label="LOCALS\l0 = bool\l1 = &usize\l2 = &usize\l3 = usize\l4 = usize\l", style="filled", color=palegreen3];
    Xb4d458fe7af2393d_0 [label="Storage Live _3\l3 <- Use(cp((*1)))\lStorage Live _4\l4 <- Use(cp((*2)))\l0 <- Lt(mv(3), mv(4))\lStorage Dead _4\lStorage Dead _3\lReturn\l"];
  }
  subgraph cluster_120 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialEq \nfor \n()>::eq";
    style="filled";
    color=lightgray;
    node_121 [label="LOCALS\l0 = bool\l1 = &()\l2 = &()\l", style="filled", color=palegreen3];
    Xd7393c030c57f210_0 [label="0 <- Use(const bool)\lReturn\l"];
  }
  subgraph cluster_122 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialEq \nfor \n&u32>::eq";
    style="filled";
    color=lightgray;
    node_123 [label="LOCALS\l0 = bool\l1 = &&u32\l2 = &&u32\l3 = &u32\l4 = &u32\l", style="filled", color=palegreen3];
    X1db5e3317e89911b_0 -> X1db5e3317e89911b_1 [label="0"];
    X1db5e3317e89911b_0 [label="3 <- Use(cp((*1)))\l4 <- Use(cp((*2)))\lCall\l"];
    X1db5e3317e89911b_1 [label="Return\l"];
  }
  X1db5e3317e89911b_0 -> Xd0d2a70fc3d265c5_0 [label="mv(3),mv(4)"];
  subgraph cluster_124 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialEq \nfor \n&[u8; \n32]>::eq";
    style="filled";
    color=lightgray;
    node_125 [label="LOCALS\l0 = bool\l1 = &&[u8; 32]\l2 = &&[u8; 32]\l3 = &[u8; 32]\l4 = &[u8; 32]\l", style="filled", color=palegreen3];
    X62e1ca1dfa9f1ff9_0 -> X62e1ca1dfa9f1ff9_1 [label="0"];
    X62e1ca1dfa9f1ff9_0 [label="3 <- Use(cp((*1)))\l4 <- Use(cp((*2)))\lCall\l"];
    X62e1ca1dfa9f1ff9_1 [label="Return\l"];
  }
  X62e1ca1dfa9f1ff9_0 -> Xe9ad0bcad84fb4ac_0 [label="mv(3),mv(4)"];
  subgraph cluster_126 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialEq \nfor \n&[u8; \n32]>::ne";
    style="filled";
    color=lightgray;
    node_127 [label="LOCALS\l0 = bool\l1 = &&[u8; 32]\l2 = &&[u8; 32]\l3 = &[u8; 32]\l4 = &[u8; 32]\l", style="filled", color=palegreen3];
    X5d6c1de00eb04104_0 -> X5d6c1de00eb04104_1 [label="0"];
    X5d6c1de00eb04104_0 [label="3 <- Use(cp((*1)))\l4 <- Use(cp((*2)))\lCall\l"];
    X5d6c1de00eb04104_1 [label="Return\l"];
  }
  X5d6c1de00eb04104_0 -> X6dec8e35a57ec51c_0 [label="mv(3),mv(4)"];
  subgraph cluster_128 {
    label="core::cmp::min_by::<usize\n, \nfor<'a, \n'b> \nfn(&'a \nusize, \n&'b \nusize) \n-> \ncore::cmp::Ordering \n{<usize \nas \ncore::cmp::Ord>::cmp}>";
    style="filled";
    color=lightgray;
    node_129 [label="LOCALS\l0 = usize\l1 = usize\l2 = usize\l3 = for<'a, 'b> fn(&'a usize, &'b usize) -> core::cmp::Ordering {<usize as core::cmp::Ord>::cmp}\l4 = core::cmp::Ordering\l5 = (&usize, &usize)\l6 = &usize\l7 = &usize\l8 = i8\l9 = bool\l10 = bool\l", style="filled", color=palegreen3];
    X417bb8c927ddb4b5_0 -> X417bb8c927ddb4b5_7 [label="Cleanup"];
    X417bb8c927ddb4b5_0 -> X417bb8c927ddb4b5_1 [label="4"];
    X417bb8c927ddb4b5_0 [label="10 <- Use(const bool)\l9 <- Use(const bool)\lStorage Live _4\lStorage Live _5\l6 <- & 1\l7 <- & 2\l5 <- Tuple (cp(6), cp(7))\lCall\l"];
    X417bb8c927ddb4b5_1 -> X417bb8c927ddb4b5_4 [label="255"];
    X417bb8c927ddb4b5_1 -> X417bb8c927ddb4b5_4 [label="0"];
    X417bb8c927ddb4b5_1 -> X417bb8c927ddb4b5_3 [label="1"];
    X417bb8c927ddb4b5_1 -> X417bb8c927ddb4b5_2 [label="other"];
    X417bb8c927ddb4b5_1 [label="Storage Dead _5\l8 <- Discriminant(4)\lSwitchInt mv(8)\l"];
    X417bb8c927ddb4b5_2 [label="Unreachable\l"];
    X417bb8c927ddb4b5_3 -> X417bb8c927ddb4b5_5;
    X417bb8c927ddb4b5_3 [label="0 <- Use(mv(2))\lStorage Dead _4\lGoto\l"];
    X417bb8c927ddb4b5_4 -> X417bb8c927ddb4b5_5 [label="0"];
    X417bb8c927ddb4b5_4 -> X417bb8c927ddb4b5_9 [label="other"];
    X417bb8c927ddb4b5_4 [label="10 <- Use(const bool)\l0 <- Use(mv(1))\lStorage Dead _4\lSwitchInt cp(9)\l"];
    X417bb8c927ddb4b5_5 -> X417bb8c927ddb4b5_6 [label="0"];
    X417bb8c927ddb4b5_5 -> X417bb8c927ddb4b5_10 [label="other"];
    X417bb8c927ddb4b5_5 [label="SwitchInt cp(10)\l"];
    X417bb8c927ddb4b5_6 [label="Return\l"];
    X417bb8c927ddb4b5_7 -> X417bb8c927ddb4b5_12;
    X417bb8c927ddb4b5_7 [label="Drop 2\l"];
    X417bb8c927ddb4b5_8 [label="Resume\l"];
    X417bb8c927ddb4b5_9 -> X417bb8c927ddb4b5_12 [label="Cleanup"];
    X417bb8c927ddb4b5_9 -> X417bb8c927ddb4b5_6;
    X417bb8c927ddb4b5_9 [label="Drop 2\l"];
    X417bb8c927ddb4b5_10 -> X417bb8c927ddb4b5_6;
    X417bb8c927ddb4b5_10 [label="Drop 1\l"];
    X417bb8c927ddb4b5_11 -> X417bb8c927ddb4b5_8;
    X417bb8c927ddb4b5_11 [label="Drop 1\l"];
    X417bb8c927ddb4b5_12 -> X417bb8c927ddb4b5_8 [label="0"];
    X417bb8c927ddb4b5_12 -> X417bb8c927ddb4b5_11 [label="other"];
    X417bb8c927ddb4b5_12 [label="SwitchInt cp(10)\l"];
  }
  X417bb8c927ddb4b5_0 -> Xa7d822d8acd5c8ee_0 [label="mv(3),mv(5)"];
  subgraph cluster_130 {
    label="<spl_token_interface::sta\nte::account_state::Accoun\ntState \nas \ncore::cmp::PartialEq>::ne";
    style="filled";
    color=lightgray;
    node_131 [label="LOCALS\l0 = bool\l1 = &spl_token_interface::state::account_state::AccountState\l2 = &spl_token_interface::state::account_state::AccountState\l3 = bool\l", style="filled", color=palegreen3];
    Xd5b4a5747e6ff805_0 -> Xd5b4a5747e6ff805_1 [label="3"];
    Xd5b4a5747e6ff805_0 [label="Storage Live _3\lCall\l"];
    Xd5b4a5747e6ff805_1 [label="0 <- Not(mv(3))\lStorage Dead _3\lReturn\l"];
  }
  Xd5b4a5747e6ff805_0 -> X92c90d3df5004379_0 [label="mv(1),mv(2)"];
  subgraph cluster_132 {
    label="core::fmt::num::<impl \ncore::fmt::Debug \nfor \nu32>::fmt";
    style="filled";
    color=lightgray;
    node_133 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &u32\l2 = &mut core::fmt::Formatter<'_>\l3 = u32\l4 = u32\l5 = u32\l6 = u32\l", style="filled", color=palegreen3];
    X86616ecd3718916b_0 -> X86616ecd3718916b_2 [label="0"];
    X86616ecd3718916b_0 -> X86616ecd3718916b_1 [label="other"];
    X86616ecd3718916b_0 [label="Storage Live _3\lStorage Live _4\l4 <- Use(cp((*2).0))\l3 <- BitAnd(mv(4), const ?_u32)\lStorage Dead _4\lSwitchInt mv(3)\l"];
    X86616ecd3718916b_1 -> X86616ecd3718916b_6 [label="0"];
    X86616ecd3718916b_1 [label="Storage Dead _3\lCall\l"];
    X86616ecd3718916b_2 -> X86616ecd3718916b_4 [label="0"];
    X86616ecd3718916b_2 -> X86616ecd3718916b_3 [label="other"];
    X86616ecd3718916b_2 [label="Storage Dead _3\lStorage Live _5\lStorage Live _6\l6 <- Use(cp((*2).0))\l5 <- BitAnd(mv(6), const ?_u32)\lStorage Dead _6\lSwitchInt mv(5)\l"];
    X86616ecd3718916b_3 -> X86616ecd3718916b_5 [label="0"];
    X86616ecd3718916b_3 [label="Storage Dead _5\lCall\l"];
    X86616ecd3718916b_4 -> X86616ecd3718916b_5 [label="0"];
    X86616ecd3718916b_4 [label="Storage Dead _5\lCall\l"];
    X86616ecd3718916b_5 -> X86616ecd3718916b_6;
    X86616ecd3718916b_5 [label="Goto\l"];
    X86616ecd3718916b_6 [label="Return\l"];
  }
  X86616ecd3718916b_1 -> X1d0677a8f15bd47_0 [label="mv(1),mv(2)"];
  X86616ecd3718916b_3 -> Xca95a9d6f7061805_0 [label="mv(1),mv(2)"];
  X86616ecd3718916b_4 -> X67d151235d77b301_0 [label="mv(1),mv(2)"];
  subgraph cluster_134 {
    label="core::mem::MaybeUninit::<\npinocchio::account_info::\nAccountInfo>::assume_init\n_ref";
    style="filled";
    color=lightgray;
    node_135 [label="LOCALS\l0 = &pinocchio::account_info::AccountInfo\l1 = &core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l2 = ()\l3 = *const pinocchio::account_info::AccountInfo\l4 = *const core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l", style="filled", color=palegreen3];
    Xa243b99d87ed4046_0 -> Xa243b99d87ed4046_1 [label="2"];
    Xa243b99d87ed4046_0 [label="Call\l"];
    Xa243b99d87ed4046_1 [label="Storage Live _3\lStorage Live _4\l4 <- &raw (*1)\l3 <- Cast-PtrToPtr cp(4)\lStorage Dead _4\l0 <- & (*3)\lStorage Dead _3\lReturn\l"];
  }
  Xa243b99d87ed4046_0 -> X83c8e82412404978_0 [label=""];
  subgraph cluster_136 {
    label="core::mem::MaybeUninit::<\npinocchio::account_info::\nAccountInfo>::write";
    style="filled";
    color=lightgray;
    node_137 [label="LOCALS\l0 = &mut pinocchio::account_info::AccountInfo\l1 = &mut core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l2 = pinocchio::account_info::AccountInfo\l3 = core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l4 = core::mem::ManuallyDrop<pinocchio::account_info::AccountInfo>\l5 = ()\l6 = *mut pinocchio::account_info::AccountInfo\l7 = *mut core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l", style="filled", color=palegreen3];
    X3e61e2a565de7318_0 -> X3e61e2a565de7318_1 [label="5"];
    X3e61e2a565de7318_0 [label="Storage Live _3\lStorage Live _4\l4 <- Adt{0} (cp(2))\l3 <- Adt{0} (mv(4))\lStorage Dead _4\l(*1) <- Use(mv(3))\lStorage Dead _3\lCall\l"];
    X3e61e2a565de7318_1 [label="Storage Live _6\lStorage Live _7\l7 <- &raw mut (*1)\l6 <- Cast-PtrToPtr cp(7)\lStorage Dead _7\l0 <- &mut (*6)\lStorage Dead _6\lReturn\l"];
  }
  X3e61e2a565de7318_0 -> X83c8e82412404978_0 [label=""];
  subgraph cluster_138 {
    label="core::mem::size_of::<u64>";
    style="filled";
    color=lightgray;
    node_139 [label="LOCALS\l0 = usize\l", style="filled", color=palegreen3];
    Xc400e100fe1b1e46_0 [label="0 <- SizeOf :: u64\lReturn\l"];
  }
  subgraph cluster_140 {
    label="core::mem::size_of::<pino\ncchio::account_info::Acco\nunt>";
    style="filled";
    color=lightgray;
    node_141 [label="LOCALS\l0 = usize\l", style="filled", color=palegreen3];
    Xdcc6cca97078e0a0_0 [label="0 <- SizeOf :: pinocchio::account_info::Account\lReturn\l"];
  }
  subgraph cluster_142 {
    label="core::num::<impl \nu64>::checked_add";
    style="filled";
    color=lightgray;
    node_143 [label="LOCALS\l0 = core::option::Option<u64>\l1 = u64\l2 = u64\l3 = bool\l4 = (u64, bool)\l5 = u64\l6 = ()\l", style="filled", color=palegreen3];
    X2204c2bd8acfd852_0 -> X2204c2bd8acfd852_4 [label="0"];
    X2204c2bd8acfd852_0 -> X2204c2bd8acfd852_2 [label="other"];
    X2204c2bd8acfd852_0 [label="Storage Live _3\lStorage Live _4\l4 <- chkd-Add(cp(1), cp(2))\l3 <- Use(cp(4.1))\lSwitchInt cp(3)\l"];
    X2204c2bd8acfd852_1 [label="Return\l"];
    X2204c2bd8acfd852_2 -> X2204c2bd8acfd852_3 [label="6"];
    X2204c2bd8acfd852_2 [label="Call\l"];
    X2204c2bd8acfd852_3 -> X2204c2bd8acfd852_1;
    X2204c2bd8acfd852_3 [label="Storage Dead _4\lStorage Dead _3\l0 <- Use(const core::option::Option<u64>)\lGoto\l"];
    X2204c2bd8acfd852_4 -> X2204c2bd8acfd852_1;
    X2204c2bd8acfd852_4 [label="Storage Dead _4\lStorage Dead _3\lStorage Live _5\l5 <- AddUnchecked(cp(1), cp(2))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
  }
  X2204c2bd8acfd852_2 -> X8fc2060ad58510d8_0 [label=""];
  subgraph cluster_144 {
    label="core::num::<impl \nu64>::to_le_bytes";
    style="filled";
    color=lightgray;
    node_145 [label="LOCALS\l0 = [u8; 8]\l1 = u64\l", style="filled", color=palegreen3];
    Xd9beafda37b4af63_0 [label="0 <- Cast-Transmute cp(1)\lReturn\l"];
  }
  subgraph cluster_146 {
    label="core::num::<impl \nu64>::from_le_bytes";
    style="filled";
    color=lightgray;
    node_147 [label="LOCALS\l0 = u64\l1 = [u8; 8]\l", style="filled", color=palegreen3];
    X4b040c9530995baf_0 [label="0 <- Cast-Transmute cp(1)\lReturn\l"];
  }
  subgraph cluster_148 {
    label="core::num::<impl \nusize>::unchecked_add::pr\necondition_check";
    style="filled";
    color=lightgray;
    node_149 [label="LOCALS\l0 = ()\l1 = usize\l2 = usize\l3 = !\l4 = u64\l5 = bool\l6 = (u64, bool)\l7 = u64\l8 = u64\l", style="filled", color=palegreen3];
    X6d16759fb07448a4_0 -> X6d16759fb07448a4_2 [label="0"];
    X6d16759fb07448a4_0 -> X6d16759fb07448a4_1 [label="other"];
    X6d16759fb07448a4_0 [label="Storage Live _4\lStorage Live _6\lStorage Live _7\l7 <- Cast-IntToInt cp(1)\lStorage Live _8\l8 <- Cast-IntToInt cp(2)\l6 <- chkd-Add(mv(7), mv(8))\lStorage Dead _8\lStorage Dead _7\l4 <- Use(cp(6.0))\l5 <- Use(cp(6.1))\lStorage Dead _6\lStorage Dead _4\lSwitchInt cp(5)\l"];
    X6d16759fb07448a4_1 [label="Call\l"];
    X6d16759fb07448a4_2 [label="Return\l"];
  }
  X6d16759fb07448a4_1 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_150 {
    label="<for<'a, \n'b> \nfn(&'a \nusize, \n&'b \nusize) \n-> \ncore::cmp::Ordering \n{<usize \nas \ncore::cmp::Ord>::cmp} \nas \ncore::ops::FnOnce<(&usize\n, \n&usize)>>::call_once";
    style="filled";
    color=lightgray;
    node_151 [label="LOCALS\l0 = core::cmp::Ordering\l1 = for<'a, 'b> fn(&'a usize, &'b usize) -> core::cmp::Ordering {<usize as core::cmp::Ord>::cmp}\l2 = (&usize, &usize)\l", style="filled", color=palegreen3];
    Xa7d822d8acd5c8ee_0 -> Xa7d822d8acd5c8ee_1 [label="0"];
    Xa7d822d8acd5c8ee_0 [label="Call\l"];
    Xa7d822d8acd5c8ee_1 [label="Return\l"];
  }
  Xa7d822d8acd5c8ee_0 -> Xa7d822d8acd5c8ee_0: 1 [label="mv(2.0),mv(2.1)"];
  subgraph cluster_152 {
    label="<for<'a> \nfn(&'a \npinocchio::program_error:\n:ProgramError) \n{entrypoint::log_error} \nas \ncore::ops::FnOnce<(&pinoc\nchio::program_error::Prog\nramError,)>>::call_once";
    style="filled";
    color=lightgray;
    node_153 [label="LOCALS\l0 = ()\l1 = for<'a> fn(&'a pinocchio::program_error::ProgramError) {entrypoint::log_error}\l2 = (&pinocchio::program_error::ProgramError,)\l", style="filled", color=palegreen3];
    Xf950bf27d0cf5c6c_0 -> Xf950bf27d0cf5c6c_1 [label="0"];
    Xf950bf27d0cf5c6c_0 [label="Call\l"];
    Xf950bf27d0cf5c6c_1 [label="Return\l"];
  }
  Xf950bf27d0cf5c6c_0 -> Xf950bf27d0cf5c6c_0: 1 [label="mv(2.0)"];
  subgraph cluster_154 {
    label="core::ptr::drop_in_place:\n:<&core::result::Result<(\n), \npinocchio::program_error:\n:ProgramError>>";
    style="filled";
    color=lightgray;
    node_155 [label="LOCALS\l0 = ()\l1 = *mut &core::result::Result<(), pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    X6d6f60a1525fc0a8_0 [label="Return\l"];
  }
  subgraph cluster_156 {
    label="core::ptr::align_offset::\n<u8>";
    style="filled";
    color=lightgray;
    node_157 [label="LOCALS\l0 = usize\l1 = *const u8\l2 = usize\l3 = usize\l4 = usize\l5 = usize\l6 = usize\l7 = usize\l8 = usize\l9 = usize\l10 = usize\l11 = usize\l12 = bool\l13 = usize\l14 = u32\l15 = u32\l16 = u32\l17 = bool\l18 = usize\l19 = u32\l20 = usize\l21 = usize\l22 = usize\l23 = u32\l24 = usize\l25 = usize\l26 = usize\l27 = u32\l28 = usize\l29 = usize\l30 = usize\l31 = u32\l32 = usize\l33 = usize\l", style="filled", color=palegreen3];
    X19dd34cf757319eb_0 -> X19dd34cf757319eb_1 [label="0"];
    X19dd34cf757319eb_0 -> X19dd34cf757319eb_5 [label="other"];
    X19dd34cf757319eb_0 [label="3 <- SizeOf :: u8\l4 <- Cast-Transmute cp(1)\l5 <- SubUnchecked(cp(2), const ?_usize)\lSwitchInt mv(3)\l"];
    X19dd34cf757319eb_1 -> X19dd34cf757319eb_2 [label="0"];
    X19dd34cf757319eb_1 -> X19dd34cf757319eb_3 [label="other"];
    X19dd34cf757319eb_1 [label="6 <- BitAnd(cp(4), cp(5))\lSwitchInt mv(6)\l"];
    X19dd34cf757319eb_2 -> X19dd34cf757319eb_4;
    X19dd34cf757319eb_2 [label="0 <- Use(const ?_usize)\lGoto\l"];
    X19dd34cf757319eb_3 -> X19dd34cf757319eb_4;
    X19dd34cf757319eb_3 [label="0 <- Use(const ?_usize)\lGoto\l"];
    X19dd34cf757319eb_4 -> X19dd34cf757319eb_19;
    X19dd34cf757319eb_4 [label="Goto\l"];
    X19dd34cf757319eb_5 -> X19dd34cf757319eb_6 [label="0"];
    X19dd34cf757319eb_5 -> X19dd34cf757319eb_10 [label="other"];
    X19dd34cf757319eb_5 [label="7 <- Rem(cp(2), cp(3))\lSwitchInt mv(7)\l"];
    X19dd34cf757319eb_6 -> X19dd34cf757319eb_7 [label="0"];
    X19dd34cf757319eb_6 -> X19dd34cf757319eb_8 [label="other"];
    X19dd34cf757319eb_6 [label="Storage Live _9\l9 <- Add(cp(4), cp(5))\lStorage Live _10\l10 <- Sub(const ?_usize, cp(2))\l8 <- BitAnd(mv(9), mv(10))\lStorage Dead _10\lStorage Dead _9\l11 <- Sub(cp(8), cp(4))\lStorage Live _12\l12 <- Lt(cp(11), cp(2))\lIntr: Assume mv(12)\lStorage Dead _12\l13 <- Rem(cp(4), cp(3))\lSwitchInt mv(13)\l"];
    X19dd34cf757319eb_7 -> X19dd34cf757319eb_9 [label="0"];
    X19dd34cf757319eb_7 [label="Call\l"];
    X19dd34cf757319eb_8 -> X19dd34cf757319eb_9;
    X19dd34cf757319eb_8 [label="0 <- Use(const ?_usize)\lGoto\l"];
    X19dd34cf757319eb_9 -> X19dd34cf757319eb_19;
    X19dd34cf757319eb_9 [label="Goto\l"];
    X19dd34cf757319eb_10 -> X19dd34cf757319eb_11 [label="15"];
    X19dd34cf757319eb_10 [label="Storage Live _14\lCall\l"];
    X19dd34cf757319eb_11 -> X19dd34cf757319eb_12 [label="16"];
    X19dd34cf757319eb_11 [label="Call\l"];
    X19dd34cf757319eb_12 -> X19dd34cf757319eb_14 [label="0"];
    X19dd34cf757319eb_12 -> X19dd34cf757319eb_13 [label="other"];
    X19dd34cf757319eb_12 [label="Storage Live _17\l17 <- Lt(cp(15), cp(16))\lSwitchInt mv(17)\l"];
    X19dd34cf757319eb_13 -> X19dd34cf757319eb_15;
    X19dd34cf757319eb_13 [label="14 <- Use(cp(15))\lGoto\l"];
    X19dd34cf757319eb_14 -> X19dd34cf757319eb_15;
    X19dd34cf757319eb_14 [label="14 <- Use(cp(16))\lGoto\l"];
    X19dd34cf757319eb_15 -> X19dd34cf757319eb_16 [label="0"];
    X19dd34cf757319eb_15 -> X19dd34cf757319eb_18 [label="other"];
    X19dd34cf757319eb_15 [label="Storage Dead _17\lStorage Live _19\l19 <- Use(cp(14))\l18 <- ShlUnchecked(const ?_usize, mv(19))\lStorage Dead _19\lStorage Live _20\lStorage Live _21\l21 <- SubUnchecked(cp(18), const ?_usize)\l20 <- BitAnd(cp(4), mv(21))\lStorage Dead _21\lSwitchInt mv(20)\l"];
    X19dd34cf757319eb_16 -> X19dd34cf757319eb_17 [label="33"];
    X19dd34cf757319eb_16 [label="Storage Dead _20\lStorage Live _23\l23 <- Use(cp(14))\l22 <- ShrUnchecked(cp(2), mv(23))\lStorage Dead _23\l24 <- SubUnchecked(cp(22), const ?_usize)\lStorage Live _26\l26 <- BitAnd(cp(3), cp(5))\lStorage Live _27\l27 <- Use(cp(14))\l25 <- ShrUnchecked(mv(26), mv(27))\lStorage Dead _27\lStorage Dead _26\lStorage Live _29\lStorage Live _30\l30 <- BitAnd(cp(4), cp(5))\lStorage Live _31\l31 <- Use(cp(14))\l29 <- ShrUnchecked(mv(30), mv(31))\lStorage Dead _31\lStorage Dead _30\l28 <- SubUnchecked(cp(22), mv(29))\lStorage Dead _29\lStorage Live _32\lStorage Live _33\lCall\l"];
    X19dd34cf757319eb_17 -> X19dd34cf757319eb_19;
    X19dd34cf757319eb_17 [label="32 <- Mul(cp(28), mv(33))\lStorage Dead _33\l0 <- BitAnd(mv(32), cp(24))\lStorage Dead _32\lStorage Dead _14\lGoto\l"];
    X19dd34cf757319eb_18 -> X19dd34cf757319eb_19;
    X19dd34cf757319eb_18 [label="Storage Dead _20\l0 <- Use(const ?_usize)\lStorage Dead _14\lGoto\l"];
    X19dd34cf757319eb_19 [label="Return\l"];
  }
  X19dd34cf757319eb_7 -> Xab38848ab7f87cef_0 [label="mv(11),mv(3)"];
  X19dd34cf757319eb_10 -> X310df8f1c672aeb_0 [label="cp(3)"];
  X19dd34cf757319eb_11 -> X310df8f1c672aeb_0 [label="cp(2)"];
  X19dd34cf757319eb_16 -> X90f500512b5cf374_0 [label="mv(25),mv(22)"];
  subgraph cluster_158 {
    label="core::ptr::align_offset::\nmod_inv";
    style="filled";
    color=lightgray;
    node_159 [label="LOCALS\l0 = usize\l1 = usize\l2 = usize\l3 = usize\l4 = usize\l5 = u8\l6 = [u8; 8]\l7 = usize\l8 = usize\l9 = bool\l10 = usize\l11 = bool\l12 = usize\l13 = usize\l14 = usize\l15 = usize\l16 = usize\l17 = usize\l18 = usize\l19 = bool\l20 = (usize, bool)\l21 = usize\l22 = usize\l23 = usize\l", style="filled", color=palegreen3];
    X90f500512b5cf374_0 -> X90f500512b5cf374_1;
    X90f500512b5cf374_0 [label="3 <- SubUnchecked(cp(2), const ?_usize)\lStorage Live _4\lStorage Live _5\lStorage Live _6\l6 <- Use(const [u8; 8])\lStorage Live _7\lStorage Live _8\l8 <- BitAnd(cp(1), const ?_usize)\l7 <- Shr(mv(8), const ?_i32)\lStorage Dead _8\l9 <- Lt(cp(7), const ?_usize)\lAssert mv(9) == true\l"];
    X90f500512b5cf374_1 -> X90f500512b5cf374_2;
    X90f500512b5cf374_1 [label="5 <- Use(cp(6[_7]))\l4 <- Cast-IntToInt mv(5)\lStorage Dead _5\lStorage Dead _7\lStorage Dead _6\lStorage Live _10\l10 <- Use(const ?_usize)\lGoto\l"];
    X90f500512b5cf374_2 -> X90f500512b5cf374_4 [label="0"];
    X90f500512b5cf374_2 -> X90f500512b5cf374_3 [label="other"];
    X90f500512b5cf374_2 [label="Storage Live _11\lStorage Live _12\l12 <- Use(cp(10))\l11 <- Ge(mv(12), cp(2))\lSwitchInt mv(11)\l"];
    X90f500512b5cf374_3 -> X90f500512b5cf374_6;
    X90f500512b5cf374_3 [label="Storage Dead _12\lStorage Dead _11\lGoto\l"];
    X90f500512b5cf374_4 -> X90f500512b5cf374_5 [label="0"];
    X90f500512b5cf374_4 -> X90f500512b5cf374_6 [label="other"];
    X90f500512b5cf374_4 [label="Storage Dead _12\lStorage Dead _11\lStorage Live _13\lStorage Live _14\l14 <- Use(cp(4))\lStorage Live _15\lStorage Live _16\lStorage Live _17\l17 <- Use(cp(4))\l16 <- Mul(cp(1), mv(17))\lStorage Dead _17\l15 <- Sub(const ?_usize, mv(16))\lStorage Dead _16\l13 <- Mul(mv(14), mv(15))\lStorage Dead _15\lStorage Dead _14\l4 <- Use(mv(13))\lStorage Dead _13\lStorage Live _20\lStorage Live _21\l21 <- Use(cp(10))\lStorage Live _22\l22 <- Use(cp(10))\l20 <- chkd-Mul(mv(21), mv(22))\lStorage Dead _22\lStorage Dead _21\l18 <- Use(cp(20.0))\l19 <- Use(cp(20.1))\lStorage Dead _20\lSwitchInt cp(19)\l"];
    X90f500512b5cf374_5 -> X90f500512b5cf374_2;
    X90f500512b5cf374_5 [label="10 <- Use(cp(18))\lGoto\l"];
    X90f500512b5cf374_6 [label="Storage Live _23\l23 <- Use(cp(4))\l0 <- BitAnd(mv(23), cp(3))\lStorage Dead _23\lStorage Dead _10\lStorage Dead _4\lReturn\l"];
  }
  subgraph cluster_160 {
    label="core::ptr::drop_in_place:\n:<&u32>";
    style="filled";
    color=lightgray;
    node_161 [label="LOCALS\l0 = ()\l1 = *mut &u32\l", style="filled", color=palegreen3];
    Xfe6c34d78e923dcb_0 [label="Return\l"];
  }
  subgraph cluster_162 {
    label="core::ptr::drop_in_place:\n:<&()>";
    style="filled";
    color=lightgray;
    node_163 [label="LOCALS\l0 = ()\l1 = *mut &()\l", style="filled", color=palegreen3];
    Xcb5af9be68892568_0 [label="Return\l"];
  }
  subgraph cluster_164 {
    label="core::ptr::drop_in_place:\n:<pinocchio::program_erro\nr::ProgramError>";
    style="filled";
    color=lightgray;
    node_165 [label="LOCALS\l0 = ()\l1 = *mut pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X3d8bfa7e8fa4ed7a_0 [label="Return\l"];
  }
  subgraph cluster_166 {
    label="core::ptr::drop_in_place:\n:<&pinocchio::program_err\nor::ProgramError>";
    style="filled";
    color=lightgray;
    node_167 [label="LOCALS\l0 = ()\l1 = *mut &pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X93be498283be854c_0 [label="Return\l"];
  }
  subgraph cluster_168 {
    label="core::ptr::mut_ptr::<impl\n \n*mut \nu8>::add";
    style="filled";
    color=lightgray;
    node_169 [label="LOCALS\l0 = *mut u8\l1 = *mut u8\l2 = usize\l", style="filled", color=palegreen3];
    Xf7c0564bc7b3306b_0 [label="0 <- Offset(cp(1), cp(2))\lReturn\l"];
  }
  subgraph cluster_170 {
    label="core::ptr::const_ptr::<im\npl \n*const \nu8>::align_offset";
    style="filled";
    color=lightgray;
    node_171 [label="LOCALS\l0 = usize\l1 = *const u8\l2 = usize\l3 = !\l4 = core::fmt::Arguments<'_>\l5 = u32\l6 = &[&str]\l7 = &[core::fmt::rt::Argument<'_>]\l", style="filled", color=palegreen3];
    X1016b8be58aff39a_0 -> X1016b8be58aff39a_4 [label="5"];
    X1016b8be58aff39a_0 [label="Storage Live _5\lCall\l"];
    X1016b8be58aff39a_1 -> X1016b8be58aff39a_3 [label="0"];
    X1016b8be58aff39a_1 [label="Storage Dead _5\lCall\l"];
    X1016b8be58aff39a_2 [label="Storage Dead _5\lStorage Live _4\lStorage Live _6\l6 <- Cast-PointerCoercion(Unsize) const &[&str; 1]\lStorage Live _7\l7 <- Cast-PointerCoercion(Unsize) const &[core::fmt::rt::Argument<'_>; 0]\l4 <- Adt{0} (mv(6), const core::option::Option<&[core::fmt::rt::Placeholder]>, mv(7))\lStorage Dead _7\lStorage Dead _6\lCall\l"];
    X1016b8be58aff39a_3 [label="Return\l"];
    X1016b8be58aff39a_4 -> X1016b8be58aff39a_1 [label="1"];
    X1016b8be58aff39a_4 -> X1016b8be58aff39a_2 [label="other"];
    X1016b8be58aff39a_4 [label="SwitchInt mv(5)\l"];
  }
  X1016b8be58aff39a_0 -> X5ea6c111b835a80f_0 [label="cp(2)"];
  X1016b8be58aff39a_1 -> X19dd34cf757319eb_0 [label="mv(1),mv(2)"];
  X1016b8be58aff39a_2 -> Xfffaab11503b9894_0 [label="mv(4)"];
  subgraph cluster_172 {
    label="core::ptr::const_ptr::<im\npl \n*const \nspl_token_interface::stat\ne::mint::Mint>::read";
    style="filled";
    color=lightgray;
    node_173 [label="LOCALS\l0 = spl_token_interface::state::mint::Mint\l1 = *const spl_token_interface::state::mint::Mint\l", style="filled", color=palegreen3];
    X80b73d35b2577076_0 [label="0 <- Use(cp((*1)))\lReturn\l"];
  }
  subgraph cluster_174 {
    label="core::ptr::const_ptr::<im\npl \n*const \nspl_token_interface::stat\ne::account::Account>::rea\nd";
    style="filled";
    color=lightgray;
    node_175 [label="LOCALS\l0 = spl_token_interface::state::account::Account\l1 = *const spl_token_interface::state::account::Account\l", style="filled", color=palegreen3];
    X7dc6a8245be12621_0 [label="0 <- Use(cp((*1)))\lReturn\l"];
  }
  subgraph cluster_176 {
    label="core::iter::range::<impl \ncore::iter::Iterator \nfor \ncore::ops::Range<usize>>:\n:next";
    style="filled";
    color=lightgray;
    node_177 [label="LOCALS\l0 = core::option::Option<usize>\l1 = &mut core::ops::Range<usize>\l", style="filled", color=palegreen3];
    X1f9e69c6b415d93e_0 -> X1f9e69c6b415d93e_1 [label="0"];
    X1f9e69c6b415d93e_0 [label="Call\l"];
    X1f9e69c6b415d93e_1 [label="Return\l"];
  }
  X1f9e69c6b415d93e_0 -> X76d9451f9bf287e8_0 [label="mv(1)"];
  subgraph cluster_178 {
    label="<core::slice::Iter<'_, \n[u8; \n32]> \nas \ncore::iter::Iterator>::en\numerate";
    style="filled";
    color=lightgray;
    node_179 [label="LOCALS\l0 = core::iter::Enumerate<core::slice::Iter<'_, [u8; 32]>>\l1 = core::slice::Iter<'_, [u8; 32]>\l", style="filled", color=palegreen3];
    Xb9b3d20a67ff2c4e_0 [label="0 <- Adt{0} (cp(1), const ?_usize)\lReturn\l"];
  }
  subgraph cluster_180 {
    label="core::array::<impl \ncore::ops::Index<core::op\ns::Range<usize>> \nfor \n[[u8; \n32]; \n11]>::index";
    style="filled";
    color=lightgray;
    node_181 [label="LOCALS\l0 = &[[u8; 32]]\l1 = &[[u8; 32]; 11]\l2 = core::ops::Range<usize>\l3 = &[[u8; 32]]\l", style="filled", color=palegreen3];
    X44d3c3d4cd9a8a85_0 -> X44d3c3d4cd9a8a85_1 [label="0"];
    X44d3c3d4cd9a8a85_0 [label="3 <- Cast-PointerCoercion(Unsize) cp(1)\lCall\l"];
    X44d3c3d4cd9a8a85_1 [label="Return\l"];
  }
  X44d3c3d4cd9a8a85_0 -> Xcb4f93944921ea3f_0 [label="mv(3),mv(2)"];
  subgraph cluster_182 {
    label="core::array::equality::<i\nmpl \ncore::cmp::PartialEq \nfor \n[u8; \n32]>::eq";
    style="filled";
    color=lightgray;
    node_183 [label="LOCALS\l0 = bool\l1 = &[u8; 32]\l2 = &[u8; 32]\l", style="filled", color=palegreen3];
    Xe9ad0bcad84fb4ac_0 -> Xe9ad0bcad84fb4ac_1 [label="0"];
    Xe9ad0bcad84fb4ac_0 [label="Call\l"];
    Xe9ad0bcad84fb4ac_1 [label="Return\l"];
  }
  Xe9ad0bcad84fb4ac_0 -> Xb51f0a1884dba91f_0 [label="mv(1),mv(2)"];
  subgraph cluster_184 {
    label="core::array::equality::<i\nmpl \ncore::cmp::PartialEq \nfor \n[u8; \n32]>::ne";
    style="filled";
    color=lightgray;
    node_185 [label="LOCALS\l0 = bool\l1 = &[u8; 32]\l2 = &[u8; 32]\l", style="filled", color=palegreen3];
    X6dec8e35a57ec51c_0 -> X6dec8e35a57ec51c_1 [label="0"];
    X6dec8e35a57ec51c_0 [label="Call\l"];
    X6dec8e35a57ec51c_1 [label="Return\l"];
  }
  X6dec8e35a57ec51c_0 -> Xf0a84b1dfc729bb8_0 [label="mv(1),mv(2)"];
  subgraph cluster_186 {
    label="core::slice::<impl \n[u8]>::as_mut_ptr";
    style="filled";
    color=lightgray;
    node_187 [label="LOCALS\l0 = *mut u8\l1 = &mut [u8]\l2 = *mut [u8]\l", style="filled", color=palegreen3];
    X8641c13e22843093_0 [label="Storage Live _2\l2 <- &raw mut (*1)\l0 <- Cast-PtrToPtr mv(2)\lStorage Dead _2\lReturn\l"];
  }
  subgraph cluster_188 {
    label="core::slice::<impl \n[u8]>::first_chunk::<9>";
    style="filled";
    color=lightgray;
    node_189 [label="LOCALS\l0 = core::option::Option<&[u8; 9]>\l1 = &[u8]\l2 = bool\l3 = usize\l4 = &[u8; 9]\l5 = *const [u8; 9]\l6 = *const u8\l7 = *const [u8]\l", style="filled", color=palegreen3];
    X6f565d8803bea5e1_0 -> X6f565d8803bea5e1_2 [label="0"];
    X6f565d8803bea5e1_0 -> X6f565d8803bea5e1_1 [label="other"];
    X6f565d8803bea5e1_0 [label="Storage Live _2\lStorage Live _3\l3 <- PtrMetadata(cp(1))\l2 <- Lt(mv(3), const ?_usize)\lSwitchInt mv(2)\l"];
    X6f565d8803bea5e1_1 -> X6f565d8803bea5e1_3;
    X6f565d8803bea5e1_1 [label="Storage Dead _3\l0 <- Use(const core::option::Option<&[u8; 9]>)\lGoto\l"];
    X6f565d8803bea5e1_2 -> X6f565d8803bea5e1_3;
    X6f565d8803bea5e1_2 [label="Storage Dead _3\lStorage Live _5\lStorage Live _6\l7 <- &raw (*1)\l6 <- Cast-PtrToPtr cp(7)\l5 <- Cast-PtrToPtr cp(7)\lStorage Dead _6\l4 <- & (*5)\l0 <- Adt{1} (cp(4))\lStorage Dead _5\lGoto\l"];
    X6f565d8803bea5e1_3 [label="Storage Dead _2\lReturn\l"];
  }
  subgraph cluster_190 {
    label="core::slice::<impl \n[pinocchio::account_info:\n:AccountInfo]>::first_chu\nnk::<3>";
    style="filled";
    color=lightgray;
    node_191 [label="LOCALS\l0 = core::option::Option<&[pinocchio::account_info::AccountInfo; 3]>\l1 = &[pinocchio::account_info::AccountInfo]\l2 = bool\l3 = usize\l4 = &[pinocchio::account_info::AccountInfo; 3]\l5 = *const [pinocchio::account_info::AccountInfo; 3]\l6 = *const pinocchio::account_info::AccountInfo\l7 = *const [pinocchio::account_info::AccountInfo]\l", style="filled", color=palegreen3];
    X9ac76d965bfd6e30_0 -> X9ac76d965bfd6e30_2 [label="0"];
    X9ac76d965bfd6e30_0 -> X9ac76d965bfd6e30_1 [label="other"];
    X9ac76d965bfd6e30_0 [label="Storage Live _2\lStorage Live _3\l3 <- PtrMetadata(cp(1))\l2 <- Lt(mv(3), const ?_usize)\lSwitchInt mv(2)\l"];
    X9ac76d965bfd6e30_1 -> X9ac76d965bfd6e30_3;
    X9ac76d965bfd6e30_1 [label="Storage Dead _3\l0 <- Use(const core::option::Option<&[pinocchio::account_info::AccountInfo; 3]>)\lGoto\l"];
    X9ac76d965bfd6e30_2 -> X9ac76d965bfd6e30_3;
    X9ac76d965bfd6e30_2 [label="Storage Dead _3\lStorage Live _5\lStorage Live _6\l7 <- &raw (*1)\l6 <- Cast-PtrToPtr cp(7)\l5 <- Cast-PtrToPtr cp(7)\lStorage Dead _6\l4 <- & (*5)\l0 <- Adt{1} (cp(4))\lStorage Dead _5\lGoto\l"];
    X9ac76d965bfd6e30_3 [label="Storage Dead _2\lReturn\l"];
  }
  subgraph cluster_192 {
    label="core::slice::<impl \n[u8]>::get_unchecked::<us\nize>";
    style="filled";
    color=lightgray;
    node_193 [label="LOCALS\l0 = &u8\l1 = &[u8]\l2 = usize\l3 = *const u8\l4 = *const [u8]\l", style="filled", color=palegreen3];
    Xe2dd8d6d8ab56bef_0 -> Xe2dd8d6d8ab56bef_1 [label="3"];
    Xe2dd8d6d8ab56bef_0 [label="Storage Live _3\lStorage Live _4\l4 <- &raw (*1)\lCall\l"];
    Xe2dd8d6d8ab56bef_1 [label="Storage Dead _4\l0 <- & (*3)\lStorage Dead _3\lReturn\l"];
  }
  Xe2dd8d6d8ab56bef_0 -> X7bd4403f8d22bbb7_0 [label="mv(2),mv(4)"];
  subgraph cluster_194 {
    label="core::slice::<impl \n[pinocchio::account_info:\n:AccountInfo]>::get_unche\ncked::<core::ops::RangeTo\n<usize>>";
    style="filled";
    color=lightgray;
    node_195 [label="LOCALS\l0 = &[pinocchio::account_info::AccountInfo]\l1 = &[pinocchio::account_info::AccountInfo]\l2 = core::ops::RangeTo<usize>\l3 = *const [pinocchio::account_info::AccountInfo]\l4 = *const [pinocchio::account_info::AccountInfo]\l", style="filled", color=palegreen3];
    X76d4fee106df2abc_0 -> X76d4fee106df2abc_1 [label="3"];
    X76d4fee106df2abc_0 [label="Storage Live _3\lStorage Live _4\l4 <- &raw (*1)\lCall\l"];
    X76d4fee106df2abc_1 [label="Storage Dead _4\l0 <- & (*3)\lStorage Dead _3\lReturn\l"];
  }
  X76d4fee106df2abc_0 -> X547eb5d0a2c4568_0 [label="mv(2),mv(4)"];
  subgraph cluster_196 {
    label="core::slice::<impl \n[u8]>::get_unchecked::<co\nre::ops::Range<usize>>";
    style="filled";
    color=lightgray;
    node_197 [label="LOCALS\l0 = &[u8]\l1 = &[u8]\l2 = core::ops::Range<usize>\l3 = *const [u8]\l4 = *const [u8]\l", style="filled", color=palegreen3];
    X63c3503b3e7fa274_0 -> X63c3503b3e7fa274_1 [label="3"];
    X63c3503b3e7fa274_0 [label="Storage Live _3\lStorage Live _4\l4 <- &raw (*1)\lCall\l"];
    X63c3503b3e7fa274_1 [label="Storage Dead _4\l0 <- & (*3)\lStorage Dead _3\lReturn\l"];
  }
  X63c3503b3e7fa274_0 -> Xa5745fda7f573cf5_0 [label="mv(2),mv(4)"];
  subgraph cluster_198 {
    label="core::slice::<impl \n[core::mem::MaybeUninit<p\ninocchio::account_info::A\nccountInfo>]>::get_unchec\nked::<usize>";
    style="filled";
    color=lightgray;
    node_199 [label="LOCALS\l0 = &core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l1 = &[core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l2 = usize\l3 = *const core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l4 = *const [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l", style="filled", color=palegreen3];
    X5fd8469768ca93e7_0 -> X5fd8469768ca93e7_1 [label="3"];
    X5fd8469768ca93e7_0 [label="Storage Live _3\lStorage Live _4\l4 <- &raw (*1)\lCall\l"];
    X5fd8469768ca93e7_1 [label="Storage Dead _4\l0 <- & (*3)\lStorage Dead _3\lReturn\l"];
  }
  X5fd8469768ca93e7_0 -> Xf7c0e3c61151eb20_0 [label="mv(2),mv(4)"];
  subgraph cluster_200 {
    label="core::slice::<impl \n[u8]>::split_at_unchecked";
    style="filled";
    color=lightgray;
    node_201 [label="LOCALS\l0 = (&[u8], &[u8])\l1 = &[u8]\l2 = usize\l3 = usize\l4 = *const u8\l5 = bool\l6 = ()\l7 = &[u8]\l8 = usize\l9 = &[u8]\l10 = *const u8\l11 = usize\l12 = usize\l13 = *const [u8]\l14 = ()\l15 = *mut ()\l16 = usize\l17 = usize\l18 = *const [u8]\l19 = ()\l20 = *mut ()\l21 = usize\l22 = usize\l23 = *const [u8]\l", style="filled", color=palegreen3];
    X9a1a24685b0a8ba9_0 -> X9a1a24685b0a8ba9_2 [label="0"];
    X9a1a24685b0a8ba9_0 -> X9a1a24685b0a8ba9_1 [label="other"];
    X9a1a24685b0a8ba9_0 [label="3 <- PtrMetadata(cp(1))\l13 <- &raw (*1)\l4 <- Cast-PtrToPtr cp(13)\l5 <- UbChecks :: bool\lSwitchInt cp(5)\l"];
    X9a1a24685b0a8ba9_1 -> X9a1a24685b0a8ba9_9 [label="6"];
    X9a1a24685b0a8ba9_1 [label="Call\l"];
    X9a1a24685b0a8ba9_2 -> X9a1a24685b0a8ba9_5 [label="0"];
    X9a1a24685b0a8ba9_2 -> X9a1a24685b0a8ba9_3 [label="other"];
    X9a1a24685b0a8ba9_2 [label="Storage Live _8\l8 <- Use(cp(2))\lSwitchInt cp(5)\l"];
    X9a1a24685b0a8ba9_3 -> X9a1a24685b0a8ba9_4 [label="14"];
    X9a1a24685b0a8ba9_3 [label="Storage Live _15\l15 <- Cast-PtrToPtr cp(13)\lStorage Live _16\l16 <- SizeOf :: u8\lStorage Live _17\l17 <- AlignOf :: u8\lCall\l"];
    X9a1a24685b0a8ba9_4 -> X9a1a24685b0a8ba9_6;
    X9a1a24685b0a8ba9_4 [label="Storage Dead _17\lStorage Dead _16\lStorage Dead _15\lStorage Live _18\l18 <- *([u8]) (cp(4), cp(2))\l7 <- & (*18)\lStorage Dead _18\lStorage Dead _8\lStorage Live _10\lStorage Live _11\l11 <- Use(cp(2))\l10 <- Offset(cp(4), cp(2))\lStorage Dead _11\lStorage Live _12\l12 <- SubUnchecked(cp(3), cp(2))\lGoto\l"];
    X9a1a24685b0a8ba9_5 -> X9a1a24685b0a8ba9_8 [label="0"];
    X9a1a24685b0a8ba9_5 -> X9a1a24685b0a8ba9_6 [label="other"];
    X9a1a24685b0a8ba9_5 [label="Storage Live _18\l18 <- *([u8]) (cp(4), cp(2))\l7 <- & (*18)\lStorage Dead _18\lStorage Dead _8\lStorage Live _10\lStorage Live _11\l11 <- Use(cp(2))\l10 <- Offset(cp(4), cp(2))\lStorage Dead _11\lStorage Live _12\l12 <- SubUnchecked(cp(3), cp(2))\lSwitchInt cp(5)\l"];
    X9a1a24685b0a8ba9_6 -> X9a1a24685b0a8ba9_7 [label="19"];
    X9a1a24685b0a8ba9_6 [label="Storage Live _20\l20 <- Cast-PtrToPtr cp(10)\lStorage Live _21\l21 <- SizeOf :: u8\lStorage Live _22\l22 <- AlignOf :: u8\lCall\l"];
    X9a1a24685b0a8ba9_7 -> X9a1a24685b0a8ba9_8;
    X9a1a24685b0a8ba9_7 [label="Storage Dead _22\lStorage Dead _21\lStorage Dead _20\lGoto\l"];
    X9a1a24685b0a8ba9_8 [label="Storage Live _23\l23 <- *([u8]) (cp(10), cp(12))\l9 <- & (*23)\lStorage Dead _23\lStorage Dead _12\lStorage Dead _10\l0 <- Tuple (cp(7), cp(9))\lReturn\l"];
    X9a1a24685b0a8ba9_9 -> X9a1a24685b0a8ba9_3;
    X9a1a24685b0a8ba9_9 [label="Storage Live _8\l8 <- Use(cp(2))\lGoto\l"];
  }
  X9a1a24685b0a8ba9_1 -> X4618cc66454ae10c_0 [label="cp(2),cp(3)"];
  X9a1a24685b0a8ba9_3 -> X9e3bdfa64cf2efd4_0 [label="mv(15),mv(16),mv(17),cp(2)"];
  X9a1a24685b0a8ba9_6 -> X9e3bdfa64cf2efd4_0 [label="mv(20),mv(21),mv(22),cp(12)"];
  subgraph cluster_202 {
    label="core::slice::<impl \n[T]>::split_at_unchecked:\n:precondition_check";
    style="filled";
    color=lightgray;
    node_203 [label="LOCALS\l0 = ()\l1 = usize\l2 = usize\l3 = bool\l4 = !\l", style="filled", color=palegreen3];
    X4618cc66454ae10c_0 -> X4618cc66454ae10c_2 [label="0"];
    X4618cc66454ae10c_0 -> X4618cc66454ae10c_1 [label="other"];
    X4618cc66454ae10c_0 [label="Storage Live _3\l3 <- Le(cp(1), cp(2))\lSwitchInt mv(3)\l"];
    X4618cc66454ae10c_1 [label="Storage Dead _3\lReturn\l"];
    X4618cc66454ae10c_2 [label="Call\l"];
  }
  X4618cc66454ae10c_2 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_204 {
    label="core::slice::<impl \n[[u8; \n32]]>::iter";
    style="filled";
    color=lightgray;
    node_205 [label="LOCALS\l0 = core::slice::Iter<'_, [u8; 32]>\l1 = &[[u8; 32]]\l", style="filled", color=palegreen3];
    X31f9773b566d256c_0 -> X31f9773b566d256c_1 [label="0"];
    X31f9773b566d256c_0 [label="Call\l"];
    X31f9773b566d256c_1 [label="Return\l"];
  }
  X31f9773b566d256c_0 -> X1a934f9acde709ff_0 [label="mv(1)"];
  subgraph cluster_206 {
    label="core::slice::<impl \n[core::mem::MaybeUninit<p\ninocchio::account_info::A\nccountInfo>]>::as_ptr";
    style="filled";
    color=lightgray;
    node_207 [label="LOCALS\l0 = *const core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l1 = &[core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l2 = *const [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l", style="filled", color=palegreen3];
    Xd96a92a3093bb3ff_0 [label="Storage Live _2\l2 <- &raw (*1)\l0 <- Cast-PtrToPtr mv(2)\lStorage Dead _2\lReturn\l"];
  }
  subgraph cluster_208 {
    label="core::slice::<impl \n[u8]>::as_ptr";
    style="filled";
    color=lightgray;
    node_209 [label="LOCALS\l0 = *const u8\l1 = &[u8]\l2 = *const [u8]\l", style="filled", color=palegreen3];
    X5e85acfe8a19755e_0 [label="Storage Live _2\l2 <- &raw (*1)\l0 <- Cast-PtrToPtr mv(2)\lStorage Dead _2\lReturn\l"];
  }
  subgraph cluster_210 {
    label="core::slice::<impl \n[u8]>::split_at";
    style="filled";
    color=lightgray;
    node_211 [label="LOCALS\l0 = (&[u8], &[u8])\l1 = &[u8]\l2 = usize\l3 = core::option::Option<(&[u8], &[u8])>\l4 = !\l5 = core::fmt::Arguments<'_>\l6 = bool\l7 = usize\l8 = (&[u8], &[u8])\l9 = &[&str]\l10 = &[core::fmt::rt::Argument<'_>]\l", style="filled", color=palegreen3];
    X6a907c8ba1da9e84_0 -> X6a907c8ba1da9e84_3 [label="0"];
    X6a907c8ba1da9e84_0 -> X6a907c8ba1da9e84_1 [label="other"];
    X6a907c8ba1da9e84_0 [label="Storage Live _3\lStorage Live _6\lStorage Live _7\l7 <- PtrMetadata(cp(1))\l6 <- Le(cp(2), mv(7))\lSwitchInt mv(6)\l"];
    X6a907c8ba1da9e84_1 -> X6a907c8ba1da9e84_2 [label="8"];
    X6a907c8ba1da9e84_1 [label="Storage Dead _7\lStorage Live _8\lCall\l"];
    X6a907c8ba1da9e84_2 [label="3 <- Adt{1} (mv(8))\lStorage Dead _8\lStorage Dead _6\l0 <- Use(cp((3 as variant 1).0))\lStorage Dead _3\lReturn\l"];
    X6a907c8ba1da9e84_3 [label="Storage Dead _7\lStorage Dead _6\lStorage Live _5\lStorage Live _9\l9 <- Cast-PointerCoercion(Unsize) const &[&str; 1]\lStorage Live _10\l10 <- Cast-PointerCoercion(Unsize) const &[core::fmt::rt::Argument<'_>; 0]\l5 <- Adt{0} (mv(9), const core::option::Option<&[core::fmt::rt::Placeholder]>, mv(10))\lStorage Dead _10\lStorage Dead _9\lCall\l"];
  }
  X6a907c8ba1da9e84_1 -> X9a1a24685b0a8ba9_0 [label="mv(1),mv(2)"];
  X6a907c8ba1da9e84_3 -> Xfffaab11503b9894_0 [label="mv(5)"];
  subgraph cluster_212 {
    label="core::slice::from_raw_par\nts::<'_, \npinocchio::account_info::\nAccountInfo>";
    style="filled";
    color=lightgray;
    node_213 [label="LOCALS\l0 = &[pinocchio::account_info::AccountInfo]\l1 = *const pinocchio::account_info::AccountInfo\l2 = usize\l3 = bool\l4 = ()\l5 = *mut ()\l6 = usize\l7 = usize\l8 = *const [pinocchio::account_info::AccountInfo]\l", style="filled", color=palegreen3];
    X990394bf3cfa52c4_0 -> X990394bf3cfa52c4_3 [label="0"];
    X990394bf3cfa52c4_0 -> X990394bf3cfa52c4_1 [label="other"];
    X990394bf3cfa52c4_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    X990394bf3cfa52c4_1 -> X990394bf3cfa52c4_2 [label="4"];
    X990394bf3cfa52c4_1 [label="Storage Live _5\l5 <- Cast-PtrToPtr cp(1)\lStorage Live _6\l6 <- SizeOf :: pinocchio::account_info::AccountInfo\lStorage Live _7\l7 <- AlignOf :: pinocchio::account_info::AccountInfo\lCall\l"];
    X990394bf3cfa52c4_2 -> X990394bf3cfa52c4_3;
    X990394bf3cfa52c4_2 [label="Storage Dead _7\lStorage Dead _6\lStorage Dead _5\lGoto\l"];
    X990394bf3cfa52c4_3 [label="Storage Dead _3\lStorage Live _8\l8 <- *([pinocchio::account_info::AccountInfo]) (cp(1), cp(2))\l0 <- & (*8)\lStorage Dead _8\lReturn\l"];
  }
  X990394bf3cfa52c4_1 -> X9e3bdfa64cf2efd4_0 [label="mv(5),mv(6),mv(7),cp(2)"];
  subgraph cluster_214 {
    label="core::slice::from_raw_par\nts::precondition_check";
    style="filled";
    color=lightgray;
    node_215 [label="LOCALS\l0 = ()\l1 = *mut ()\l2 = usize\l3 = usize\l4 = usize\l5 = bool\l6 = *const ()\l7 = bool\l8 = !\l9 = bool\l10 = !\l11 = core::fmt::Arguments<'_>\l12 = usize\l13 = usize\l14 = usize\l15 = u32\l16 = &[&str]\l17 = &[core::fmt::rt::Argument<'_>]\l18 = *const u8\l19 = usize\l20 = bool\l21 = usize\l", style="filled", color=palegreen3];
    X9e3bdfa64cf2efd4_0 -> X9e3bdfa64cf2efd4_10 [label="15"];
    X9e3bdfa64cf2efd4_0 [label="Storage Live _5\lStorage Live _6\l6 <- Cast-PtrToPtr cp(1)\lStorage Live _13\lStorage Live _15\lCall\l"];
    X9e3bdfa64cf2efd4_1 -> X9e3bdfa64cf2efd4_11 [label="0"];
    X9e3bdfa64cf2efd4_1 -> X9e3bdfa64cf2efd4_12 [label="other"];
    X9e3bdfa64cf2efd4_1 [label="Storage Dead _6\lStorage Live _7\lStorage Live _20\lStorage Live _19\l20 <- Eq(cp(2), const ?_usize)\lSwitchInt cp(2)\l"];
    X9e3bdfa64cf2efd4_2 [label="Storage Dead _7\lStorage Dead _5\lReturn\l"];
    X9e3bdfa64cf2efd4_3 -> X9e3bdfa64cf2efd4_5;
    X9e3bdfa64cf2efd4_3 [label="Goto\l"];
    X9e3bdfa64cf2efd4_4 -> X9e3bdfa64cf2efd4_5;
    X9e3bdfa64cf2efd4_4 [label="Storage Dead _6\lGoto\l"];
    X9e3bdfa64cf2efd4_5 [label="Call\l"];
    X9e3bdfa64cf2efd4_6 -> X9e3bdfa64cf2efd4_4 [label="0"];
    X9e3bdfa64cf2efd4_6 -> X9e3bdfa64cf2efd4_1 [label="other"];
    X9e3bdfa64cf2efd4_6 [label="Storage Dead _12\lStorage Live _9\lStorage Live _18\l18 <- Cast-PtrToPtr cp(1)\l9 <- Eq(cp(13), const ?_usize)\lStorage Dead _18\l5 <- Not(mv(9))\lStorage Dead _9\lStorage Dead _13\lSwitchInt mv(5)\l"];
    X9e3bdfa64cf2efd4_7 -> X9e3bdfa64cf2efd4_4;
    X9e3bdfa64cf2efd4_7 [label="Storage Dead _12\lStorage Dead _13\lGoto\l"];
    X9e3bdfa64cf2efd4_8 -> X9e3bdfa64cf2efd4_6 [label="0"];
    X9e3bdfa64cf2efd4_8 -> X9e3bdfa64cf2efd4_7 [label="other"];
    X9e3bdfa64cf2efd4_8 [label="Storage Dead _15\lStorage Live _12\l13 <- Cast-Transmute cp(1)\lStorage Live _14\l14 <- Sub(cp(3), const ?_usize)\l12 <- BitAnd(cp(13), mv(14))\lStorage Dead _14\lSwitchInt mv(12)\l"];
    X9e3bdfa64cf2efd4_9 [label="Storage Dead _15\lStorage Live _11\lStorage Live _16\l16 <- Cast-PointerCoercion(Unsize) const &[&str; 1]\lStorage Live _17\l17 <- Cast-PointerCoercion(Unsize) const &[core::fmt::rt::Argument<'_>; 0]\l11 <- Adt{0} (mv(16), const core::option::Option<&[core::fmt::rt::Placeholder]>, mv(17))\lStorage Dead _17\lStorage Dead _16\lCall\l"];
    X9e3bdfa64cf2efd4_10 -> X9e3bdfa64cf2efd4_8 [label="1"];
    X9e3bdfa64cf2efd4_10 -> X9e3bdfa64cf2efd4_9 [label="other"];
    X9e3bdfa64cf2efd4_10 [label="SwitchInt mv(15)\l"];
    X9e3bdfa64cf2efd4_11 -> X9e3bdfa64cf2efd4_14;
    X9e3bdfa64cf2efd4_11 [label="19 <- Use(const ?_usize)\lGoto\l"];
    X9e3bdfa64cf2efd4_12 -> X9e3bdfa64cf2efd4_13;
    X9e3bdfa64cf2efd4_12 [label="Assert cp(20) == false\l"];
    X9e3bdfa64cf2efd4_13 -> X9e3bdfa64cf2efd4_14;
    X9e3bdfa64cf2efd4_13 [label="19 <- Div(const ?_usize, cp(2))\lGoto\l"];
    X9e3bdfa64cf2efd4_14 -> X9e3bdfa64cf2efd4_3 [label="0"];
    X9e3bdfa64cf2efd4_14 -> X9e3bdfa64cf2efd4_2 [label="other"];
    X9e3bdfa64cf2efd4_14 [label="Storage Live _21\l21 <- Use(cp(19))\l7 <- Le(cp(4), mv(21))\lStorage Dead _21\lStorage Dead _19\lStorage Dead _20\lSwitchInt mv(7)\l"];
  }
  X9e3bdfa64cf2efd4_0 -> X5ea6c111b835a80f_0 [label="cp(3)"];
  X9e3bdfa64cf2efd4_5 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  X9e3bdfa64cf2efd4_9 -> Xfffaab11503b9894_0 [label="mv(11)"];
  subgraph cluster_216 {
    label="core::slice::Iter::<'_, \n[u8; \n32]>::new";
    style="filled";
    color=lightgray;
    node_217 [label="LOCALS\l0 = core::slice::Iter<'_, [u8; 32]>\l1 = &[[u8; 32]]\l2 = usize\l3 = core::ptr::NonNull<[u8; 32]>\l4 = core::ptr::NonNull<[[u8; 32]]>\l5 = *const [u8; 32]\l6 = *mut [u8; 32]\l7 = *mut [u8; 32]\l8 = *const [u8; 32]\l9 = *const [[u8; 32]]\l10 = *const [u8; 32]\l", style="filled", color=palegreen3];
    X1a934f9acde709ff_0 -> X1a934f9acde709ff_2 [label="0"];
    X1a934f9acde709ff_0 -> X1a934f9acde709ff_1 [label="other"];
    X1a934f9acde709ff_0 [label="2 <- PtrMetadata(cp(1))\lStorage Live _4\l9 <- &raw (*1)\l4 <- Adt{0} (cp(9))\l10 <- Cast-PtrToPtr cp(9)\l3 <- Adt{0} (cp(10))\lStorage Dead _4\lStorage Live _5\lSwitchInt const bool\l"];
    X1a934f9acde709ff_1 -> X1a934f9acde709ff_3;
    X1a934f9acde709ff_1 [label="5 <- Cast-Transmute cp(2)\lGoto\l"];
    X1a934f9acde709ff_2 -> X1a934f9acde709ff_3;
    X1a934f9acde709ff_2 [label="Storage Live _6\lStorage Live _7\l7 <- Cast-PtrToPtr cp(9)\l6 <- Offset(cp(7), cp(2))\lStorage Dead _7\l5 <- Cast-PtrToPtr mv(6)\lStorage Dead _6\lGoto\l"];
    X1a934f9acde709ff_3 [label="Storage Live _8\l8 <- Use(cp(5))\l0 <- Adt{0} (cp(3), mv(8), const core::marker::PhantomData<&[u8; 32]>)\lStorage Dead _8\lStorage Dead _5\lReturn\l"];
  }
  subgraph cluster_218 {
    label="core::slice::index::<impl\n \ncore::ops::Index<core::op\ns::RangeFrom<usize>> \nfor \n[pinocchio::account_info:\n:AccountInfo]>::index";
    style="filled";
    color=lightgray;
    node_219 [label="LOCALS\l0 = &[pinocchio::account_info::AccountInfo]\l1 = &[pinocchio::account_info::AccountInfo]\l2 = core::ops::RangeFrom<usize>\l", style="filled", color=palegreen3];
    X7354e97359dec8c1_0 -> X7354e97359dec8c1_1 [label="0"];
    X7354e97359dec8c1_0 [label="Call\l"];
    X7354e97359dec8c1_1 [label="Return\l"];
  }
  X7354e97359dec8c1_0 -> Xb10705ddd1b146e2_0 [label="mv(2),mv(1)"];
  subgraph cluster_220 {
    label="core::slice::index::<impl\n \ncore::ops::Index<core::op\ns::RangeFrom<usize>> \nfor \n[u8]>::index";
    style="filled";
    color=lightgray;
    node_221 [label="LOCALS\l0 = &[u8]\l1 = &[u8]\l2 = core::ops::RangeFrom<usize>\l", style="filled", color=palegreen3];
    Xac6bf6e65b32d0d0_0 -> Xac6bf6e65b32d0d0_1 [label="0"];
    Xac6bf6e65b32d0d0_0 [label="Call\l"];
    Xac6bf6e65b32d0d0_1 [label="Return\l"];
  }
  Xac6bf6e65b32d0d0_0 -> Xdbbcf3965a56e3eb_0 [label="mv(2),mv(1)"];
  subgraph cluster_222 {
    label="core::slice::index::<impl\n \ncore::ops::Index<core::op\ns::Range<usize>> \nfor \n[[u8; \n32]]>::index";
    style="filled";
    color=lightgray;
    node_223 [label="LOCALS\l0 = &[[u8; 32]]\l1 = &[[u8; 32]]\l2 = core::ops::Range<usize>\l", style="filled", color=palegreen3];
    Xcb4f93944921ea3f_0 -> Xcb4f93944921ea3f_1 [label="0"];
    Xcb4f93944921ea3f_0 [label="Call\l"];
    Xcb4f93944921ea3f_1 [label="Return\l"];
  }
  Xcb4f93944921ea3f_0 -> X320c076b468c7006_0 [label="mv(2),mv(1)"];
  subgraph cluster_224 {
    label="core::option::Option::<u6\n4>::ok_or::<spl_token_int\nerface::error::TokenError\n>";
    style="filled";
    color=lightgray;
    node_225 [label="LOCALS\l0 = core::result::Result<u64, spl_token_interface::error::TokenError>\l1 = core::option::Option<u64>\l2 = spl_token_interface::error::TokenError\l3 = isize\l4 = u64\l5 = spl_token_interface::error::TokenError\l", style="filled", color=palegreen3];
    X31ae1ab89419b067_0 -> X31ae1ab89419b067_2 [label="0"];
    X31ae1ab89419b067_0 -> X31ae1ab89419b067_3 [label="1"];
    X31ae1ab89419b067_0 -> X31ae1ab89419b067_1 [label="other"];
    X31ae1ab89419b067_0 [label="3 <- Discriminant(1)\lSwitchInt mv(3)\l"];
    X31ae1ab89419b067_1 [label="Unreachable\l"];
    X31ae1ab89419b067_2 -> X31ae1ab89419b067_4;
    X31ae1ab89419b067_2 [label="Storage Live _5\l5 <- Use(mv(2))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    X31ae1ab89419b067_3 -> X31ae1ab89419b067_4;
    X31ae1ab89419b067_3 [label="4 <- Use(mv((1 as variant 1).0))\l0 <- Adt{0} (cp(4))\lDrop 2\l"];
    X31ae1ab89419b067_4 [label="Return\l"];
  }
  subgraph cluster_226 {
    label="core::option::Option::<&[\nu8; \n9]>::unwrap";
    style="filled";
    color=lightgray;
    node_227 [label="LOCALS\l0 = &[u8; 9]\l1 = core::option::Option<&[u8; 9]>\l2 = isize\l3 = !\l", style="filled", color=palegreen3];
    X92c5ef47449c0146_0 -> X92c5ef47449c0146_2 [label="0"];
    X92c5ef47449c0146_0 -> X92c5ef47449c0146_3 [label="1"];
    X92c5ef47449c0146_0 -> X92c5ef47449c0146_1 [label="other"];
    X92c5ef47449c0146_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X92c5ef47449c0146_1 [label="Unreachable\l"];
    X92c5ef47449c0146_2 [label="Call\l"];
    X92c5ef47449c0146_3 [label="0 <- Use(mv((1 as variant 1).0))\lReturn\l"];
  }
  X92c5ef47449c0146_2 -> X9b498145f7dc0efa_0 [label=""];
  subgraph cluster_228 {
    label="core::option::Option::<&[\npinocchio::account_info::\nAccountInfo; \n3]>::unwrap";
    style="filled";
    color=lightgray;
    node_229 [label="LOCALS\l0 = &[pinocchio::account_info::AccountInfo; 3]\l1 = core::option::Option<&[pinocchio::account_info::AccountInfo; 3]>\l2 = isize\l3 = !\l", style="filled", color=palegreen3];
    X7eed68a0368bc935_0 -> X7eed68a0368bc935_2 [label="0"];
    X7eed68a0368bc935_0 -> X7eed68a0368bc935_3 [label="1"];
    X7eed68a0368bc935_0 -> X7eed68a0368bc935_1 [label="other"];
    X7eed68a0368bc935_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X7eed68a0368bc935_1 [label="Unreachable\l"];
    X7eed68a0368bc935_2 [label="Call\l"];
    X7eed68a0368bc935_3 [label="0 <- Use(mv((1 as variant 1).0))\lReturn\l"];
  }
  X7eed68a0368bc935_2 -> X9b498145f7dc0efa_0 [label=""];
  subgraph cluster_230 {
    label="core::option::Option::<&[\nu8; \n32]>::is_some";
    style="filled";
    color=lightgray;
    node_231 [label="LOCALS\l0 = bool\l1 = &core::option::Option<&[u8; 32]>\l2 = isize\l", style="filled", color=palegreen3];
    X2d277fd43ee3fe90_0 -> X2d277fd43ee3fe90_2 [label="1"];
    X2d277fd43ee3fe90_0 -> X2d277fd43ee3fe90_1 [label="0"];
    X2d277fd43ee3fe90_0 -> X2d277fd43ee3fe90_4 [label="other"];
    X2d277fd43ee3fe90_0 [label="2 <- Discriminant((*1))\lSwitchInt mv(2)\l"];
    X2d277fd43ee3fe90_1 -> X2d277fd43ee3fe90_3;
    X2d277fd43ee3fe90_1 [label="0 <- Use(const bool)\lGoto\l"];
    X2d277fd43ee3fe90_2 -> X2d277fd43ee3fe90_3;
    X2d277fd43ee3fe90_2 [label="0 <- Use(const bool)\lGoto\l"];
    X2d277fd43ee3fe90_3 [label="Return\l"];
    X2d277fd43ee3fe90_4 [label="Unreachable\l"];
  }
  subgraph cluster_232 {
    label="core::result::Result::<()\n, \npinocchio::program_error:\n:ProgramError>::inspect_e\nrr::<for<'a> \nfn(&'a \npinocchio::program_error:\n:ProgramError) \n{entrypoint::log_error}>";
    style="filled";
    color=lightgray;
    node_233 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = core::result::Result<(), pinocchio::program_error::ProgramError>\l2 = for<'a> fn(&'a pinocchio::program_error::ProgramError) {entrypoint::log_error}\l3 = isize\l4 = &pinocchio::program_error::ProgramError\l5 = ()\l6 = for<'a> fn(&'a pinocchio::program_error::ProgramError) {entrypoint::log_error}\l7 = (&pinocchio::program_error::ProgramError,)\l8 = bool\l9 = bool\l", style="filled", color=palegreen3];
    X960a47fdaee9926a_0 -> X960a47fdaee9926a_1 [label="1"];
    X960a47fdaee9926a_0 -> X960a47fdaee9926a_3 [label="0"];
    X960a47fdaee9926a_0 -> X960a47fdaee9926a_9 [label="other"];
    X960a47fdaee9926a_0 [label="9 <- Use(const bool)\l8 <- Use(const bool)\l3 <- Discriminant(1)\lSwitchInt mv(3)\l"];
    X960a47fdaee9926a_1 -> X960a47fdaee9926a_8 [label="Cleanup"];
    X960a47fdaee9926a_1 -> X960a47fdaee9926a_2 [label="5"];
    X960a47fdaee9926a_1 [label="4 <- & (1 as variant 1).0\lStorage Live _6\l6 <- Use(mv(2))\lStorage Live _7\l7 <- Tuple (cp(4))\lCall\l"];
    X960a47fdaee9926a_2 -> X960a47fdaee9926a_4;
    X960a47fdaee9926a_2 [label="Storage Dead _7\lStorage Dead _6\l0 <- Use(mv(1))\lGoto\l"];
    X960a47fdaee9926a_3 -> X960a47fdaee9926a_4 [label="0"];
    X960a47fdaee9926a_3 -> X960a47fdaee9926a_6 [label="other"];
    X960a47fdaee9926a_3 [label="9 <- Use(const bool)\l0 <- Use(mv(1))\lSwitchInt cp(8)\l"];
    X960a47fdaee9926a_4 [label="Return\l"];
    X960a47fdaee9926a_5 [label="Resume\l"];
    X960a47fdaee9926a_6 -> X960a47fdaee9926a_8 [label="Cleanup"];
    X960a47fdaee9926a_6 -> X960a47fdaee9926a_4;
    X960a47fdaee9926a_6 [label="Drop 2\l"];
    X960a47fdaee9926a_7 -> X960a47fdaee9926a_5;
    X960a47fdaee9926a_7 [label="Drop 1\l"];
    X960a47fdaee9926a_8 -> X960a47fdaee9926a_5 [label="0"];
    X960a47fdaee9926a_8 -> X960a47fdaee9926a_7 [label="other"];
    X960a47fdaee9926a_8 [label="SwitchInt cp(9)\l"];
    X960a47fdaee9926a_9 [label="Unreachable\l"];
  }
  X960a47fdaee9926a_1 -> Xf950bf27d0cf5c6c_0 [label="mv(6),mv(7)"];
  subgraph cluster_234 {
    label="core::result::Result::<sp\nl_token_interface::state:\n:account_state::AccountSt\nate, \npinocchio::program_error:\n:ProgramError>::map::<boo\nl, \n{closure@spl_token_interf\nace::state::account::Acco\nunt::is_frozen::{closure#\n0}}>";
    style="filled";
    color=lightgray;
    node_235 [label="LOCALS\l0 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l1 = core::result::Result<spl_token_interface::state::account_state::AccountState, pinocchio::program_error::ProgramError>\l2 = {closure@spl_token_interface::state::account::Account::is_frozen::{closure#0}}\l3 = isize\l4 = spl_token_interface::state::account_state::AccountState\l5 = bool\l6 = {closure@spl_token_interface::state::account::Account::is_frozen::{closure#0}}\l7 = (spl_token_interface::state::account_state::AccountState,)\l8 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X84726243ee452bb7_0 -> X84726243ee452bb7_3 [label="0"];
    X84726243ee452bb7_0 -> X84726243ee452bb7_2 [label="1"];
    X84726243ee452bb7_0 -> X84726243ee452bb7_1 [label="other"];
    X84726243ee452bb7_0 [label="3 <- Discriminant(1)\lSwitchInt mv(3)\l"];
    X84726243ee452bb7_1 [label="Unreachable\l"];
    X84726243ee452bb7_2 -> X84726243ee452bb7_5;
    X84726243ee452bb7_2 [label="8 <- Use(mv((1 as variant 1).0))\l0 <- Adt{1} (cp(8))\lDrop 2\l"];
    X84726243ee452bb7_3 -> X84726243ee452bb7_4 [label="5"];
    X84726243ee452bb7_3 [label="4 <- Use(mv((1 as variant 0).0))\lStorage Live _5\lStorage Live _6\l6 <- Use(mv(2))\lStorage Live _7\l7 <- Tuple (cp(4))\lCall\l"];
    X84726243ee452bb7_4 -> X84726243ee452bb7_5;
    X84726243ee452bb7_4 [label="Storage Dead _7\lStorage Dead _6\l0 <- Adt{0} (mv(5))\lStorage Dead _5\lGoto\l"];
    X84726243ee452bb7_5 [label="Return\l"];
  }
  X84726243ee452bb7_3 -> X305495a33c194900_0 [label="mv(6),mv(7)"];
  subgraph cluster_236 {
    label="core::result::Result::<sp\nl_token_interface::state:\n:account_state::AccountSt\nate, \npinocchio::program_error:\n:ProgramError>::map::<boo\nl, \n{closure@<spl_token_inter\nface::state::account::Acc\nount \nas \nspl_token_interface::stat\ne::Initializable>::is_ini\ntialized::{closure#0}}>";
    style="filled";
    color=lightgray;
    node_237 [label="LOCALS\l0 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l1 = core::result::Result<spl_token_interface::state::account_state::AccountState, pinocchio::program_error::ProgramError>\l2 = {closure@<spl_token_interface::state::account::Account as spl_token_interface::state::Initializable>::is_initialized::{closure#0}}\l3 = isize\l4 = spl_token_interface::state::account_state::AccountState\l5 = bool\l6 = {closure@<spl_token_interface::state::account::Account as spl_token_interface::state::Initializable>::is_initialized::{closure#0}}\l7 = (spl_token_interface::state::account_state::AccountState,)\l8 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X881c7a326c470b28_0 -> X881c7a326c470b28_3 [label="0"];
    X881c7a326c470b28_0 -> X881c7a326c470b28_2 [label="1"];
    X881c7a326c470b28_0 -> X881c7a326c470b28_1 [label="other"];
    X881c7a326c470b28_0 [label="3 <- Discriminant(1)\lSwitchInt mv(3)\l"];
    X881c7a326c470b28_1 [label="Unreachable\l"];
    X881c7a326c470b28_2 -> X881c7a326c470b28_5;
    X881c7a326c470b28_2 [label="8 <- Use(mv((1 as variant 1).0))\l0 <- Adt{1} (cp(8))\lDrop 2\l"];
    X881c7a326c470b28_3 -> X881c7a326c470b28_4 [label="5"];
    X881c7a326c470b28_3 [label="4 <- Use(mv((1 as variant 0).0))\lStorage Live _5\lStorage Live _6\l6 <- Use(mv(2))\lStorage Live _7\l7 <- Tuple (cp(4))\lCall\l"];
    X881c7a326c470b28_4 -> X881c7a326c470b28_5;
    X881c7a326c470b28_4 [label="Storage Dead _7\lStorage Dead _6\l0 <- Adt{0} (mv(5))\lStorage Dead _5\lGoto\l"];
    X881c7a326c470b28_5 [label="Return\l"];
  }
  X881c7a326c470b28_3 -> Xe8c8eaa619633971_0 [label="mv(6),mv(7)"];
  subgraph cluster_238 {
    label="core::result::Result::<()\n, \npinocchio::program_error:\n:ProgramError>::is_ok";
    style="filled";
    color=lightgray;
    node_239 [label="LOCALS\l0 = bool\l1 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l2 = isize\l", style="filled", color=palegreen3];
    X19e8b93c837642e3_0 -> X19e8b93c837642e3_2 [label="0"];
    X19e8b93c837642e3_0 -> X19e8b93c837642e3_1 [label="1"];
    X19e8b93c837642e3_0 -> X19e8b93c837642e3_4 [label="other"];
    X19e8b93c837642e3_0 [label="2 <- Discriminant((*1))\lSwitchInt mv(2)\l"];
    X19e8b93c837642e3_1 -> X19e8b93c837642e3_3;
    X19e8b93c837642e3_1 [label="0 <- Use(const bool)\lGoto\l"];
    X19e8b93c837642e3_2 -> X19e8b93c837642e3_3;
    X19e8b93c837642e3_2 [label="0 <- Use(const bool)\lGoto\l"];
    X19e8b93c837642e3_3 [label="Return\l"];
    X19e8b93c837642e3_4 [label="Unreachable\l"];
  }
  subgraph cluster_240 {
    label="core::result::Result::<sp\nl_token_interface::state:\n:account_state::AccountSt\nate, \npinocchio::program_error:\n:ProgramError>::unwrap";
    style="filled";
    color=lightgray;
    node_241 [label="LOCALS\l0 = spl_token_interface::state::account_state::AccountState\l1 = core::result::Result<spl_token_interface::state::account_state::AccountState, pinocchio::program_error::ProgramError>\l2 = isize\l3 = pinocchio::program_error::ProgramError\l4 = !\l5 = &dyn core::fmt::Debug\l6 = &pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    Xca79d860634e64da_0 -> Xca79d860634e64da_3 [label="0"];
    Xca79d860634e64da_0 -> Xca79d860634e64da_2 [label="1"];
    Xca79d860634e64da_0 -> Xca79d860634e64da_1 [label="other"];
    Xca79d860634e64da_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    Xca79d860634e64da_1 [label="Unreachable\l"];
    Xca79d860634e64da_2 -> Xca79d860634e64da_4 [label="Cleanup"];
    Xca79d860634e64da_2 [label="Storage Live _3\l3 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l6 <- & 3\l5 <- Cast-PointerCoercion(Unsize) cp(6)\lCall\l"];
    Xca79d860634e64da_3 [label="0 <- Use(mv((1 as variant 0).0))\lReturn\l"];
    Xca79d860634e64da_4 -> Xca79d860634e64da_5;
    Xca79d860634e64da_4 [label="Drop 3\l"];
    Xca79d860634e64da_5 [label="Resume\l"];
  }
  Xca79d860634e64da_2 -> Xdd778da4886cf626_0 [label="const &str,mv(5)"];
  subgraph cluster_242 {
    label="core::result::Result::<bo\nol, \npinocchio::program_error:\n:ProgramError>::unwrap";
    style="filled";
    color=lightgray;
    node_243 [label="LOCALS\l0 = bool\l1 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l2 = isize\l3 = pinocchio::program_error::ProgramError\l4 = !\l5 = &dyn core::fmt::Debug\l6 = &pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X89be5f95c133d42a_0 -> X89be5f95c133d42a_3 [label="0"];
    X89be5f95c133d42a_0 -> X89be5f95c133d42a_2 [label="1"];
    X89be5f95c133d42a_0 -> X89be5f95c133d42a_1 [label="other"];
    X89be5f95c133d42a_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X89be5f95c133d42a_1 [label="Unreachable\l"];
    X89be5f95c133d42a_2 -> X89be5f95c133d42a_4 [label="Cleanup"];
    X89be5f95c133d42a_2 [label="Storage Live _3\l3 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l6 <- & 3\l5 <- Cast-PointerCoercion(Unsize) cp(6)\lCall\l"];
    X89be5f95c133d42a_3 [label="0 <- Use(mv((1 as variant 0).0))\lReturn\l"];
    X89be5f95c133d42a_4 -> X89be5f95c133d42a_5;
    X89be5f95c133d42a_4 [label="Drop 3\l"];
    X89be5f95c133d42a_5 [label="Resume\l"];
  }
  X89be5f95c133d42a_2 -> Xdd778da4886cf626_0 [label="const &str,mv(5)"];
  subgraph cluster_244 {
    label="core::result::Result::<&m\nut \nspl_token_interface::stat\ne::mint::Mint, \npinocchio::program_error:\n:ProgramError>::and_then:\n:<&mut \nspl_token_interface::stat\ne::mint::Mint, \n{closure@spl_token_interf\nace::state::load_mut<spl_\ntoken_interface::state::m\nint::Mint>::{closure#0}}>";
    style="filled";
    color=lightgray;
    node_245 [label="LOCALS\l0 = core::result::Result<&mut spl_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l1 = core::result::Result<&mut spl_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l2 = {closure@spl_token_interface::state::load_mut<spl_token_interface::state::mint::Mint>::{closure#0}}\l3 = isize\l4 = &mut spl_token_interface::state::mint::Mint\l5 = {closure@spl_token_interface::state::load_mut<spl_token_interface::state::mint::Mint>::{closure#0}}\l6 = (&mut spl_token_interface::state::mint::Mint,)\l7 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    Xf8b5baf5b068f398_0 -> Xf8b5baf5b068f398_3 [label="0"];
    Xf8b5baf5b068f398_0 -> Xf8b5baf5b068f398_2 [label="1"];
    Xf8b5baf5b068f398_0 -> Xf8b5baf5b068f398_1 [label="other"];
    Xf8b5baf5b068f398_0 [label="3 <- Discriminant(1)\lSwitchInt mv(3)\l"];
    Xf8b5baf5b068f398_1 [label="Unreachable\l"];
    Xf8b5baf5b068f398_2 -> Xf8b5baf5b068f398_5;
    Xf8b5baf5b068f398_2 [label="7 <- Use(mv((1 as variant 1).0))\l0 <- Adt{1} (cp(7))\lDrop 2\l"];
    Xf8b5baf5b068f398_3 -> Xf8b5baf5b068f398_4 [label="0"];
    Xf8b5baf5b068f398_3 [label="4 <- Use(mv((1 as variant 0).0))\lStorage Live _5\l5 <- Use(mv(2))\lStorage Live _6\l6 <- Tuple (cp(4))\lCall\l"];
    Xf8b5baf5b068f398_4 -> Xf8b5baf5b068f398_5;
    Xf8b5baf5b068f398_4 [label="Storage Dead _6\lStorage Dead _5\lGoto\l"];
    Xf8b5baf5b068f398_5 [label="Return\l"];
  }
  Xf8b5baf5b068f398_3 -> X738dd283b6e72ce8_0 [label="mv(5),mv(6)"];
  subgraph cluster_246 {
    label="core::result::Result::<&m\nut \nspl_token_interface::stat\ne::account::Account, \npinocchio::program_error:\n:ProgramError>::and_then:\n:<&mut \nspl_token_interface::stat\ne::account::Account, \n{closure@spl_token_interf\nace::state::load_mut<spl_\ntoken_interface::state::a\nccount::Account>::{closur\ne#0}}>";
    style="filled";
    color=lightgray;
    node_247 [label="LOCALS\l0 = core::result::Result<&mut spl_token_interface::state::account::Account, pinocchio::program_error::ProgramError>\l1 = core::result::Result<&mut spl_token_interface::state::account::Account, pinocchio::program_error::ProgramError>\l2 = {closure@spl_token_interface::state::load_mut<spl_token_interface::state::account::Account>::{closure#0}}\l3 = isize\l4 = &mut spl_token_interface::state::account::Account\l5 = {closure@spl_token_interface::state::load_mut<spl_token_interface::state::account::Account>::{closure#0}}\l6 = (&mut spl_token_interface::state::account::Account,)\l7 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    Xcceea671109cd764_0 -> Xcceea671109cd764_3 [label="0"];
    Xcceea671109cd764_0 -> Xcceea671109cd764_2 [label="1"];
    Xcceea671109cd764_0 -> Xcceea671109cd764_1 [label="other"];
    Xcceea671109cd764_0 [label="3 <- Discriminant(1)\lSwitchInt mv(3)\l"];
    Xcceea671109cd764_1 [label="Unreachable\l"];
    Xcceea671109cd764_2 -> Xcceea671109cd764_5;
    Xcceea671109cd764_2 [label="7 <- Use(mv((1 as variant 1).0))\l0 <- Adt{1} (cp(7))\lDrop 2\l"];
    Xcceea671109cd764_3 -> Xcceea671109cd764_4 [label="0"];
    Xcceea671109cd764_3 [label="4 <- Use(mv((1 as variant 0).0))\lStorage Live _5\l5 <- Use(mv(2))\lStorage Live _6\l6 <- Tuple (cp(4))\lCall\l"];
    Xcceea671109cd764_4 -> Xcceea671109cd764_5;
    Xcceea671109cd764_4 [label="Storage Dead _6\lStorage Dead _5\lGoto\l"];
    Xcceea671109cd764_5 [label="Return\l"];
  }
  Xcceea671109cd764_3 -> X17bee11f5c7b336b_0 [label="mv(5),mv(6)"];
  subgraph cluster_248 {
    label="core::result::Result::<&s\npl_token_interface::state\n::multisig::Multisig, \npinocchio::program_error:\n:ProgramError>::and_then:\n:<&spl_token_interface::s\ntate::multisig::Multisig,\n \n{closure@spl_token_interf\nace::state::load<spl_toke\nn_interface::state::multi\nsig::Multisig>::{closure#\n0}}>";
    style="filled";
    color=lightgray;
    node_249 [label="LOCALS\l0 = core::result::Result<&spl_token_interface::state::multisig::Multisig, pinocchio::program_error::ProgramError>\l1 = core::result::Result<&spl_token_interface::state::multisig::Multisig, pinocchio::program_error::ProgramError>\l2 = {closure@spl_token_interface::state::load<spl_token_interface::state::multisig::Multisig>::{closure#0}}\l3 = isize\l4 = &spl_token_interface::state::multisig::Multisig\l5 = {closure@spl_token_interface::state::load<spl_token_interface::state::multisig::Multisig>::{closure#0}}\l6 = (&spl_token_interface::state::multisig::Multisig,)\l7 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    Xe169004e943718b6_0 -> Xe169004e943718b6_3 [label="0"];
    Xe169004e943718b6_0 -> Xe169004e943718b6_2 [label="1"];
    Xe169004e943718b6_0 -> Xe169004e943718b6_1 [label="other"];
    Xe169004e943718b6_0 [label="3 <- Discriminant(1)\lSwitchInt mv(3)\l"];
    Xe169004e943718b6_1 [label="Unreachable\l"];
    Xe169004e943718b6_2 -> Xe169004e943718b6_5;
    Xe169004e943718b6_2 [label="7 <- Use(mv((1 as variant 1).0))\l0 <- Adt{1} (cp(7))\lDrop 2\l"];
    Xe169004e943718b6_3 -> Xe169004e943718b6_4 [label="0"];
    Xe169004e943718b6_3 [label="4 <- Use(mv((1 as variant 0).0))\lStorage Live _5\l5 <- Use(mv(2))\lStorage Live _6\l6 <- Tuple (cp(4))\lCall\l"];
    Xe169004e943718b6_4 -> Xe169004e943718b6_5;
    Xe169004e943718b6_4 [label="Storage Dead _6\lStorage Dead _5\lGoto\l"];
    Xe169004e943718b6_5 [label="Return\l"];
  }
  Xe169004e943718b6_3 -> X4bf3cf34b753f058_0 [label="mv(5),mv(6)"];
  subgraph cluster_250 {
    label="core::panicking::assert_f\nailed::<core::result::Res\nult<(), \npinocchio::program_error:\n:ProgramError>, \ncore::result::Result<(), \npinocchio::program_error:\n:ProgramError>>";
    style="filled";
    color=lightgray;
    node_251 [label="LOCALS\l0 = !\l1 = core::panicking::AssertKind\l2 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l3 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l4 = core::option::Option<core::fmt::Arguments<'_>>\l5 = &dyn core::fmt::Debug\l6 = &&core::result::Result<(), pinocchio::program_error::ProgramError>\l7 = &dyn core::fmt::Debug\l8 = &&core::result::Result<(), pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    X1badff0345f2ca99_0 [label="Storage Live _5\l6 <- & 2\l5 <- Cast-PointerCoercion(Unsize) cp(6)\lStorage Live _7\l8 <- & 3\l7 <- Cast-PointerCoercion(Unsize) cp(8)\lCall\l"];
  }
  X1badff0345f2ca99_0 -> X1eb9e8a223d962a5_0 [label="mv(1),mv(5),mv(7),mv(4)"];
  subgraph cluster_252 {
    label="<pinocchio::program_error\n::ProgramError \nas \ncore::convert::From<pinoc\nchio::program_error::Prog\nramError>>::from";
    style="filled";
    color=lightgray;
    node_253 [label="LOCALS\l0 = pinocchio::program_error::ProgramError\l1 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X6ab29abaf30a0fd0_0 [label="0 <- Use(mv(1))\lReturn\l"];
  }
  subgraph cluster_254 {
    label="<pinocchio::program_error\n::ProgramError \nas \ncore::convert::Into<u64>>\n::into";
    style="filled";
    color=lightgray;
    node_255 [label="LOCALS\l0 = u64\l1 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X9b7d50e3fbab8ea3_0 -> X9b7d50e3fbab8ea3_1 [label="0"];
    X9b7d50e3fbab8ea3_0 [label="Call\l"];
    X9b7d50e3fbab8ea3_1 [label="Return\l"];
  }
  X9b7d50e3fbab8ea3_0 -> X7a4a77babfb83a53_0 [label="mv(1)"];
  subgraph cluster_256 {
    label="<core::iter::Enumerate<co\nre::slice::Iter<'_, \n[u8; \n32]>> \nas \ncore::iter::IntoIterator>\n::into_iter";
    style="filled";
    color=lightgray;
    node_257 [label="LOCALS\l0 = core::iter::Enumerate<core::slice::Iter<'_, [u8; 32]>>\l1 = core::iter::Enumerate<core::slice::Iter<'_, [u8; 32]>>\l", style="filled", color=palegreen3];
    X7d8e92caf1f2a5f3_0 [label="0 <- Use(mv(1))\lReturn\l"];
  }
  subgraph cluster_258 {
    label="<core::slice::Iter<'_, \npinocchio::account_info::\nAccountInfo> \nas \ncore::iter::IntoIterator>\n::into_iter";
    style="filled";
    color=lightgray;
    node_259 [label="LOCALS\l0 = core::slice::Iter<'_, pinocchio::account_info::AccountInfo>\l1 = core::slice::Iter<'_, pinocchio::account_info::AccountInfo>\l", style="filled", color=palegreen3];
    X7e2b88a54a411cb3_0 [label="0 <- Use(mv(1))\lReturn\l"];
  }
  subgraph cluster_260 {
    label="<core::ops::Range<usize> \nas \ncore::iter::IntoIterator>\n::into_iter";
    style="filled";
    color=lightgray;
    node_261 [label="LOCALS\l0 = core::ops::Range<usize>\l1 = core::ops::Range<usize>\l", style="filled", color=palegreen3];
    Xe9e3ff72e55a5f27_0 [label="0 <- Use(mv(1))\lReturn\l"];
  }
  subgraph cluster_262 {
    label="<u8 \nas \ncore::array::equality::Sp\necArrayEq<u8, \n32>>::spec_eq";
    style="filled";
    color=lightgray;
    node_263 [label="LOCALS\l0 = bool\l1 = &[u8; 32]\l2 = &[u8; 32]\l3 = &[u8; 32]\l", style="filled", color=palegreen3];
    Xb51f0a1884dba91f_0 -> Xb51f0a1884dba91f_1 [label="0"];
    Xb51f0a1884dba91f_0 [label="Storage Live _3\l3 <- Cast-Transmute cp(2)\lCall\l"];
    Xb51f0a1884dba91f_1 [label="Storage Dead _3\lReturn\l"];
  }
  Xb51f0a1884dba91f_0 -> X43ad75e732d0e131_0 [label="mv(1),mv(3)"];
  subgraph cluster_264 {
    label="<u8 \nas \ncore::array::equality::Sp\necArrayEq<u8, \n32>>::spec_ne";
    style="filled";
    color=lightgray;
    node_265 [label="LOCALS\l0 = bool\l1 = &[u8; 32]\l2 = &[u8; 32]\l3 = bool\l4 = &[u8; 32]\l", style="filled", color=palegreen3];
    Xf0a84b1dfc729bb8_0 -> Xf0a84b1dfc729bb8_1 [label="3"];
    Xf0a84b1dfc729bb8_0 [label="Storage Live _3\lStorage Live _4\l4 <- Cast-Transmute cp(2)\lCall\l"];
    Xf0a84b1dfc729bb8_1 [label="Storage Dead _4\l0 <- Not(mv(3))\lStorage Dead _3\lReturn\l"];
  }
  Xf0a84b1dfc729bb8_0 -> X43ad75e732d0e131_0 [label="mv(1),mv(4)"];
  subgraph cluster_266 {
    label="<core::result::Result<(),\n \npinocchio::program_error:\n:ProgramError> \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_267 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l2 = &mut core::fmt::Formatter<'_>\l3 = isize\l4 = &()\l5 = &dyn core::fmt::Debug\l6 = &&()\l7 = &pinocchio::program_error::ProgramError\l8 = &dyn core::fmt::Debug\l9 = &&pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X43f71b6e2d20bf4b_0 -> X43f71b6e2d20bf4b_3 [label="0"];
    X43f71b6e2d20bf4b_0 -> X43f71b6e2d20bf4b_2 [label="1"];
    X43f71b6e2d20bf4b_0 -> X43f71b6e2d20bf4b_1 [label="other"];
    X43f71b6e2d20bf4b_0 [label="3 <- Discriminant((*1))\lSwitchInt mv(3)\l"];
    X43f71b6e2d20bf4b_1 [label="Unreachable\l"];
    X43f71b6e2d20bf4b_2 -> X43f71b6e2d20bf4b_5 [label="0"];
    X43f71b6e2d20bf4b_2 [label="Storage Live _7\l7 <- & ((*1) as variant 1).0\lStorage Live _8\l9 <- & 7\l8 <- Cast-PointerCoercion(Unsize) cp(9)\lCall\l"];
    X43f71b6e2d20bf4b_3 -> X43f71b6e2d20bf4b_4 [label="0"];
    X43f71b6e2d20bf4b_3 [label="Storage Live _4\l4 <- & ((*1) as variant 0).0\lStorage Live _5\l6 <- & 4\l5 <- Cast-PointerCoercion(Unsize) cp(6)\lCall\l"];
    X43f71b6e2d20bf4b_4 -> X43f71b6e2d20bf4b_6;
    X43f71b6e2d20bf4b_4 [label="Storage Dead _5\lStorage Dead _4\lGoto\l"];
    X43f71b6e2d20bf4b_5 -> X43f71b6e2d20bf4b_6;
    X43f71b6e2d20bf4b_5 [label="Storage Dead _8\lStorage Dead _7\lGoto\l"];
    X43f71b6e2d20bf4b_6 [label="Return\l"];
  }
  X43f71b6e2d20bf4b_2 -> X85724fedaf4a5444_0 [label="mv(2),const &str,mv(8)"];
  X43f71b6e2d20bf4b_3 -> X85724fedaf4a5444_0 [label="mv(2),const &str,mv(5)"];
  subgraph cluster_268 {
    label="<core::result::Result<(),\n \npinocchio::program_error:\n:ProgramError> \nas \ncore::cmp::PartialEq>::eq";
    style="filled";
    color=lightgray;
    node_269 [label="LOCALS\l0 = bool\l1 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l2 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l3 = isize\l4 = isize\l5 = bool\l6 = isize\l7 = isize\l8 = isize\l9 = &()\l10 = &()\l11 = &&()\l12 = &&()\l13 = &pinocchio::program_error::ProgramError\l14 = &pinocchio::program_error::ProgramError\l15 = &&pinocchio::program_error::ProgramError\l16 = &&pinocchio::program_error::ProgramError\l17 = bool\l18 = bool\l", style="filled", color=palegreen3];
    X9d133aa780502b33_0 -> X9d133aa780502b33_2 [label="0"];
    X9d133aa780502b33_0 -> X9d133aa780502b33_1 [label="other"];
    X9d133aa780502b33_0 [label="3 <- Discriminant((*1))\l4 <- Discriminant((*2))\lStorage Live _5\l5 <- Eq(cp(3), cp(4))\lSwitchInt mv(5)\l"];
    X9d133aa780502b33_1 -> X9d133aa780502b33_3 [label="0"];
    X9d133aa780502b33_1 -> X9d133aa780502b33_4 [label="1"];
    X9d133aa780502b33_1 -> X9d133aa780502b33_8 [label="other"];
    X9d133aa780502b33_1 [label="8 <- Discriminant((*1))\lSwitchInt mv(8)\l"];
    X9d133aa780502b33_2 -> X9d133aa780502b33_5;
    X9d133aa780502b33_2 [label="0 <- Use(const bool)\lGoto\l"];
    X9d133aa780502b33_3 -> X9d133aa780502b33_7 [label="0"];
    X9d133aa780502b33_3 [label="6 <- Discriminant((*2))\l18 <- Eq(cp(6), const ?_isize)\lIntr: Assume mv(18)\l9 <- & ((*1) as variant 0).0\l10 <- & ((*2) as variant 0).0\lStorage Live _11\l11 <- & 9\lStorage Live _12\l12 <- & 10\lCall\l"];
    X9d133aa780502b33_4 -> X9d133aa780502b33_6 [label="0"];
    X9d133aa780502b33_4 [label="7 <- Discriminant((*2))\l17 <- Eq(cp(7), const ?_isize)\lIntr: Assume mv(17)\l13 <- & ((*1) as variant 1).0\l14 <- & ((*2) as variant 1).0\lStorage Live _15\l15 <- & 13\lStorage Live _16\l16 <- & 14\lCall\l"];
    X9d133aa780502b33_5 [label="Storage Dead _5\lReturn\l"];
    X9d133aa780502b33_6 -> X9d133aa780502b33_5;
    X9d133aa780502b33_6 [label="Storage Dead _16\lStorage Dead _15\lGoto\l"];
    X9d133aa780502b33_7 -> X9d133aa780502b33_5;
    X9d133aa780502b33_7 [label="Storage Dead _12\lStorage Dead _11\lGoto\l"];
    X9d133aa780502b33_8 [label="Unreachable\l"];
  }
  X9d133aa780502b33_3 -> Xd7393c030c57f210_0 [label="cp(9),cp(10)"];
  X9d133aa780502b33_4 -> Xb4e4aaf53eb6efb_0 [label="cp(13),cp(14)"];
  subgraph cluster_270 {
    label="<pinocchio::account_info:\n:AccountInfo \nas \ncore::clone::Clone>::clon\ne";
    style="filled";
    color=lightgray;
    node_271 [label="LOCALS\l0 = pinocchio::account_info::AccountInfo\l1 = &pinocchio::account_info::AccountInfo\l2 = *mut pinocchio::account_info::Account\l3 = &*mut pinocchio::account_info::Account\l", style="filled", color=palegreen3];
    Xdf6433a5e6c64a8f_0 [label="3 <- & (*1).0\l2 <- Use(cp((*3)))\l0 <- Adt{0} (mv(2))\lReturn\l"];
  }
  subgraph cluster_272 {
    label="<pinocchio::program_error\n::ProgramError \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_273 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &pinocchio::program_error::ProgramError\l2 = &mut core::fmt::Formatter<'_>\l3 = isize\l4 = &u32\l5 = &str\l6 = &dyn core::fmt::Debug\l7 = &&u32\l8 = &str\l9 = &str\l10 = &str\l11 = &str\l12 = &str\l13 = &str\l14 = &str\l15 = &str\l16 = &str\l17 = &str\l18 = &str\l19 = &str\l20 = &str\l21 = &str\l22 = &str\l23 = &str\l24 = &str\l25 = &str\l26 = &str\l27 = &str\l28 = &str\l29 = &str\l30 = &str\l31 = &str\l32 = &str\l", style="filled", color=palegreen3];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_27 [label="0"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_26 [label="1"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_25 [label="2"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_24 [label="3"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_23 [label="4"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_22 [label="5"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_21 [label="6"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_20 [label="7"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_19 [label="8"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_18 [label="9"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_17 [label="10"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_16 [label="11"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_15 [label="12"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_14 [label="13"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_13 [label="14"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_12 [label="15"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_11 [label="16"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_10 [label="17"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_9 [label="18"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_8 [label="19"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_7 [label="20"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_6 [label="21"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_5 [label="22"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_4 [label="23"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_3 [label="24"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_2 [label="25"];
    X4d96ea5120bb9c65_0 -> X4d96ea5120bb9c65_1 [label="other"];
    X4d96ea5120bb9c65_0 [label="3 <- Discriminant((*1))\lSwitchInt mv(3)\l"];
    X4d96ea5120bb9c65_1 [label="Unreachable\l"];
    X4d96ea5120bb9c65_2 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_2 [label="32 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_3 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_3 [label="31 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_4 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_4 [label="30 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_5 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_5 [label="29 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_6 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_6 [label="28 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_7 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_7 [label="27 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_8 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_8 [label="26 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_9 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_9 [label="25 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_10 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_10 [label="24 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_11 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_11 [label="23 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_12 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_12 [label="22 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_13 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_13 [label="21 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_14 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_14 [label="20 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_15 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_15 [label="19 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_16 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_16 [label="18 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_17 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_17 [label="17 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_18 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_18 [label="16 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_19 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_19 [label="15 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_20 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_20 [label="14 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_21 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_21 [label="13 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_22 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_22 [label="12 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_23 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_23 [label="11 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_24 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_24 [label="10 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_25 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_25 [label="9 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_26 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_26 [label="8 <- Use(const &str)\lCall\l"];
    X4d96ea5120bb9c65_27 -> X4d96ea5120bb9c65_28 [label="0"];
    X4d96ea5120bb9c65_27 [label="4 <- & ((*1) as variant 0).0\l5 <- Use(const &str)\l7 <- & 4\l6 <- Cast-PointerCoercion(Unsize) cp(7)\lCall\l"];
    X4d96ea5120bb9c65_28 [label="Return\l"];
  }
  X4d96ea5120bb9c65_2 -> Xb93f0288e0006b54_0 [label="cp(2),mv(32)"];
  X4d96ea5120bb9c65_3 -> Xb93f0288e0006b54_0 [label="cp(2),mv(31)"];
  X4d96ea5120bb9c65_4 -> Xb93f0288e0006b54_0 [label="cp(2),mv(30)"];
  X4d96ea5120bb9c65_5 -> Xb93f0288e0006b54_0 [label="cp(2),mv(29)"];
  X4d96ea5120bb9c65_6 -> Xb93f0288e0006b54_0 [label="cp(2),mv(28)"];
  X4d96ea5120bb9c65_7 -> Xb93f0288e0006b54_0 [label="cp(2),mv(27)"];
  X4d96ea5120bb9c65_8 -> Xb93f0288e0006b54_0 [label="cp(2),mv(26)"];
  X4d96ea5120bb9c65_9 -> Xb93f0288e0006b54_0 [label="cp(2),mv(25)"];
  X4d96ea5120bb9c65_10 -> Xb93f0288e0006b54_0 [label="cp(2),mv(24)"];
  X4d96ea5120bb9c65_11 -> Xb93f0288e0006b54_0 [label="cp(2),mv(23)"];
  X4d96ea5120bb9c65_12 -> Xb93f0288e0006b54_0 [label="cp(2),mv(22)"];
  X4d96ea5120bb9c65_13 -> Xb93f0288e0006b54_0 [label="cp(2),mv(21)"];
  X4d96ea5120bb9c65_14 -> Xb93f0288e0006b54_0 [label="cp(2),mv(20)"];
  X4d96ea5120bb9c65_15 -> Xb93f0288e0006b54_0 [label="cp(2),mv(19)"];
  X4d96ea5120bb9c65_16 -> Xb93f0288e0006b54_0 [label="cp(2),mv(18)"];
  X4d96ea5120bb9c65_17 -> Xb93f0288e0006b54_0 [label="cp(2),mv(17)"];
  X4d96ea5120bb9c65_18 -> Xb93f0288e0006b54_0 [label="cp(2),mv(16)"];
  X4d96ea5120bb9c65_19 -> Xb93f0288e0006b54_0 [label="cp(2),mv(15)"];
  X4d96ea5120bb9c65_20 -> Xb93f0288e0006b54_0 [label="cp(2),mv(14)"];
  X4d96ea5120bb9c65_21 -> Xb93f0288e0006b54_0 [label="cp(2),mv(13)"];
  X4d96ea5120bb9c65_22 -> Xb93f0288e0006b54_0 [label="cp(2),mv(12)"];
  X4d96ea5120bb9c65_23 -> Xb93f0288e0006b54_0 [label="cp(2),mv(11)"];
  X4d96ea5120bb9c65_24 -> Xb93f0288e0006b54_0 [label="cp(2),mv(10)"];
  X4d96ea5120bb9c65_25 -> Xb93f0288e0006b54_0 [label="cp(2),mv(9)"];
  X4d96ea5120bb9c65_26 -> Xb93f0288e0006b54_0 [label="cp(2),mv(8)"];
  X4d96ea5120bb9c65_27 -> X85724fedaf4a5444_0 [label="cp(2),mv(5),mv(6)"];
  subgraph cluster_274 {
    label="<usize \nas \ncore::slice::SliceIndex<[\ncore::mem::MaybeUninit<pi\nnocchio::account_info::Ac\ncountInfo>]>>::get_unchec\nked";
    style="filled";
    color=lightgray;
    node_275 [label="LOCALS\l0 = *const core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l1 = usize\l2 = *const [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l3 = bool\l4 = ()\l5 = usize\l6 = bool\l7 = usize\l8 = *const core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l", style="filled", color=palegreen3];
    Xf7c0e3c61151eb20_0 -> Xf7c0e3c61151eb20_3 [label="0"];
    Xf7c0e3c61151eb20_0 -> Xf7c0e3c61151eb20_1 [label="other"];
    Xf7c0e3c61151eb20_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    Xf7c0e3c61151eb20_1 -> Xf7c0e3c61151eb20_2 [label="4"];
    Xf7c0e3c61151eb20_1 [label="Storage Live _5\l5 <- PtrMetadata(cp(2))\lCall\l"];
    Xf7c0e3c61151eb20_2 -> Xf7c0e3c61151eb20_3;
    Xf7c0e3c61151eb20_2 [label="Storage Dead _5\lGoto\l"];
    Xf7c0e3c61151eb20_3 [label="Storage Dead _3\lStorage Live _6\lStorage Live _7\l7 <- PtrMetadata(cp(2))\l6 <- Lt(cp(1), mv(7))\lStorage Dead _7\lIntr: Assume mv(6)\lStorage Dead _6\lStorage Live _8\l8 <- Cast-PtrToPtr cp(2)\l0 <- Offset(cp(8), cp(1))\lStorage Dead _8\lReturn\l"];
  }
  Xf7c0e3c61151eb20_1 -> Xfa2081497ee34a_0 [label="cp(1),mv(5)"];
  subgraph cluster_276 {
    label="<usize \nas \ncore::slice::SliceIndex<[\nu8]>>::get_unchecked";
    style="filled";
    color=lightgray;
    node_277 [label="LOCALS\l0 = *const u8\l1 = usize\l2 = *const [u8]\l3 = bool\l4 = ()\l5 = usize\l6 = bool\l7 = usize\l8 = *const u8\l", style="filled", color=palegreen3];
    X7bd4403f8d22bbb7_0 -> X7bd4403f8d22bbb7_3 [label="0"];
    X7bd4403f8d22bbb7_0 -> X7bd4403f8d22bbb7_1 [label="other"];
    X7bd4403f8d22bbb7_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    X7bd4403f8d22bbb7_1 -> X7bd4403f8d22bbb7_2 [label="4"];
    X7bd4403f8d22bbb7_1 [label="Storage Live _5\l5 <- PtrMetadata(cp(2))\lCall\l"];
    X7bd4403f8d22bbb7_2 -> X7bd4403f8d22bbb7_3;
    X7bd4403f8d22bbb7_2 [label="Storage Dead _5\lGoto\l"];
    X7bd4403f8d22bbb7_3 [label="Storage Dead _3\lStorage Live _6\lStorage Live _7\l7 <- PtrMetadata(cp(2))\l6 <- Lt(cp(1), mv(7))\lStorage Dead _7\lIntr: Assume mv(6)\lStorage Dead _6\lStorage Live _8\l8 <- Cast-PtrToPtr cp(2)\l0 <- Offset(cp(8), cp(1))\lStorage Dead _8\lReturn\l"];
  }
  X7bd4403f8d22bbb7_1 -> Xfa2081497ee34a_0 [label="cp(1),mv(5)"];
  subgraph cluster_278 {
    label="<usize \nas \ncore::slice::SliceIndex<[\nT]>>::get_unchecked::prec\nondition_check";
    style="filled";
    color=lightgray;
    node_279 [label="LOCALS\l0 = ()\l1 = usize\l2 = usize\l3 = bool\l4 = !\l", style="filled", color=palegreen3];
    Xfa2081497ee34a_0 -> Xfa2081497ee34a_2 [label="0"];
    Xfa2081497ee34a_0 -> Xfa2081497ee34a_1 [label="other"];
    Xfa2081497ee34a_0 [label="Storage Live _3\l3 <- Lt(cp(1), cp(2))\lSwitchInt mv(3)\l"];
    Xfa2081497ee34a_1 [label="Storage Dead _3\lReturn\l"];
    Xfa2081497ee34a_2 [label="Call\l"];
  }
  Xfa2081497ee34a_2 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_280 {
    label="<core::result::Result<&mu\nt \nspl_token_interface::stat\ne::account::Account, \npinocchio::program_error:\n:ProgramError> \nas \ncore::ops::Try>::branch";
    style="filled";
    color=lightgray;
    node_281 [label="LOCALS\l0 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, &mut spl_token_interface::state::account::Account>\l1 = core::result::Result<&mut spl_token_interface::state::account::Account, pinocchio::program_error::ProgramError>\l2 = isize\l3 = &mut spl_token_interface::state::account::Account\l4 = pinocchio::program_error::ProgramError\l5 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    X4bab5789df6a8cfa_0 -> X4bab5789df6a8cfa_3 [label="0"];
    X4bab5789df6a8cfa_0 -> X4bab5789df6a8cfa_2 [label="1"];
    X4bab5789df6a8cfa_0 -> X4bab5789df6a8cfa_1 [label="other"];
    X4bab5789df6a8cfa_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X4bab5789df6a8cfa_1 [label="Unreachable\l"];
    X4bab5789df6a8cfa_2 -> X4bab5789df6a8cfa_4;
    X4bab5789df6a8cfa_2 [label="4 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l5 <- Adt{1} (cp(4))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    X4bab5789df6a8cfa_3 -> X4bab5789df6a8cfa_4;
    X4bab5789df6a8cfa_3 [label="3 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(3))\lGoto\l"];
    X4bab5789df6a8cfa_4 [label="Return\l"];
  }
  subgraph cluster_282 {
    label="<core::result::Result<boo\nl, \npinocchio::program_error:\n:ProgramError> \nas \ncore::ops::Try>::branch";
    style="filled";
    color=lightgray;
    node_283 [label="LOCALS\l0 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, bool>\l1 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l2 = isize\l3 = bool\l4 = pinocchio::program_error::ProgramError\l5 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    X94faba497d3a8d24_0 -> X94faba497d3a8d24_3 [label="0"];
    X94faba497d3a8d24_0 -> X94faba497d3a8d24_2 [label="1"];
    X94faba497d3a8d24_0 -> X94faba497d3a8d24_1 [label="other"];
    X94faba497d3a8d24_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X94faba497d3a8d24_1 [label="Unreachable\l"];
    X94faba497d3a8d24_2 -> X94faba497d3a8d24_4;
    X94faba497d3a8d24_2 [label="4 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l5 <- Adt{1} (cp(4))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    X94faba497d3a8d24_3 -> X94faba497d3a8d24_4;
    X94faba497d3a8d24_3 [label="3 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(3))\lGoto\l"];
    X94faba497d3a8d24_4 [label="Return\l"];
  }
  subgraph cluster_284 {
    label="<core::result::Result<&sp\nl_token_interface::state:\n:multisig::Multisig, \npinocchio::program_error:\n:ProgramError> \nas \ncore::ops::Try>::branch";
    style="filled";
    color=lightgray;
    node_285 [label="LOCALS\l0 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, &spl_token_interface::state::multisig::Multisig>\l1 = core::result::Result<&spl_token_interface::state::multisig::Multisig, pinocchio::program_error::ProgramError>\l2 = isize\l3 = &spl_token_interface::state::multisig::Multisig\l4 = pinocchio::program_error::ProgramError\l5 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    Xd1fa35ead87c4777_0 -> Xd1fa35ead87c4777_3 [label="0"];
    Xd1fa35ead87c4777_0 -> Xd1fa35ead87c4777_2 [label="1"];
    Xd1fa35ead87c4777_0 -> Xd1fa35ead87c4777_1 [label="other"];
    Xd1fa35ead87c4777_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    Xd1fa35ead87c4777_1 [label="Unreachable\l"];
    Xd1fa35ead87c4777_2 -> Xd1fa35ead87c4777_4;
    Xd1fa35ead87c4777_2 [label="4 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l5 <- Adt{1} (cp(4))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    Xd1fa35ead87c4777_3 -> Xd1fa35ead87c4777_4;
    Xd1fa35ead87c4777_3 [label="3 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(3))\lGoto\l"];
    Xd1fa35ead87c4777_4 [label="Return\l"];
  }
  subgraph cluster_286 {
    label="<core::result::Result<u64\n, \nspl_token_interface::erro\nr::TokenError> \nas \ncore::ops::Try>::branch";
    style="filled";
    color=lightgray;
    node_287 [label="LOCALS\l0 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, spl_token_interface::error::TokenError>, u64>\l1 = core::result::Result<u64, spl_token_interface::error::TokenError>\l2 = isize\l3 = u64\l4 = spl_token_interface::error::TokenError\l5 = core::result::Result<core::convert::Infallible, spl_token_interface::error::TokenError>\l", style="filled", color=palegreen3];
    X982e7138866543ff_0 -> X982e7138866543ff_3 [label="0"];
    X982e7138866543ff_0 -> X982e7138866543ff_2 [label="1"];
    X982e7138866543ff_0 -> X982e7138866543ff_1 [label="other"];
    X982e7138866543ff_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X982e7138866543ff_1 [label="Unreachable\l"];
    X982e7138866543ff_2 -> X982e7138866543ff_4;
    X982e7138866543ff_2 [label="4 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l5 <- Adt{1} (cp(4))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    X982e7138866543ff_3 -> X982e7138866543ff_4;
    X982e7138866543ff_3 [label="3 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(3))\lGoto\l"];
    X982e7138866543ff_4 [label="Return\l"];
  }
  subgraph cluster_288 {
    label="<core::result::Result<(u6\n4, \nu8), \nspl_token_interface::erro\nr::TokenError> \nas \ncore::ops::Try>::branch";
    style="filled";
    color=lightgray;
    node_289 [label="LOCALS\l0 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, spl_token_interface::error::TokenError>, (u64, u8)>\l1 = core::result::Result<(u64, u8), spl_token_interface::error::TokenError>\l2 = isize\l3 = (u64, u8)\l4 = spl_token_interface::error::TokenError\l5 = core::result::Result<core::convert::Infallible, spl_token_interface::error::TokenError>\l", style="filled", color=palegreen3];
    X46259ebb8e54e117_0 -> X46259ebb8e54e117_3 [label="0"];
    X46259ebb8e54e117_0 -> X46259ebb8e54e117_2 [label="1"];
    X46259ebb8e54e117_0 -> X46259ebb8e54e117_1 [label="other"];
    X46259ebb8e54e117_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X46259ebb8e54e117_1 [label="Unreachable\l"];
    X46259ebb8e54e117_2 -> X46259ebb8e54e117_4;
    X46259ebb8e54e117_2 [label="4 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l5 <- Adt{1} (cp(4))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    X46259ebb8e54e117_3 -> X46259ebb8e54e117_4;
    X46259ebb8e54e117_3 [label="3 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(3))\lGoto\l"];
    X46259ebb8e54e117_4 [label="Return\l"];
  }
  subgraph cluster_290 {
    label="<core::result::Result<&mu\nt \nspl_token_interface::stat\ne::mint::Mint, \npinocchio::program_error:\n:ProgramError> \nas \ncore::ops::Try>::branch";
    style="filled";
    color=lightgray;
    node_291 [label="LOCALS\l0 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, &mut spl_token_interface::state::mint::Mint>\l1 = core::result::Result<&mut spl_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l2 = isize\l3 = &mut spl_token_interface::state::mint::Mint\l4 = pinocchio::program_error::ProgramError\l5 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    Xfdd8ae4a78e336d8_0 -> Xfdd8ae4a78e336d8_3 [label="0"];
    Xfdd8ae4a78e336d8_0 -> Xfdd8ae4a78e336d8_2 [label="1"];
    Xfdd8ae4a78e336d8_0 -> Xfdd8ae4a78e336d8_1 [label="other"];
    Xfdd8ae4a78e336d8_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    Xfdd8ae4a78e336d8_1 [label="Unreachable\l"];
    Xfdd8ae4a78e336d8_2 -> Xfdd8ae4a78e336d8_4;
    Xfdd8ae4a78e336d8_2 [label="4 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l5 <- Adt{1} (cp(4))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    Xfdd8ae4a78e336d8_3 -> Xfdd8ae4a78e336d8_4;
    Xfdd8ae4a78e336d8_3 [label="3 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(3))\lGoto\l"];
    Xfdd8ae4a78e336d8_4 [label="Return\l"];
  }
  subgraph cluster_292 {
    label="<pinocchio::program_error\n::ProgramError \nas \ncore::cmp::PartialEq>::eq";
    style="filled";
    color=lightgray;
    node_293 [label="LOCALS\l0 = bool\l1 = &pinocchio::program_error::ProgramError\l2 = &pinocchio::program_error::ProgramError\l3 = isize\l4 = isize\l5 = bool\l6 = (&pinocchio::program_error::ProgramError, &pinocchio::program_error::ProgramError)\l7 = isize\l8 = isize\l9 = &u32\l10 = &u32\l11 = &&u32\l12 = &&u32\l13 = &pinocchio::program_error::ProgramError\l14 = &pinocchio::program_error::ProgramError\l15 = &pinocchio::program_error::ProgramError\l16 = &pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    Xb4e4aaf53eb6efb_0 -> Xb4e4aaf53eb6efb_2 [label="0"];
    Xb4e4aaf53eb6efb_0 -> Xb4e4aaf53eb6efb_1 [label="other"];
    Xb4e4aaf53eb6efb_0 [label="3 <- Discriminant((*1))\l4 <- Discriminant((*2))\l5 <- Eq(cp(3), cp(4))\lSwitchInt mv(5)\l"];
    Xb4e4aaf53eb6efb_1 -> Xb4e4aaf53eb6efb_4 [label="0"];
    Xb4e4aaf53eb6efb_1 -> Xb4e4aaf53eb6efb_3 [label="other"];
    Xb4e4aaf53eb6efb_1 [label="6 <- Tuple (cp(1), cp(2))\l13 <- CopyForDeref(6.0)\l8 <- Discriminant((*13))\lSwitchInt mv(8)\l"];
    Xb4e4aaf53eb6efb_2 -> Xb4e4aaf53eb6efb_6;
    Xb4e4aaf53eb6efb_2 [label="0 <- Use(const bool)\lGoto\l"];
    Xb4e4aaf53eb6efb_3 -> Xb4e4aaf53eb6efb_6;
    Xb4e4aaf53eb6efb_3 [label="0 <- Use(const bool)\lGoto\l"];
    Xb4e4aaf53eb6efb_4 -> Xb4e4aaf53eb6efb_5 [label="0"];
    Xb4e4aaf53eb6efb_4 -> Xb4e4aaf53eb6efb_3 [label="other"];
    Xb4e4aaf53eb6efb_4 [label="14 <- CopyForDeref(6.1)\l7 <- Discriminant((*14))\lSwitchInt mv(7)\l"];
    Xb4e4aaf53eb6efb_5 -> Xb4e4aaf53eb6efb_6 [label="0"];
    Xb4e4aaf53eb6efb_5 [label="15 <- CopyForDeref(6.0)\l9 <- & ((*15) as variant 0).0\l16 <- CopyForDeref(6.1)\l10 <- & ((*16) as variant 0).0\l11 <- & 9\l12 <- & 10\lCall\l"];
    Xb4e4aaf53eb6efb_6 [label="Return\l"];
  }
  Xb4e4aaf53eb6efb_5 -> X1db5e3317e89911b_0 [label="mv(11),mv(12)"];
  subgraph cluster_294 {
    label="<core::ops::Range<usize> \nas \ncore::iter::range::RangeI\nteratorImpl>::spec_next";
    style="filled";
    color=lightgray;
    node_295 [label="LOCALS\l0 = core::option::Option<usize>\l1 = &mut core::ops::Range<usize>\l2 = bool\l3 = &usize\l4 = &usize\l5 = usize\l6 = usize\l", style="filled", color=palegreen3];
    X76d9451f9bf287e8_0 -> X76d9451f9bf287e8_1 [label="2"];
    X76d9451f9bf287e8_0 [label="Storage Live _2\lStorage Live _3\l3 <- & (*1).0\lStorage Live _4\l4 <- & (*1).1\lCall\l"];
    X76d9451f9bf287e8_1 -> X76d9451f9bf287e8_4 [label="0"];
    X76d9451f9bf287e8_1 -> X76d9451f9bf287e8_2 [label="other"];
    X76d9451f9bf287e8_1 [label="SwitchInt mv(2)\l"];
    X76d9451f9bf287e8_2 -> X76d9451f9bf287e8_3 [label="6"];
    X76d9451f9bf287e8_2 [label="Storage Dead _4\lStorage Dead _3\l5 <- Use(cp((*1).0))\lStorage Live _6\lCall\l"];
    X76d9451f9bf287e8_3 -> X76d9451f9bf287e8_5;
    X76d9451f9bf287e8_3 [label="(*1).0 <- Use(mv(6))\lStorage Dead _6\l0 <- Adt{1} (cp(5))\lGoto\l"];
    X76d9451f9bf287e8_4 -> X76d9451f9bf287e8_5;
    X76d9451f9bf287e8_4 [label="Storage Dead _4\lStorage Dead _3\l0 <- Adt{0} ()\lGoto\l"];
    X76d9451f9bf287e8_5 [label="Storage Dead _2\lReturn\l"];
  }
  X76d9451f9bf287e8_0 -> Xb4d458fe7af2393d_0 [label="mv(3),mv(4)"];
  X76d9451f9bf287e8_2 -> Xf98c0f07694c6176_0 [label="cp(5),const ?_usize"];
  subgraph cluster_296 {
    label="<pinocchio::program_error\n::ProgramError \nas \npinocchio::program_error:\n:ToStr>::to_str::<spl_tok\nen_interface::error::Toke\nnError>";
    style="filled";
    color=lightgray;
    node_297 [label="LOCALS\l0 = &str\l1 = &pinocchio::program_error::ProgramError\l2 = isize\l3 = &u32\l4 = core::result::Result<spl_token_interface::error::TokenError, pinocchio::program_error::ProgramError>\l5 = u32\l6 = isize\l7 = spl_token_interface::error::TokenError\l8 = &spl_token_interface::error::TokenError\l9 = bool\l10 = isize\l11 = isize\l", style="filled", color=palegreen3];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_27 [label="0"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_26 [label="1"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_25 [label="2"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_24 [label="3"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_23 [label="4"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_22 [label="5"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_21 [label="6"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_20 [label="7"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_19 [label="8"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_18 [label="9"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_17 [label="10"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_16 [label="11"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_15 [label="12"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_14 [label="13"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_13 [label="14"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_12 [label="15"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_11 [label="16"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_10 [label="17"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_9 [label="18"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_8 [label="19"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_7 [label="20"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_6 [label="21"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_5 [label="22"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_4 [label="23"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_3 [label="24"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_2 [label="25"];
    X5de8bd844887fb1f_0 -> X5de8bd844887fb1f_1 [label="other"];
    X5de8bd844887fb1f_0 [label="9 <- Use(const bool)\l2 <- Discriminant((*1))\lSwitchInt mv(2)\l"];
    X5de8bd844887fb1f_1 [label="Unreachable\l"];
    X5de8bd844887fb1f_2 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_2 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_3 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_3 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_4 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_4 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_5 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_5 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_6 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_6 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_7 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_7 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_8 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_8 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_9 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_9 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_10 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_10 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_11 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_11 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_12 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_12 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_13 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_13 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_14 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_14 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_15 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_15 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_16 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_16 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_17 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_17 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_18 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_18 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_19 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_19 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_20 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_20 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_21 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_21 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_22 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_22 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_23 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_23 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_24 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_24 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_25 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_25 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_26 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_26 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_27 -> X5de8bd844887fb1f_28 [label="4"];
    X5de8bd844887fb1f_27 [label="3 <- & ((*1) as variant 0).0\l5 <- Use(cp((*3)))\l9 <- Use(const bool)\lCall\l"];
    X5de8bd844887fb1f_28 -> X5de8bd844887fb1f_29 [label="0"];
    X5de8bd844887fb1f_28 -> X5de8bd844887fb1f_31 [label="1"];
    X5de8bd844887fb1f_28 -> X5de8bd844887fb1f_1 [label="other"];
    X5de8bd844887fb1f_28 [label="6 <- Discriminant(4)\lSwitchInt mv(6)\l"];
    X5de8bd844887fb1f_29 -> X5de8bd844887fb1f_33 [label="Cleanup"];
    X5de8bd844887fb1f_29 -> X5de8bd844887fb1f_30 [label="0"];
    X5de8bd844887fb1f_29 [label="9 <- Use(const bool)\l7 <- Use(mv((4 as variant 0).0))\l8 <- & 7\lCall\l"];
    X5de8bd844887fb1f_30 -> X5de8bd844887fb1f_41 [label="Cleanup"];
    X5de8bd844887fb1f_30 -> X5de8bd844887fb1f_39;
    X5de8bd844887fb1f_30 [label="Drop 7\l"];
    X5de8bd844887fb1f_31 -> X5de8bd844887fb1f_39;
    X5de8bd844887fb1f_31 [label="0 <- Use(const &str)\lGoto\l"];
    X5de8bd844887fb1f_32 [label="Return\l"];
    X5de8bd844887fb1f_33 -> X5de8bd844887fb1f_41;
    X5de8bd844887fb1f_33 [label="Drop 7\l"];
    X5de8bd844887fb1f_34 [label="Resume\l"];
    X5de8bd844887fb1f_35 -> X5de8bd844887fb1f_32;
    X5de8bd844887fb1f_35 [label="9 <- Use(const bool)\lGoto\l"];
    X5de8bd844887fb1f_36 -> X5de8bd844887fb1f_35 [label="0"];
    X5de8bd844887fb1f_36 -> X5de8bd844887fb1f_37 [label="other"];
    X5de8bd844887fb1f_36 [label="SwitchInt cp(9)\l"];
    X5de8bd844887fb1f_37 -> X5de8bd844887fb1f_35;
    X5de8bd844887fb1f_37 [label="Drop (4 as variant 0).0\l"];
    X5de8bd844887fb1f_38 -> X5de8bd844887fb1f_35;
    X5de8bd844887fb1f_38 [label="Drop 4\l"];
    X5de8bd844887fb1f_39 -> X5de8bd844887fb1f_36 [label="0"];
    X5de8bd844887fb1f_39 -> X5de8bd844887fb1f_38 [label="1"];
    X5de8bd844887fb1f_39 -> X5de8bd844887fb1f_1 [label="other"];
    X5de8bd844887fb1f_39 [label="10 <- Discriminant(4)\lSwitchInt mv(10)\l"];
    X5de8bd844887fb1f_40 -> X5de8bd844887fb1f_34;
    X5de8bd844887fb1f_40 [label="Drop 4\l"];
    X5de8bd844887fb1f_41 -> X5de8bd844887fb1f_34 [label="0"];
    X5de8bd844887fb1f_41 -> X5de8bd844887fb1f_40 [label="other"];
    X5de8bd844887fb1f_41 [label="11 <- Discriminant(4)\lSwitchInt mv(11)\l"];
  }
  X5de8bd844887fb1f_27 -> Xd6b56047a80c2f44_0 [label="mv(5)"];
  X5de8bd844887fb1f_29 -> Xd6b5cc134d800e1_0 [label="mv(8)"];
  subgraph cluster_298 {
    label="<spl_token_interface::err\nor::TokenError \nas \npinocchio::program_error:\n:ToStr>::to_str::<spl_tok\nen_interface::error::Toke\nnError>";
    style="filled";
    color=lightgray;
    node_299 [label="LOCALS\l0 = &str\l1 = &spl_token_interface::error::TokenError\l2 = isize\l", style="filled", color=palegreen3];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_21 [label="0"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_20 [label="1"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_19 [label="2"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_18 [label="3"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_17 [label="4"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_16 [label="5"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_15 [label="6"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_14 [label="7"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_13 [label="8"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_12 [label="9"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_11 [label="10"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_10 [label="11"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_9 [label="12"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_8 [label="13"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_7 [label="14"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_6 [label="15"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_5 [label="16"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_4 [label="17"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_3 [label="18"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_2 [label="19"];
    Xd6b5cc134d800e1_0 -> Xd6b5cc134d800e1_1 [label="other"];
    Xd6b5cc134d800e1_0 [label="2 <- Discriminant((*1))\lSwitchInt mv(2)\l"];
    Xd6b5cc134d800e1_1 [label="Unreachable\l"];
    Xd6b5cc134d800e1_2 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_2 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_3 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_3 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_4 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_4 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_5 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_5 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_6 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_6 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_7 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_7 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_8 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_8 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_9 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_9 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_10 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_10 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_11 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_11 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_12 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_12 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_13 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_13 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_14 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_14 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_15 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_15 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_16 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_16 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_17 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_17 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_18 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_18 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_19 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_19 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_20 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_20 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_21 -> Xd6b5cc134d800e1_22;
    Xd6b5cc134d800e1_21 [label="0 <- Use(const &str)\lGoto\l"];
    Xd6b5cc134d800e1_22 [label="Return\l"];
  }
  subgraph cluster_300 {
    label="<core::slice::Iter<'_, \n[u8; \n32]> \nas \ncore::iter::Iterator>::ne\nxt";
    style="filled";
    color=lightgray;
    node_301 [label="LOCALS\l0 = core::option::Option<&[u8; 32]>\l1 = &mut core::slice::Iter<'_, [u8; 32]>\l2 = bool\l3 = usize\l4 = *const [u8; 32]\l5 = core::ptr::NonNull<[u8; 32]>\l6 = *const core::ptr::NonNull<[u8; 32]>\l7 = *const *const [u8; 32]\l8 = &core::ptr::NonNull<[u8; 32]>\l9 = &core::ptr::NonNull<[u8; 32]>\l10 = &[u8; 32]\l11 = core::ptr::NonNull<[u8; 32]>\l12 = *const [u8; 32]\l13 = *const [u8; 32]\l14 = &core::ptr::NonNull<[u8; 32]>\l15 = core::ptr::NonNull<[u8; 32]>\l16 = *mut usize\l17 = *mut *const [u8; 32]\l18 = usize\l19 = usize\l20 = *mut core::ptr::NonNull<[u8; 32]>\l21 = *mut *const [u8; 32]\l22 = core::ptr::NonNull<[u8; 32]>\l23 = core::ptr::NonNull<[u8; 32]>\l24 = *const [u8; 32]\l25 = *const [u8; 32]\l26 = *mut [u8; 32]\l27 = *const [u8; 32]\l", style="filled", color=palegreen3];
    Xc0eec84b93d252df_0 -> Xc0eec84b93d252df_2 [label="0"];
    Xc0eec84b93d252df_0 -> Xc0eec84b93d252df_1 [label="other"];
    Xc0eec84b93d252df_0 [label="Storage Live _2\lSwitchInt const bool\l"];
    Xc0eec84b93d252df_1 -> Xc0eec84b93d252df_3;
    Xc0eec84b93d252df_1 [label="4 <- Use(cp((*1).1))\l3 <- Cast-Transmute cp(4)\l2 <- Eq(cp(3), const ?_usize)\lGoto\l"];
    Xc0eec84b93d252df_2 -> Xc0eec84b93d252df_3;
    Xc0eec84b93d252df_2 [label="Storage Live _6\lStorage Live _7\l7 <- &raw (*1).1\l6 <- Cast-PtrToPtr cp(7)\lStorage Dead _7\l5 <- Use(cp((*6)))\lStorage Dead _6\lStorage Live _8\l8 <- & (*1).0\lStorage Live _9\l9 <- & 5\lStorage Live _12\lStorage Live _13\lStorage Live _11\l11 <- Use(cp((*1).0))\l12 <- Use(cp(11.0))\lStorage Dead _11\l13 <- Use(cp(5.0))\l2 <- Eq(cp(12), cp(13))\lStorage Dead _13\lStorage Dead _12\lStorage Dead _9\lStorage Dead _8\lGoto\l"];
    Xc0eec84b93d252df_3 -> Xc0eec84b93d252df_5 [label="0"];
    Xc0eec84b93d252df_3 -> Xc0eec84b93d252df_4 [label="other"];
    Xc0eec84b93d252df_3 [label="SwitchInt mv(2)\l"];
    Xc0eec84b93d252df_4 -> Xc0eec84b93d252df_6;
    Xc0eec84b93d252df_4 [label="0 <- Use(const core::option::Option<&[u8; 32]>)\lGoto\l"];
    Xc0eec84b93d252df_5 -> Xc0eec84b93d252df_9 [label="0"];
    Xc0eec84b93d252df_5 -> Xc0eec84b93d252df_8 [label="other"];
    Xc0eec84b93d252df_5 [label="Storage Live _15\lStorage Live _14\lStorage Live _16\l15 <- Use(cp((*1).0))\lSwitchInt const bool\l"];
    Xc0eec84b93d252df_6 [label="Storage Dead _2\lReturn\l"];
    Xc0eec84b93d252df_7 -> Xc0eec84b93d252df_6;
    Xc0eec84b93d252df_7 [label="Storage Dead _16\l14 <- & 15\lStorage Live _27\lStorage Live _26\l27 <- Use(cp(15.0))\l26 <- Cast-PtrToPtr cp(27)\lStorage Dead _26\l10 <- & (*27)\lStorage Dead _27\lStorage Dead _14\lStorage Dead _15\l0 <- Adt{1} (cp(10))\lGoto\l"];
    Xc0eec84b93d252df_8 -> Xc0eec84b93d252df_7;
    Xc0eec84b93d252df_8 [label="Storage Live _17\l17 <- &raw mut (*1).1\l16 <- Cast-PtrToPtr cp(17)\lStorage Dead _17\lStorage Live _18\lStorage Live _19\l19 <- Use(cp((*16)))\l18 <- SubUnchecked(mv(19), const ?_usize)\lStorage Dead _19\l(*16) <- Use(mv(18))\lStorage Dead _18\lGoto\l"];
    Xc0eec84b93d252df_9 -> Xc0eec84b93d252df_7;
    Xc0eec84b93d252df_9 [label="Storage Live _20\lStorage Live _21\l21 <- &raw mut (*1).1\l20 <- Cast-PtrToPtr cp(21)\lStorage Dead _21\lStorage Live _22\lStorage Live _23\l23 <- Use(cp((*1).0))\lStorage Live _24\lStorage Live _25\l25 <- Use(cp(23.0))\l24 <- Offset(mv(25), const ?_usize)\lStorage Dead _25\l22 <- Adt{0} (mv(24))\lStorage Dead _24\lStorage Dead _23\l(*1).0 <- Use(mv(22))\lStorage Dead _22\lStorage Dead _20\lGoto\l"];
  }
  subgraph cluster_302 {
    label="<spl_token_interface::sta\nte::account_state::Accoun\ntState \nas \ncore::cmp::PartialEq>::eq";
    style="filled";
    color=lightgray;
    node_303 [label="LOCALS\l0 = bool\l1 = &spl_token_interface::state::account_state::AccountState\l2 = &spl_token_interface::state::account_state::AccountState\l3 = u8\l4 = u8\l", style="filled", color=palegreen3];
    X92c90d3df5004379_0 [label="3 <- Discriminant((*1))\l4 <- Discriminant((*2))\l0 <- Eq(cp(3), cp(4))\lReturn\l"];
  }
  subgraph cluster_304 {
    label="pinocchio::entrypoint::de\nserialize::<'_, \n128>";
    style="filled";
    color=lightgray;
    node_305 [label="LOCALS\l0 = (&[u8; 32], usize, &[u8])\l1 = *mut u8\l2 = &mut [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l3 = usize\l4 = usize\l5 = u64\l6 = *const u64\l7 = *mut u8\l8 = usize\l9 = usize\l10 = (usize, bool)\l11 = usize\l12 = bool\l13 = usize\l14 = core::ops::Range<usize>\l15 = core::ops::Range<usize>\l16 = core::ops::Range<usize>\l17 = core::option::Option<usize>\l18 = &mut core::ops::Range<usize>\l19 = isize\l20 = usize\l21 = *mut pinocchio::account_info::Account\l22 = *mut u8\l23 = usize\l24 = bool\l25 = u8\l26 = usize\l27 = (usize, bool)\l28 = usize\l29 = u64\l30 = (usize, bool)\l31 = (usize, bool)\l32 = usize\l33 = *const u8\l34 = usize\l35 = (usize, bool)\l36 = usize\l37 = (usize, bool)\l38 = &mut pinocchio::account_info::AccountInfo\l39 = &mut core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l40 = usize\l41 = bool\l42 = pinocchio::account_info::AccountInfo\l43 = usize\l44 = (usize, bool)\l45 = &mut pinocchio::account_info::AccountInfo\l46 = &mut core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l47 = usize\l48 = bool\l49 = pinocchio::account_info::AccountInfo\l50 = &pinocchio::account_info::AccountInfo\l51 = &core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l52 = &[core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l53 = usize\l54 = u8\l55 = core::ops::Range<usize>\l56 = core::ops::Range<usize>\l57 = core::ops::Range<usize>\l58 = core::option::Option<usize>\l59 = &mut core::ops::Range<usize>\l60 = isize\l61 = *mut pinocchio::account_info::Account\l62 = *mut u8\l63 = usize\l64 = bool\l65 = u8\l66 = usize\l67 = (usize, bool)\l68 = usize\l69 = u64\l70 = (usize, bool)\l71 = (usize, bool)\l72 = usize\l73 = *const u8\l74 = usize\l75 = (usize, bool)\l76 = usize\l77 = (usize, bool)\l78 = usize\l79 = (usize, bool)\l80 = usize\l81 = u64\l82 = *const u64\l83 = *mut u8\l84 = usize\l85 = usize\l86 = (usize, bool)\l87 = &[u8]\l88 = *const u8\l89 = *mut u8\l90 = usize\l91 = (usize, bool)\l92 = &[u8; 32]\l93 = *const [u8; 32]\l94 = *mut u8\l95 = usize\l96 = usize\l", style="filled", color=palegreen3];
    Xed53fe106f15d44b_0 -> Xed53fe106f15d44b_1 [label="7"];
    Xed53fe106f15d44b_0 [label="3 <- Use(const ?_usize)\l8 <- Use(cp(3))\lCall\l"];
    Xed53fe106f15d44b_1 -> Xed53fe106f15d44b_2 [label="9"];
    Xed53fe106f15d44b_1 [label="6 <- Cast-PtrToPtr mv(7)\l5 <- Use(cp((*6)))\l4 <- Cast-IntToInt mv(5)\lCall\l"];
    Xed53fe106f15d44b_2 -> Xed53fe106f15d44b_3;
    Xed53fe106f15d44b_2 [label="10 <- chkd-Add(cp(3), cp(9))\lAssert mv(10.1) == false\l"];
    Xed53fe106f15d44b_3 -> Xed53fe106f15d44b_48 [label="0"];
    Xed53fe106f15d44b_3 -> Xed53fe106f15d44b_4 [label="other"];
    Xed53fe106f15d44b_3 [label="3 <- Use(mv(10.0))\l12 <- Gt(cp(4), const ?_usize)\lSwitchInt mv(12)\l"];
    Xed53fe106f15d44b_4 -> Xed53fe106f15d44b_5 [label="13"];
    Xed53fe106f15d44b_4 [label="Call\l"];
    Xed53fe106f15d44b_5 -> Xed53fe106f15d44b_6 [label="14"];
    Xed53fe106f15d44b_5 [label="15 <- Adt{0} (const ?_usize, cp(13))\lCall\l"];
    Xed53fe106f15d44b_6 -> Xed53fe106f15d44b_7;
    Xed53fe106f15d44b_6 [label="16 <- Use(mv(14))\lGoto\l"];
    Xed53fe106f15d44b_7 -> Xed53fe106f15d44b_8 [label="17"];
    Xed53fe106f15d44b_7 [label="18 <- &mut 16\lCall\l"];
    Xed53fe106f15d44b_8 -> Xed53fe106f15d44b_11 [label="0"];
    Xed53fe106f15d44b_8 -> Xed53fe106f15d44b_10 [label="1"];
    Xed53fe106f15d44b_8 -> Xed53fe106f15d44b_9 [label="other"];
    Xed53fe106f15d44b_8 [label="19 <- Discriminant(17)\lSwitchInt mv(19)\l"];
    Xed53fe106f15d44b_9 [label="Unreachable\l"];
    Xed53fe106f15d44b_10 -> Xed53fe106f15d44b_12 [label="22"];
    Xed53fe106f15d44b_10 [label="20 <- Use(cp((17 as variant 1).0))\l23 <- Use(cp(3))\lCall\l"];
    Xed53fe106f15d44b_11 -> Xed53fe106f15d44b_30 [label="55"];
    Xed53fe106f15d44b_11 [label="56 <- Adt{0} (cp(13), cp(4))\lCall\l"];
    Xed53fe106f15d44b_12 -> Xed53fe106f15d44b_23 [label="0"];
    Xed53fe106f15d44b_12 -> Xed53fe106f15d44b_13 [label="other"];
    Xed53fe106f15d44b_12 [label="21 <- Cast-PtrToPtr mv(22)\l25 <- Use(cp((*21).0))\l24 <- Eq(mv(25), const ?_u8)\lSwitchInt mv(24)\l"];
    Xed53fe106f15d44b_13 -> Xed53fe106f15d44b_14 [label="26"];
    Xed53fe106f15d44b_13 [label="(*21).0 <- Use(const ?_u8)\lCall\l"];
    Xed53fe106f15d44b_14 -> Xed53fe106f15d44b_15;
    Xed53fe106f15d44b_14 [label="27 <- chkd-Add(cp(3), cp(26))\lAssert mv(27.1) == false\l"];
    Xed53fe106f15d44b_15 -> Xed53fe106f15d44b_16;
    Xed53fe106f15d44b_15 [label="3 <- Use(mv(27.0))\l29 <- Use(cp((*21).8))\l28 <- Cast-IntToInt mv(29)\l30 <- chkd-Add(cp(3), cp(28))\lAssert mv(30.1) == false\l"];
    Xed53fe106f15d44b_16 -> Xed53fe106f15d44b_17;
    Xed53fe106f15d44b_16 [label="3 <- Use(mv(30.0))\l31 <- chkd-Add(cp(3), const ?_usize)\lAssert mv(31.1) == false\l"];
    Xed53fe106f15d44b_17 -> Xed53fe106f15d44b_18 [label="32"];
    Xed53fe106f15d44b_17 [label="3 <- Use(mv(31.0))\l34 <- Use(cp(3))\l33 <- Cast-PointerWithExposedProvenance mv(34)\lCall\l"];
    Xed53fe106f15d44b_18 -> Xed53fe106f15d44b_19;
    Xed53fe106f15d44b_18 [label="35 <- chkd-Add(cp(3), cp(32))\lAssert mv(35.1) == false\l"];
    Xed53fe106f15d44b_19 -> Xed53fe106f15d44b_20 [label="36"];
    Xed53fe106f15d44b_19 [label="3 <- Use(mv(35.0))\lCall\l"];
    Xed53fe106f15d44b_20 -> Xed53fe106f15d44b_21;
    Xed53fe106f15d44b_20 [label="37 <- chkd-Add(cp(3), cp(36))\lAssert mv(37.1) == false\l"];
    Xed53fe106f15d44b_21 -> Xed53fe106f15d44b_22;
    Xed53fe106f15d44b_21 [label="3 <- Use(mv(37.0))\l40 <- Len((*2))\l41 <- Lt(cp(20), cp(40))\lAssert mv(41) == true\l"];
    Xed53fe106f15d44b_22 -> Xed53fe106f15d44b_7 [label="38"];
    Xed53fe106f15d44b_22 [label="39 <- &mut (*2)[_20]\l42 <- Adt{0} (cp(21))\lCall\l"];
    Xed53fe106f15d44b_23 -> Xed53fe106f15d44b_24 [label="43"];
    Xed53fe106f15d44b_23 [label="Call\l"];
    Xed53fe106f15d44b_24 -> Xed53fe106f15d44b_25;
    Xed53fe106f15d44b_24 [label="44 <- chkd-Add(cp(3), cp(43))\lAssert mv(44.1) == false\l"];
    Xed53fe106f15d44b_25 -> Xed53fe106f15d44b_26;
    Xed53fe106f15d44b_25 [label="3 <- Use(mv(44.0))\l47 <- Len((*2))\l48 <- Lt(cp(20), cp(47))\lAssert mv(48) == true\l"];
    Xed53fe106f15d44b_26 -> Xed53fe106f15d44b_27 [label="51"];
    Xed53fe106f15d44b_26 [label="46 <- &mut (*2)[_20]\l52 <- & (*2)\l54 <- Use(cp((*21).0))\l53 <- Cast-IntToInt mv(54)\lCall\l"];
    Xed53fe106f15d44b_27 -> Xed53fe106f15d44b_28 [label="50"];
    Xed53fe106f15d44b_27 [label="Call\l"];
    Xed53fe106f15d44b_28 -> Xed53fe106f15d44b_29 [label="49"];
    Xed53fe106f15d44b_28 [label="Call\l"];
    Xed53fe106f15d44b_29 -> Xed53fe106f15d44b_7 [label="45"];
    Xed53fe106f15d44b_29 [label="Call\l"];
    Xed53fe106f15d44b_30 -> Xed53fe106f15d44b_31;
    Xed53fe106f15d44b_30 [label="57 <- Use(mv(55))\lGoto\l"];
    Xed53fe106f15d44b_31 -> Xed53fe106f15d44b_32 [label="58"];
    Xed53fe106f15d44b_31 [label="59 <- &mut 57\lCall\l"];
    Xed53fe106f15d44b_32 -> Xed53fe106f15d44b_34 [label="0"];
    Xed53fe106f15d44b_32 -> Xed53fe106f15d44b_33 [label="1"];
    Xed53fe106f15d44b_32 -> Xed53fe106f15d44b_9 [label="other"];
    Xed53fe106f15d44b_32 [label="60 <- Discriminant(58)\lSwitchInt mv(60)\l"];
    Xed53fe106f15d44b_33 -> Xed53fe106f15d44b_35 [label="62"];
    Xed53fe106f15d44b_33 [label="63 <- Use(cp(3))\lCall\l"];
    Xed53fe106f15d44b_34 -> Xed53fe106f15d44b_49;
    Xed53fe106f15d44b_34 [label="11 <- Use(cp(13))\lGoto\l"];
    Xed53fe106f15d44b_35 -> Xed53fe106f15d44b_45 [label="0"];
    Xed53fe106f15d44b_35 -> Xed53fe106f15d44b_36 [label="other"];
    Xed53fe106f15d44b_35 [label="61 <- Cast-PtrToPtr mv(62)\l65 <- Use(cp((*61).0))\l64 <- Eq(mv(65), const ?_u8)\lSwitchInt mv(64)\l"];
    Xed53fe106f15d44b_36 -> Xed53fe106f15d44b_37 [label="66"];
    Xed53fe106f15d44b_36 [label="Call\l"];
    Xed53fe106f15d44b_37 -> Xed53fe106f15d44b_38;
    Xed53fe106f15d44b_37 [label="67 <- chkd-Add(cp(3), cp(66))\lAssert mv(67.1) == false\l"];
    Xed53fe106f15d44b_38 -> Xed53fe106f15d44b_39;
    Xed53fe106f15d44b_38 [label="3 <- Use(mv(67.0))\l69 <- Use(cp((*61).8))\l68 <- Cast-IntToInt mv(69)\l70 <- chkd-Add(cp(3), cp(68))\lAssert mv(70.1) == false\l"];
    Xed53fe106f15d44b_39 -> Xed53fe106f15d44b_40;
    Xed53fe106f15d44b_39 [label="3 <- Use(mv(70.0))\l71 <- chkd-Add(cp(3), const ?_usize)\lAssert mv(71.1) == false\l"];
    Xed53fe106f15d44b_40 -> Xed53fe106f15d44b_41 [label="72"];
    Xed53fe106f15d44b_40 [label="3 <- Use(mv(71.0))\l74 <- Use(cp(3))\l73 <- Cast-PointerWithExposedProvenance mv(74)\lCall\l"];
    Xed53fe106f15d44b_41 -> Xed53fe106f15d44b_42;
    Xed53fe106f15d44b_41 [label="75 <- chkd-Add(cp(3), cp(72))\lAssert mv(75.1) == false\l"];
    Xed53fe106f15d44b_42 -> Xed53fe106f15d44b_43 [label="76"];
    Xed53fe106f15d44b_42 [label="3 <- Use(mv(75.0))\lCall\l"];
    Xed53fe106f15d44b_43 -> Xed53fe106f15d44b_44;
    Xed53fe106f15d44b_43 [label="77 <- chkd-Add(cp(3), cp(76))\lAssert mv(77.1) == false\l"];
    Xed53fe106f15d44b_44 -> Xed53fe106f15d44b_31;
    Xed53fe106f15d44b_44 [label="3 <- Use(mv(77.0))\lGoto\l"];
    Xed53fe106f15d44b_45 -> Xed53fe106f15d44b_46 [label="78"];
    Xed53fe106f15d44b_45 [label="Call\l"];
    Xed53fe106f15d44b_46 -> Xed53fe106f15d44b_47;
    Xed53fe106f15d44b_46 [label="79 <- chkd-Add(cp(3), cp(78))\lAssert mv(79.1) == false\l"];
    Xed53fe106f15d44b_47 -> Xed53fe106f15d44b_31;
    Xed53fe106f15d44b_47 [label="3 <- Use(mv(79.0))\lGoto\l"];
    Xed53fe106f15d44b_48 -> Xed53fe106f15d44b_49;
    Xed53fe106f15d44b_48 [label="11 <- Use(const ?_usize)\lGoto\l"];
    Xed53fe106f15d44b_49 -> Xed53fe106f15d44b_50 [label="83"];
    Xed53fe106f15d44b_49 [label="84 <- Use(cp(3))\lCall\l"];
    Xed53fe106f15d44b_50 -> Xed53fe106f15d44b_51 [label="85"];
    Xed53fe106f15d44b_50 [label="82 <- Cast-PtrToPtr mv(83)\l81 <- Use(cp((*82)))\l80 <- Cast-IntToInt mv(81)\lCall\l"];
    Xed53fe106f15d44b_51 -> Xed53fe106f15d44b_52;
    Xed53fe106f15d44b_51 [label="86 <- chkd-Add(cp(3), cp(85))\lAssert mv(86.1) == false\l"];
    Xed53fe106f15d44b_52 -> Xed53fe106f15d44b_53 [label="89"];
    Xed53fe106f15d44b_52 [label="3 <- Use(mv(86.0))\l90 <- Use(cp(3))\lCall\l"];
    Xed53fe106f15d44b_53 -> Xed53fe106f15d44b_54 [label="87"];
    Xed53fe106f15d44b_53 [label="88 <- Cast-PtrToPtr mv(89)\lCall\l"];
    Xed53fe106f15d44b_54 -> Xed53fe106f15d44b_55;
    Xed53fe106f15d44b_54 [label="91 <- chkd-Add(cp(3), cp(80))\lAssert mv(91.1) == false\l"];
    Xed53fe106f15d44b_55 -> Xed53fe106f15d44b_56 [label="94"];
    Xed53fe106f15d44b_55 [label="3 <- Use(mv(91.0))\l95 <- Use(cp(3))\lCall\l"];
    Xed53fe106f15d44b_56 [label="93 <- Cast-PtrToPtr mv(94)\l92 <- & (*93)\l96 <- Use(cp(11))\l0 <- Tuple (cp(92), mv(96), cp(87))\lReturn\l"];
  }
  Xed53fe106f15d44b_0 -> Xf7c0564bc7b3306b_0 [label="cp(1),mv(8)"];
  Xed53fe106f15d44b_1 -> Xc400e100fe1b1e46_0 [label=""];
  Xed53fe106f15d44b_4 -> Xd4c8399dbe49afd_0 [label="cp(4),const ?_usize"];
  Xed53fe106f15d44b_5 -> Xe9e3ff72e55a5f27_0 [label="mv(15)"];
  Xed53fe106f15d44b_7 -> X1f9e69c6b415d93e_0 [label="cp(18)"];
  Xed53fe106f15d44b_10 -> Xf7c0564bc7b3306b_0 [label="cp(1),mv(23)"];
  Xed53fe106f15d44b_11 -> Xe9e3ff72e55a5f27_0 [label="mv(56)"];
  Xed53fe106f15d44b_13 -> Xdcc6cca97078e0a0_0 [label=""];
  Xed53fe106f15d44b_17 -> X1016b8be58aff39a_0 [label="mv(33),const ?_usize"];
  Xed53fe106f15d44b_19 -> Xc400e100fe1b1e46_0 [label=""];
  Xed53fe106f15d44b_22 -> X3e61e2a565de7318_0 [label="mv(39),mv(42)"];
  Xed53fe106f15d44b_23 -> Xc400e100fe1b1e46_0 [label=""];
  Xed53fe106f15d44b_26 -> X5fd8469768ca93e7_0 [label="mv(52),mv(53)"];
  Xed53fe106f15d44b_27 -> Xa243b99d87ed4046_0 [label="cp(51)"];
  Xed53fe106f15d44b_28 -> Xdf6433a5e6c64a8f_0 [label="cp(50)"];
  Xed53fe106f15d44b_29 -> X3e61e2a565de7318_0 [label="mv(46),mv(49)"];
  Xed53fe106f15d44b_31 -> X1f9e69c6b415d93e_0 [label="cp(59)"];
  Xed53fe106f15d44b_33 -> Xf7c0564bc7b3306b_0 [label="cp(1),mv(63)"];
  Xed53fe106f15d44b_36 -> Xdcc6cca97078e0a0_0 [label=""];
  Xed53fe106f15d44b_40 -> X1016b8be58aff39a_0 [label="mv(73),const ?_usize"];
  Xed53fe106f15d44b_42 -> Xc400e100fe1b1e46_0 [label=""];
  Xed53fe106f15d44b_45 -> Xc400e100fe1b1e46_0 [label=""];
  Xed53fe106f15d44b_49 -> Xf7c0564bc7b3306b_0 [label="cp(1),mv(84)"];
  Xed53fe106f15d44b_50 -> Xc400e100fe1b1e46_0 [label=""];
  Xed53fe106f15d44b_52 -> Xf7c0564bc7b3306b_0 [label="cp(1),mv(90)"];
  Xed53fe106f15d44b_53 -> X445ab3f2d45ff97a_0 [label="mv(88),cp(80)"];
  Xed53fe106f15d44b_55 -> Xf7c0564bc7b3306b_0 [label="cp(1),mv(95)"];
  subgraph cluster_306 {
    label="pinocchio::account_info::\nAccountInfo::is_owned_by";
    style="filled";
    color=lightgray;
    node_307 [label="LOCALS\l0 = bool\l1 = &pinocchio::account_info::AccountInfo\l2 = &[u8; 32]\l3 = &&[u8; 32]\l4 = &[u8; 32]\l5 = &&[u8; 32]\l6 = *mut pinocchio::account_info::Account\l", style="filled", color=palegreen3];
    X8f13c009139e5cec_0 -> X8f13c009139e5cec_1 [label="0"];
    X8f13c009139e5cec_0 [label="6 <- CopyForDeref((*1).0)\l4 <- & (*6).6\l3 <- & 4\l5 <- & 2\lCall\l"];
    X8f13c009139e5cec_1 [label="Return\l"];
  }
  X8f13c009139e5cec_0 -> X62e1ca1dfa9f1ff9_0 [label="mv(3),mv(5)"];
  subgraph cluster_308 {
    label="pinocchio::account_info::\nAccountInfo::borrow_data_\nunchecked";
    style="filled";
    color=lightgray;
    node_309 [label="LOCALS\l0 = &[u8]\l1 = &pinocchio::account_info::AccountInfo\l2 = *const u8\l3 = *mut u8\l4 = usize\l", style="filled", color=palegreen3];
    Xd87d8e0f8c4953f_0 -> Xd87d8e0f8c4953f_1 [label="3"];
    Xd87d8e0f8c4953f_0 [label="Call\l"];
    Xd87d8e0f8c4953f_1 -> Xd87d8e0f8c4953f_2 [label="4"];
    Xd87d8e0f8c4953f_1 [label="2 <- Cast-PtrToPtr mv(3)\lCall\l"];
    Xd87d8e0f8c4953f_2 -> Xd87d8e0f8c4953f_3 [label="0"];
    Xd87d8e0f8c4953f_2 [label="Call\l"];
    Xd87d8e0f8c4953f_3 [label="Return\l"];
  }
  Xd87d8e0f8c4953f_0 -> X5487d67c18c92abd_0 [label="cp(1)"];
  Xd87d8e0f8c4953f_1 -> X499a64bd2ee6dafa_0 [label="cp(1)"];
  Xd87d8e0f8c4953f_2 -> X445ab3f2d45ff97a_0 [label="mv(2),mv(4)"];
  subgraph cluster_310 {
    label="pinocchio::account_info::\nAccountInfo::borrow_mut_d\nata_unchecked";
    style="filled";
    color=lightgray;
    node_311 [label="LOCALS\l0 = &mut [u8]\l1 = &pinocchio::account_info::AccountInfo\l2 = *mut u8\l3 = usize\l", style="filled", color=palegreen3];
    X5492146546091aad_0 -> X5492146546091aad_1 [label="2"];
    X5492146546091aad_0 [label="Call\l"];
    X5492146546091aad_1 -> X5492146546091aad_2 [label="3"];
    X5492146546091aad_1 [label="Call\l"];
    X5492146546091aad_2 -> X5492146546091aad_3 [label="0"];
    X5492146546091aad_2 [label="Call\l"];
    X5492146546091aad_3 [label="Return\l"];
  }
  X5492146546091aad_0 -> X5487d67c18c92abd_0 [label="cp(1)"];
  X5492146546091aad_1 -> X499a64bd2ee6dafa_0 [label="cp(1)"];
  X5492146546091aad_2 -> Xd45e0829bd9b8685_0 [label="mv(2),mv(3)"];
  subgraph cluster_312 {
    label="pinocchio::account_info::\nAccountInfo::key";
    style="filled";
    color=lightgray;
    node_313 [label="LOCALS\l0 = &[u8; 32]\l1 = &pinocchio::account_info::AccountInfo\l2 = *mut pinocchio::account_info::Account\l", style="filled", color=palegreen3];
    X8817de218f598320_0 [label="2 <- CopyForDeref((*1).0)\l0 <- & (*2).5\lReturn\l"];
  }
  subgraph cluster_314 {
    label="pinocchio::account_info::\nAccountInfo::owner";
    style="filled";
    color=lightgray;
    node_315 [label="LOCALS\l0 = &[u8; 32]\l1 = &pinocchio::account_info::AccountInfo\l2 = *mut pinocchio::account_info::Account\l", style="filled", color=palegreen3];
    X63a66dd16cbd53fd_0 [label="2 <- CopyForDeref((*1).0)\l0 <- & (*2).6\lReturn\l"];
  }
  subgraph cluster_316 {
    label="pinocchio::account_info::\nAccountInfo::data_len";
    style="filled";
    color=lightgray;
    node_317 [label="LOCALS\l0 = usize\l1 = &pinocchio::account_info::AccountInfo\l2 = u64\l3 = *mut pinocchio::account_info::Account\l", style="filled", color=palegreen3];
    X499a64bd2ee6dafa_0 [label="3 <- CopyForDeref((*1).0)\l2 <- Use(cp((*3).8))\l0 <- Cast-IntToInt mv(2)\lReturn\l"];
  }
  subgraph cluster_318 {
    label="pinocchio::account_info::\nAccountInfo::is_signer";
    style="filled";
    color=lightgray;
    node_319 [label="LOCALS\l0 = bool\l1 = &pinocchio::account_info::AccountInfo\l2 = u8\l3 = *mut pinocchio::account_info::Account\l", style="filled", color=palegreen3];
    Xd3776f91071efde4_0 [label="3 <- CopyForDeref((*1).0)\l2 <- Use(cp((*3).1))\l0 <- Ne(mv(2), const ?_u8)\lReturn\l"];
  }
  subgraph cluster_320 {
    label="pinocchio::log::sol_log";
    style="filled";
    color=lightgray;
    node_321 [label="LOCALS\l0 = ()\l1 = &str\l2 = &str\l", style="filled", color=palegreen3];
    X3a0ccd4589f66f55_0 -> X3a0ccd4589f66f55_1 [label="2"];
    X3a0ccd4589f66f55_0 [label="Call\l"];
    X3a0ccd4589f66f55_1 [label="Return\l"];
  }
  X3a0ccd4589f66f55_0 -> X1f8937e70182e85e_0 [label="cp(1)"];
  subgraph cluster_322 {
    label="entrypoint::entrypoint";
    style="filled";
    color=lightgray;
    node_323 [label="LOCALS\l0 = u64\l1 = *mut u8\l2 = [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>; 128]\l3 = &[u8; 32]\l4 = usize\l5 = &[u8]\l6 = (&[u8; 32], usize, &[u8])\l7 = &mut [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l8 = &mut [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>; 128]\l9 = core::result::Result<(), pinocchio::program_error::ProgramError>\l10 = &&[u8; 32]\l11 = &[pinocchio::account_info::AccountInfo]\l12 = *const pinocchio::account_info::AccountInfo\l13 = *const core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l14 = &[core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l15 = &[core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>; 128]\l16 = &&[u8]\l17 = isize\l18 = pinocchio::program_error::ProgramError\l19 = &[u8; 32]\l20 = &[u8]\l", style="filled", color=palegreen3];
    X35727d23baa70bc_0 -> X35727d23baa70bc_1 [label="6"];
    X35727d23baa70bc_0 [label="2 <- Repeat const core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l8 <- &mut 2\l7 <- Cast-PointerCoercion(Unsize) cp(8)\lCall\l"];
    X35727d23baa70bc_1 -> X35727d23baa70bc_2 [label="13"];
    X35727d23baa70bc_1 [label="3 <- Use(cp(6.0))\l4 <- Use(cp(6.1))\l5 <- Use(cp(6.2))\l10 <- & 3\l19 <- CopyForDeref((*10))\l15 <- & 2\l14 <- Cast-PointerCoercion(Unsize) mv(15)\lCall\l"];
    X35727d23baa70bc_2 -> X35727d23baa70bc_3 [label="11"];
    X35727d23baa70bc_2 [label="12 <- Cast-PtrToPtr mv(13)\lCall\l"];
    X35727d23baa70bc_3 -> X35727d23baa70bc_4 [label="9"];
    X35727d23baa70bc_3 [label="16 <- & 5\l20 <- CopyForDeref((*16))\lCall\l"];
    X35727d23baa70bc_4 -> X35727d23baa70bc_7 [label="0"];
    X35727d23baa70bc_4 -> X35727d23baa70bc_6 [label="1"];
    X35727d23baa70bc_4 -> X35727d23baa70bc_5 [label="other"];
    X35727d23baa70bc_4 [label="17 <- Discriminant(9)\lSwitchInt mv(17)\l"];
    X35727d23baa70bc_5 [label="Unreachable\l"];
    X35727d23baa70bc_6 -> X35727d23baa70bc_9 [label="0"];
    X35727d23baa70bc_6 [label="18 <- Use(mv((9 as variant 1).0))\lCall\l"];
    X35727d23baa70bc_7 -> X35727d23baa70bc_8;
    X35727d23baa70bc_7 [label="0 <- Use(const ?_u64)\lGoto\l"];
    X35727d23baa70bc_8 [label="Return\l"];
    X35727d23baa70bc_9 -> X35727d23baa70bc_8;
    X35727d23baa70bc_9 [label="Goto\l"];
  }
  X35727d23baa70bc_0 -> Xed53fe106f15d44b_0 [label="cp(1),mv(7)"];
  X35727d23baa70bc_1 -> Xd96a92a3093bb3ff_0 [label="mv(14)"];
  X35727d23baa70bc_2 -> X990394bf3cfa52c4_0 [label="cp(12),cp(4)"];
  X35727d23baa70bc_3 -> Xf71ee158856918bf_0 [label="cp(19),cp(11),cp(20)"];
  X35727d23baa70bc_6 -> X9b7d50e3fbab8ea3_0 [label="mv(18)"];
}
